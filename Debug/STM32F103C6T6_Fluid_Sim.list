
STM32F103C6T6_Fluid_Sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005664  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005774  08005774  00006774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005884  08005884  000070f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005884  08005884  000070f0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005884  08005884  000070f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005884  08005884  00006884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005888  08005888  00006888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f0  20000000  0800588c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  200000f0  0800597c  000070f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800597c  00007964  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007987  00000000  00000000  00007119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d8  00000000  00000000  0000eaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00010478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000656  00000000  00000000  00010cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001791a  00000000  00000000  0001131e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aea0  00000000  00000000  00028c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826cc  00000000  00000000  00033ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b61a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d6c  00000000  00000000  000b61e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000b8f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f0 	.word	0x200000f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800575c 	.word	0x0800575c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f4 	.word	0x200000f4
 800014c:	0800575c 	.word	0x0800575c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bfa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	@ 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	@ 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	@ 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpun>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__aeabi_fcmpun+0x14>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d102      	bne.n	8000f54 <__aeabi_fcmpun+0x20>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d102      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	f04f 0001 	mov.w	r0, #1
 8000f5e:	4770      	bx	lr

08000f60 <__aeabi_f2iz>:
 8000f60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f64:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f68:	d30f      	bcc.n	8000f8a <__aeabi_f2iz+0x2a>
 8000f6a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f72:	d90d      	bls.n	8000f90 <__aeabi_f2iz+0x30>
 8000f74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f7c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f80:	fa23 f002 	lsr.w	r0, r3, r2
 8000f84:	bf18      	it	ne
 8000f86:	4240      	negne	r0, r0
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr
 8000f90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f94:	d101      	bne.n	8000f9a <__aeabi_f2iz+0x3a>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d105      	bne.n	8000fa6 <__aeabi_f2iz+0x46>
 8000f9a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f9e:	bf08      	it	eq
 8000fa0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr

08000fac <generate_output>:
	out_string[index] = '\0';

	return out_string;
}

void generate_output(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
	for (int y = 0; y < OUT_BUFFER_DIM; y++) {
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e013      	b.n	8000fe0 <generate_output+0x34>
		for (int x = 0; x < OUT_BUFFER_DIM; x++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	e00a      	b.n	8000fd4 <generate_output+0x28>
			out_buffer[y][x] = 0;
 8000fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001068 <generate_output+0xbc>)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	441a      	add	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4413      	add	r3, r2
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
		for (int x = 0; x < OUT_BUFFER_DIM; x++) {
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	2b07      	cmp	r3, #7
 8000fd8:	ddf1      	ble.n	8000fbe <generate_output+0x12>
	for (int y = 0; y < OUT_BUFFER_DIM; y++) {
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2b07      	cmp	r3, #7
 8000fe4:	dde8      	ble.n	8000fb8 <generate_output+0xc>
		}
	}
	for (int i = 0; i < PARTICLE_COUNT; i++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	e035      	b.n	8001058 <generate_output+0xac>
		Particle* p = particles + i;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800106c <generate_output+0xc0>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60bb      	str	r3, [r7, #8]
		int x = p->pos.x / GRID_SIZE * OUT_BUFFER_DIM;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fe86 	bl	8000d10 <__aeabi_fdiv>
 8001004:	4603      	mov	r3, r0
 8001006:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fdcc 	bl	8000ba8 <__aeabi_fmul>
 8001010:	4603      	mov	r3, r0
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ffa4 	bl	8000f60 <__aeabi_f2iz>
 8001018:	4603      	mov	r3, r0
 800101a:	607b      	str	r3, [r7, #4]
		int y = p->pos.y / GRID_SIZE * OUT_BUFFER_DIM;
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fe73 	bl	8000d10 <__aeabi_fdiv>
 800102a:	4603      	mov	r3, r0
 800102c:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fdb9 	bl	8000ba8 <__aeabi_fmul>
 8001036:	4603      	mov	r3, r0
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff91 	bl	8000f60 <__aeabi_f2iz>
 800103e:	4603      	mov	r3, r0
 8001040:	603b      	str	r3, [r7, #0]
		out_buffer[y][x] = 1;
 8001042:	4a09      	ldr	r2, [pc, #36]	@ (8001068 <generate_output+0xbc>)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	441a      	add	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PARTICLE_COUNT; i++) {
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b1d      	cmp	r3, #29
 800105c:	ddc6      	ble.n	8000fec <generate_output+0x40>
	}
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000768 	.word	0x20000768
 800106c:	2000010c 	.word	0x2000010c

08001070 <init_particles_middle>:
        particles[i].vel.x = 0.0f;
        particles[i].vel.y = 0.0f;
    }
}

void init_particles_middle() {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	e05b      	b.n	8001134 <init_particles_middle+0xc4>
        particles[i].pos.x = (float)rand() / RAND_MAX * GRID_SIZE / 3 + GRID_SIZE / 3;
 800107c:	f003 fafe 	bl	800467c <rand>
 8001080:	4603      	mov	r3, r0
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fd3c 	bl	8000b00 <__aeabi_i2f>
 8001088:	4603      	mov	r3, r0
 800108a:	f04f 419e 	mov.w	r1, #1325400064	@ 0x4f000000
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fe3e 	bl	8000d10 <__aeabi_fdiv>
 8001094:	4603      	mov	r3, r0
 8001096:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fd84 	bl	8000ba8 <__aeabi_fmul>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4928      	ldr	r1, [pc, #160]	@ (8001144 <init_particles_middle+0xd4>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fe33 	bl	8000d10 <__aeabi_fdiv>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fc71 	bl	8000998 <__addsf3>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4619      	mov	r1, r3
 80010ba:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <init_particles_middle+0xd8>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4413      	add	r3, r2
 80010c2:	6019      	str	r1, [r3, #0]
        particles[i].pos.y = (float)rand() / RAND_MAX * GRID_SIZE / 3 + GRID_SIZE / 3;
 80010c4:	f003 fada 	bl	800467c <rand>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fd18 	bl	8000b00 <__aeabi_i2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f04f 419e 	mov.w	r1, #1325400064	@ 0x4f000000
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fe1a 	bl	8000d10 <__aeabi_fdiv>
 80010dc:	4603      	mov	r3, r0
 80010de:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fd60 	bl	8000ba8 <__aeabi_fmul>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4916      	ldr	r1, [pc, #88]	@ (8001144 <init_particles_middle+0xd4>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fe0f 	bl	8000d10 <__aeabi_fdiv>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fc4d 	bl	8000998 <__addsf3>
 80010fe:	4603      	mov	r3, r0
 8001100:	4619      	mov	r1, r3
 8001102:	4a11      	ldr	r2, [pc, #68]	@ (8001148 <init_particles_middle+0xd8>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	4413      	add	r3, r2
 800110a:	3304      	adds	r3, #4
 800110c:	6019      	str	r1, [r3, #0]
        particles[i].vel.x = 0.0f;
 800110e:	4a0e      	ldr	r2, [pc, #56]	@ (8001148 <init_particles_middle+0xd8>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	4413      	add	r3, r2
 8001116:	3308      	adds	r3, #8
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
        particles[i].vel.y = 0.0f;
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <init_particles_middle+0xd8>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	4413      	add	r3, r2
 8001126:	330c      	adds	r3, #12
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3301      	adds	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b1d      	cmp	r3, #29
 8001138:	dda0      	ble.n	800107c <init_particles_middle+0xc>
    }
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40400000 	.word	0x40400000
 8001148:	2000010c 	.word	0x2000010c

0800114c <clear_grid>:


void clear_grid() {
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
    for (int y = 0; y < GRID_SIZE; y++)
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	e040      	b.n	80011da <clear_grid+0x8e>
        for (int x = 0; x < GRID_SIZE; x++) {
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	e037      	b.n	80011ce <clear_grid+0x82>
            grid[y][x].velocity.x = 0.0f;
 800115e:	4823      	ldr	r0, [pc, #140]	@ (80011ec <clear_grid+0xa0>)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	461a      	mov	r2, r3
 8001166:	0052      	lsls	r2, r2, #1
 8001168:	441a      	add	r2, r3
 800116a:	0093      	lsls	r3, r2, #2
 800116c:	461a      	mov	r2, r3
 800116e:	460b      	mov	r3, r1
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	440b      	add	r3, r1
 8001174:	015b      	lsls	r3, r3, #5
 8001176:	4413      	add	r3, r2
 8001178:	4403      	add	r3, r0
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
            grid[y][x].velocity.y = 0.0f;
 8001180:	481a      	ldr	r0, [pc, #104]	@ (80011ec <clear_grid+0xa0>)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	461a      	mov	r2, r3
 8001188:	0052      	lsls	r2, r2, #1
 800118a:	441a      	add	r2, r3
 800118c:	0093      	lsls	r3, r2, #2
 800118e:	461a      	mov	r2, r3
 8001190:	460b      	mov	r3, r1
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	440b      	add	r3, r1
 8001196:	015b      	lsls	r3, r3, #5
 8001198:	4413      	add	r3, r2
 800119a:	4403      	add	r3, r0
 800119c:	3304      	adds	r3, #4
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
            grid[y][x].mass = 0.0f;
 80011a4:	4811      	ldr	r0, [pc, #68]	@ (80011ec <clear_grid+0xa0>)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	461a      	mov	r2, r3
 80011ac:	0052      	lsls	r2, r2, #1
 80011ae:	441a      	add	r2, r3
 80011b0:	0093      	lsls	r3, r2, #2
 80011b2:	461a      	mov	r2, r3
 80011b4:	460b      	mov	r3, r1
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	440b      	add	r3, r1
 80011ba:	015b      	lsls	r3, r3, #5
 80011bc:	4413      	add	r3, r2
 80011be:	4403      	add	r3, r0
 80011c0:	3308      	adds	r3, #8
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
        for (int x = 0; x < GRID_SIZE; x++) {
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2b07      	cmp	r3, #7
 80011d2:	ddc4      	ble.n	800115e <clear_grid+0x12>
    for (int y = 0; y < GRID_SIZE; y++)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3301      	adds	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b07      	cmp	r3, #7
 80011de:	ddbb      	ble.n	8001158 <clear_grid+0xc>
        }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	200002ec 	.word	0x200002ec

080011f0 <particle_to_grid>:

void particle_to_grid() {
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e096      	b.n	800132a <particle_to_grid+0x13a>
        Particle* p = &particles[i];
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	4a98      	ldr	r2, [pc, #608]	@ (8001464 <particle_to_grid+0x274>)
 8001202:	4413      	add	r3, r2
 8001204:	60bb      	str	r3, [r7, #8]
        int x = (int)p->pos.x;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fea8 	bl	8000f60 <__aeabi_f2iz>
 8001210:	4603      	mov	r3, r0
 8001212:	607b      	str	r3, [r7, #4]
        int y = (int)p->pos.y;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fea1 	bl	8000f60 <__aeabi_f2iz>
 800121e:	4603      	mov	r3, r0
 8001220:	603b      	str	r3, [r7, #0]

        if (x >= 0 && x < GRID_SIZE && y >= 0 && y < GRID_SIZE) {
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db7d      	blt.n	8001324 <particle_to_grid+0x134>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b07      	cmp	r3, #7
 800122c:	dc7a      	bgt.n	8001324 <particle_to_grid+0x134>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db77      	blt.n	8001324 <particle_to_grid+0x134>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b07      	cmp	r3, #7
 8001238:	dc74      	bgt.n	8001324 <particle_to_grid+0x134>
            grid[y][x].velocity.x += p->vel.x;
 800123a:	488b      	ldr	r0, [pc, #556]	@ (8001468 <particle_to_grid+0x278>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	0052      	lsls	r2, r2, #1
 8001244:	441a      	add	r2, r3
 8001246:	0093      	lsls	r3, r2, #2
 8001248:	461a      	mov	r2, r3
 800124a:	460b      	mov	r3, r1
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	440b      	add	r3, r1
 8001250:	015b      	lsls	r3, r3, #5
 8001252:	4413      	add	r3, r2
 8001254:	4403      	add	r3, r0
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f7ff fb9a 	bl	8000998 <__addsf3>
 8001264:	4603      	mov	r3, r0
 8001266:	461c      	mov	r4, r3
 8001268:	487f      	ldr	r0, [pc, #508]	@ (8001468 <particle_to_grid+0x278>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	0052      	lsls	r2, r2, #1
 8001272:	441a      	add	r2, r3
 8001274:	0093      	lsls	r3, r2, #2
 8001276:	461a      	mov	r2, r3
 8001278:	460b      	mov	r3, r1
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	440b      	add	r3, r1
 800127e:	015b      	lsls	r3, r3, #5
 8001280:	4413      	add	r3, r2
 8001282:	4403      	add	r3, r0
 8001284:	601c      	str	r4, [r3, #0]
            grid[y][x].velocity.y += p->vel.y;
 8001286:	4878      	ldr	r0, [pc, #480]	@ (8001468 <particle_to_grid+0x278>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6839      	ldr	r1, [r7, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	0052      	lsls	r2, r2, #1
 8001290:	441a      	add	r2, r3
 8001292:	0093      	lsls	r3, r2, #2
 8001294:	461a      	mov	r2, r3
 8001296:	460b      	mov	r3, r1
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	440b      	add	r3, r1
 800129c:	015b      	lsls	r3, r3, #5
 800129e:	4413      	add	r3, r2
 80012a0:	4403      	add	r3, r0
 80012a2:	3304      	adds	r3, #4
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4610      	mov	r0, r2
 80012ae:	f7ff fb73 	bl	8000998 <__addsf3>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461c      	mov	r4, r3
 80012b6:	486c      	ldr	r0, [pc, #432]	@ (8001468 <particle_to_grid+0x278>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	0052      	lsls	r2, r2, #1
 80012c0:	441a      	add	r2, r3
 80012c2:	0093      	lsls	r3, r2, #2
 80012c4:	461a      	mov	r2, r3
 80012c6:	460b      	mov	r3, r1
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	440b      	add	r3, r1
 80012cc:	015b      	lsls	r3, r3, #5
 80012ce:	4413      	add	r3, r2
 80012d0:	4403      	add	r3, r0
 80012d2:	3304      	adds	r3, #4
 80012d4:	601c      	str	r4, [r3, #0]
            grid[y][x].mass += 1.0f;
 80012d6:	4864      	ldr	r0, [pc, #400]	@ (8001468 <particle_to_grid+0x278>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	0052      	lsls	r2, r2, #1
 80012e0:	441a      	add	r2, r3
 80012e2:	0093      	lsls	r3, r2, #2
 80012e4:	461a      	mov	r2, r3
 80012e6:	460b      	mov	r3, r1
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	440b      	add	r3, r1
 80012ec:	015b      	lsls	r3, r3, #5
 80012ee:	4413      	add	r3, r2
 80012f0:	4403      	add	r3, r0
 80012f2:	3308      	adds	r3, #8
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fb4c 	bl	8000998 <__addsf3>
 8001300:	4603      	mov	r3, r0
 8001302:	461c      	mov	r4, r3
 8001304:	4858      	ldr	r0, [pc, #352]	@ (8001468 <particle_to_grid+0x278>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6839      	ldr	r1, [r7, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	0052      	lsls	r2, r2, #1
 800130e:	441a      	add	r2, r3
 8001310:	0093      	lsls	r3, r2, #2
 8001312:	461a      	mov	r2, r3
 8001314:	460b      	mov	r3, r1
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	440b      	add	r3, r1
 800131a:	015b      	lsls	r3, r3, #5
 800131c:	4413      	add	r3, r2
 800131e:	4403      	add	r3, r0
 8001320:	3308      	adds	r3, #8
 8001322:	601c      	str	r4, [r3, #0]
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b1d      	cmp	r3, #29
 800132e:	f77f af65 	ble.w	80011fc <particle_to_grid+0xc>
        }
    }

    for (int y = 0; y < GRID_SIZE; y++)
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	e08c      	b.n	8001452 <particle_to_grid+0x262>
        for (int x = 0; x < GRID_SIZE; x++) {
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	e082      	b.n	8001444 <particle_to_grid+0x254>
            if (grid[y][x].mass > 0.0f) {
 800133e:	484a      	ldr	r0, [pc, #296]	@ (8001468 <particle_to_grid+0x278>)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6939      	ldr	r1, [r7, #16]
 8001344:	461a      	mov	r2, r3
 8001346:	0052      	lsls	r2, r2, #1
 8001348:	441a      	add	r2, r3
 800134a:	0093      	lsls	r3, r2, #2
 800134c:	461a      	mov	r2, r3
 800134e:	460b      	mov	r3, r1
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	440b      	add	r3, r1
 8001354:	015b      	lsls	r3, r3, #5
 8001356:	4413      	add	r3, r2
 8001358:	4403      	add	r3, r0
 800135a:	3308      	adds	r3, #8
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f04f 0100 	mov.w	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fddc 	bl	8000f20 <__aeabi_fcmpgt>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d067      	beq.n	800143e <particle_to_grid+0x24e>
                grid[y][x].velocity.x /= grid[y][x].mass;
 800136e:	483e      	ldr	r0, [pc, #248]	@ (8001468 <particle_to_grid+0x278>)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6939      	ldr	r1, [r7, #16]
 8001374:	461a      	mov	r2, r3
 8001376:	0052      	lsls	r2, r2, #1
 8001378:	441a      	add	r2, r3
 800137a:	0093      	lsls	r3, r2, #2
 800137c:	461a      	mov	r2, r3
 800137e:	460b      	mov	r3, r1
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	440b      	add	r3, r1
 8001384:	015b      	lsls	r3, r3, #5
 8001386:	4413      	add	r3, r2
 8001388:	4403      	add	r3, r0
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	4c36      	ldr	r4, [pc, #216]	@ (8001468 <particle_to_grid+0x278>)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6939      	ldr	r1, [r7, #16]
 8001392:	461a      	mov	r2, r3
 8001394:	0052      	lsls	r2, r2, #1
 8001396:	441a      	add	r2, r3
 8001398:	0093      	lsls	r3, r2, #2
 800139a:	461a      	mov	r2, r3
 800139c:	460b      	mov	r3, r1
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	440b      	add	r3, r1
 80013a2:	015b      	lsls	r3, r3, #5
 80013a4:	4413      	add	r3, r2
 80013a6:	4423      	add	r3, r4
 80013a8:	3308      	adds	r3, #8
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fcaf 	bl	8000d10 <__aeabi_fdiv>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461c      	mov	r4, r3
 80013b6:	482c      	ldr	r0, [pc, #176]	@ (8001468 <particle_to_grid+0x278>)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6939      	ldr	r1, [r7, #16]
 80013bc:	461a      	mov	r2, r3
 80013be:	0052      	lsls	r2, r2, #1
 80013c0:	441a      	add	r2, r3
 80013c2:	0093      	lsls	r3, r2, #2
 80013c4:	461a      	mov	r2, r3
 80013c6:	460b      	mov	r3, r1
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	440b      	add	r3, r1
 80013cc:	015b      	lsls	r3, r3, #5
 80013ce:	4413      	add	r3, r2
 80013d0:	4403      	add	r3, r0
 80013d2:	601c      	str	r4, [r3, #0]
                grid[y][x].velocity.y /= grid[y][x].mass;
 80013d4:	4824      	ldr	r0, [pc, #144]	@ (8001468 <particle_to_grid+0x278>)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6939      	ldr	r1, [r7, #16]
 80013da:	461a      	mov	r2, r3
 80013dc:	0052      	lsls	r2, r2, #1
 80013de:	441a      	add	r2, r3
 80013e0:	0093      	lsls	r3, r2, #2
 80013e2:	461a      	mov	r2, r3
 80013e4:	460b      	mov	r3, r1
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	440b      	add	r3, r1
 80013ea:	015b      	lsls	r3, r3, #5
 80013ec:	4413      	add	r3, r2
 80013ee:	4403      	add	r3, r0
 80013f0:	3304      	adds	r3, #4
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	4c1c      	ldr	r4, [pc, #112]	@ (8001468 <particle_to_grid+0x278>)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6939      	ldr	r1, [r7, #16]
 80013fa:	461a      	mov	r2, r3
 80013fc:	0052      	lsls	r2, r2, #1
 80013fe:	441a      	add	r2, r3
 8001400:	0093      	lsls	r3, r2, #2
 8001402:	461a      	mov	r2, r3
 8001404:	460b      	mov	r3, r1
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	440b      	add	r3, r1
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	4413      	add	r3, r2
 800140e:	4423      	add	r3, r4
 8001410:	3308      	adds	r3, #8
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fc7b 	bl	8000d10 <__aeabi_fdiv>
 800141a:	4603      	mov	r3, r0
 800141c:	461c      	mov	r4, r3
 800141e:	4812      	ldr	r0, [pc, #72]	@ (8001468 <particle_to_grid+0x278>)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6939      	ldr	r1, [r7, #16]
 8001424:	461a      	mov	r2, r3
 8001426:	0052      	lsls	r2, r2, #1
 8001428:	441a      	add	r2, r3
 800142a:	0093      	lsls	r3, r2, #2
 800142c:	461a      	mov	r2, r3
 800142e:	460b      	mov	r3, r1
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	440b      	add	r3, r1
 8001434:	015b      	lsls	r3, r3, #5
 8001436:	4413      	add	r3, r2
 8001438:	4403      	add	r3, r0
 800143a:	3304      	adds	r3, #4
 800143c:	601c      	str	r4, [r3, #0]
        for (int x = 0; x < GRID_SIZE; x++) {
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3301      	adds	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b07      	cmp	r3, #7
 8001448:	f77f af79 	ble.w	800133e <particle_to_grid+0x14e>
    for (int y = 0; y < GRID_SIZE; y++)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	3301      	adds	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b07      	cmp	r3, #7
 8001456:	f77f af6f 	ble.w	8001338 <particle_to_grid+0x148>
            }
        }
}
 800145a:	bf00      	nop
 800145c:	bf00      	nop
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	2000010c 	.word	0x2000010c
 8001468:	200002ec 	.word	0x200002ec

0800146c <apply_gravity>:


void apply_gravity() {
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
    for (int y = 0; y < GRID_SIZE; y++) {
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	e07b      	b.n	8001570 <apply_gravity+0x104>
        for (int x = 0; x < GRID_SIZE; x++) {
 8001478:	2300      	movs	r3, #0
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	e072      	b.n	8001564 <apply_gravity+0xf8>
            if (grid[y][x].mass > 0.0f) {
 800147e:	4840      	ldr	r0, [pc, #256]	@ (8001580 <apply_gravity+0x114>)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	461a      	mov	r2, r3
 8001486:	0052      	lsls	r2, r2, #1
 8001488:	441a      	add	r2, r3
 800148a:	0093      	lsls	r3, r2, #2
 800148c:	461a      	mov	r2, r3
 800148e:	460b      	mov	r3, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	440b      	add	r3, r1
 8001494:	015b      	lsls	r3, r3, #5
 8001496:	4413      	add	r3, r2
 8001498:	4403      	add	r3, r0
 800149a:	3308      	adds	r3, #8
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f04f 0100 	mov.w	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd3c 	bl	8000f20 <__aeabi_fcmpgt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d057      	beq.n	800155e <apply_gravity+0xf2>
                grid[y][x].velocity.x += gravity.x * DT;
 80014ae:	4834      	ldr	r0, [pc, #208]	@ (8001580 <apply_gravity+0x114>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	461a      	mov	r2, r3
 80014b6:	0052      	lsls	r2, r2, #1
 80014b8:	441a      	add	r2, r3
 80014ba:	0093      	lsls	r3, r2, #2
 80014bc:	461a      	mov	r2, r3
 80014be:	460b      	mov	r3, r1
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	440b      	add	r3, r1
 80014c4:	015b      	lsls	r3, r3, #5
 80014c6:	4413      	add	r3, r2
 80014c8:	4403      	add	r3, r0
 80014ca:	681c      	ldr	r4, [r3, #0]
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <apply_gravity+0x118>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	492d      	ldr	r1, [pc, #180]	@ (8001588 <apply_gravity+0x11c>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fb68 	bl	8000ba8 <__aeabi_fmul>
 80014d8:	4603      	mov	r3, r0
 80014da:	4619      	mov	r1, r3
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff fa5b 	bl	8000998 <__addsf3>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461c      	mov	r4, r3
 80014e6:	4826      	ldr	r0, [pc, #152]	@ (8001580 <apply_gravity+0x114>)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	461a      	mov	r2, r3
 80014ee:	0052      	lsls	r2, r2, #1
 80014f0:	441a      	add	r2, r3
 80014f2:	0093      	lsls	r3, r2, #2
 80014f4:	461a      	mov	r2, r3
 80014f6:	460b      	mov	r3, r1
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	440b      	add	r3, r1
 80014fc:	015b      	lsls	r3, r3, #5
 80014fe:	4413      	add	r3, r2
 8001500:	4403      	add	r3, r0
 8001502:	601c      	str	r4, [r3, #0]
                grid[y][x].velocity.y += gravity.y * DT;
 8001504:	481e      	ldr	r0, [pc, #120]	@ (8001580 <apply_gravity+0x114>)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	461a      	mov	r2, r3
 800150c:	0052      	lsls	r2, r2, #1
 800150e:	441a      	add	r2, r3
 8001510:	0093      	lsls	r3, r2, #2
 8001512:	461a      	mov	r2, r3
 8001514:	460b      	mov	r3, r1
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	440b      	add	r3, r1
 800151a:	015b      	lsls	r3, r3, #5
 800151c:	4413      	add	r3, r2
 800151e:	4403      	add	r3, r0
 8001520:	3304      	adds	r3, #4
 8001522:	681c      	ldr	r4, [r3, #0]
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <apply_gravity+0x118>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4917      	ldr	r1, [pc, #92]	@ (8001588 <apply_gravity+0x11c>)
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fb3c 	bl	8000ba8 <__aeabi_fmul>
 8001530:	4603      	mov	r3, r0
 8001532:	4619      	mov	r1, r3
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff fa2f 	bl	8000998 <__addsf3>
 800153a:	4603      	mov	r3, r0
 800153c:	461c      	mov	r4, r3
 800153e:	4810      	ldr	r0, [pc, #64]	@ (8001580 <apply_gravity+0x114>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	461a      	mov	r2, r3
 8001546:	0052      	lsls	r2, r2, #1
 8001548:	441a      	add	r2, r3
 800154a:	0093      	lsls	r3, r2, #2
 800154c:	461a      	mov	r2, r3
 800154e:	460b      	mov	r3, r1
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	440b      	add	r3, r1
 8001554:	015b      	lsls	r3, r3, #5
 8001556:	4413      	add	r3, r2
 8001558:	4403      	add	r3, r0
 800155a:	3304      	adds	r3, #4
 800155c:	601c      	str	r4, [r3, #0]
        for (int x = 0; x < GRID_SIZE; x++) {
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b07      	cmp	r3, #7
 8001568:	dd89      	ble.n	800147e <apply_gravity+0x12>
    for (int y = 0; y < GRID_SIZE; y++) {
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3301      	adds	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b07      	cmp	r3, #7
 8001574:	dd80      	ble.n	8001478 <apply_gravity+0xc>
            }
        }
    }
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	200002ec 	.word	0x200002ec
 8001584:	20000000 	.word	0x20000000
 8001588:	3dcccccd 	.word	0x3dcccccd

0800158c <set_gravity_direction>:

void set_gravity_direction(Vec2 dir) {
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	463b      	mov	r3, r7
 8001594:	e883 0003 	stmia.w	r3, {r0, r1}
    float len = sqrtf(dir.x * dir.x + dir.y * dir.y);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fb02 	bl	8000ba8 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461c      	mov	r4, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fafa 	bl	8000ba8 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4620      	mov	r0, r4
 80015ba:	f7ff f9ed 	bl	8000998 <__addsf3>
 80015be:	4603      	mov	r3, r0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 f841 	bl	8005648 <sqrtf>
 80015c6:	60f8      	str	r0, [r7, #12]
    if (len > 1e-6f) {
 80015c8:	4913      	ldr	r1, [pc, #76]	@ (8001618 <set_gravity_direction+0x8c>)
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f7ff fca8 	bl	8000f20 <__aeabi_fcmpgt>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d014      	beq.n	8001600 <set_gravity_direction+0x74>
        gravity.x = dir.x / len * GRAVITY_MAGNITUDE;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fb98 	bl	8000d10 <__aeabi_fdiv>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015e6:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <set_gravity_direction+0x90>)
 80015e8:	6013      	str	r3, [r2, #0]
        gravity.y = dir.y / len * GRAVITY_MAGNITUDE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fb8e 	bl	8000d10 <__aeabi_fdiv>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015fa:	4a08      	ldr	r2, [pc, #32]	@ (800161c <set_gravity_direction+0x90>)
 80015fc:	6053      	str	r3, [r2, #4]
    }
    else {
        gravity.x = 0.0f;
        gravity.y = 0.0f;
    }
}
 80015fe:	e007      	b.n	8001610 <set_gravity_direction+0x84>
        gravity.x = 0.0f;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <set_gravity_direction+0x90>)
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
        gravity.y = 0.0f;
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <set_gravity_direction+0x90>)
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	358637bd 	.word	0x358637bd
 800161c:	20000000 	.word	0x20000000

08001620 <grid_to_particle>:

void grid_to_particle() {
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e03b      	b.n	80016a4 <grid_to_particle+0x84>
        Particle* p = &particles[i];
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4a20      	ldr	r2, [pc, #128]	@ (80016b4 <grid_to_particle+0x94>)
 8001632:	4413      	add	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        int x = (int)p->pos.x;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fc90 	bl	8000f60 <__aeabi_f2iz>
 8001640:	4603      	mov	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]
        int y = (int)p->pos.y;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fc89 	bl	8000f60 <__aeabi_f2iz>
 800164e:	4603      	mov	r3, r0
 8001650:	60bb      	str	r3, [r7, #8]

        if (x >= 0 && x < GRID_SIZE && y >= 0 && y < GRID_SIZE) {
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db22      	blt.n	800169e <grid_to_particle+0x7e>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b07      	cmp	r3, #7
 800165c:	dc1f      	bgt.n	800169e <grid_to_particle+0x7e>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db1c      	blt.n	800169e <grid_to_particle+0x7e>
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b07      	cmp	r3, #7
 8001668:	dc19      	bgt.n	800169e <grid_to_particle+0x7e>
            Vec2 gridVel = grid[y][x].velocity;
 800166a:	4813      	ldr	r0, [pc, #76]	@ (80016b8 <grid_to_particle+0x98>)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	461a      	mov	r2, r3
 8001672:	0052      	lsls	r2, r2, #1
 8001674:	441a      	add	r2, r3
 8001676:	0093      	lsls	r3, r2, #2
 8001678:	461a      	mov	r2, r3
 800167a:	460b      	mov	r3, r1
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	440b      	add	r3, r1
 8001680:	015b      	lsls	r3, r3, #5
 8001682:	4413      	add	r3, r2
 8001684:	18c2      	adds	r2, r0, r3
 8001686:	463b      	mov	r3, r7
 8001688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800168c:	e883 0003 	stmia.w	r3, {r0, r1}
            p->vel = gridVel;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	3308      	adds	r3, #8
 8001694:	463a      	mov	r2, r7
 8001696:	e892 0003 	ldmia.w	r2, {r0, r1}
 800169a:	e883 0003 	stmia.w	r3, {r0, r1}
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b1d      	cmp	r3, #29
 80016a8:	ddc0      	ble.n	800162c <grid_to_particle+0xc>
        }
    }
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000010c 	.word	0x2000010c
 80016b8:	200002ec 	.word	0x200002ec

080016bc <advect_particles_circular>:
            apply_repulsion(particles + i, particles + j);
        }
    }
}

void advect_particles_circular() {
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b08b      	sub	sp, #44	@ 0x2c
 80016c0:	af00      	add	r7, sp, #0
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c6:	e0c1      	b.n	800184c <advect_particles_circular+0x190>
        Particle* p = &particles[i];
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4a64      	ldr	r2, [pc, #400]	@ (8001860 <advect_particles_circular+0x1a4>)
 80016ce:	4413      	add	r3, r2
 80016d0:	623b      	str	r3, [r7, #32]

        p->pos.x += p->vel.x * DT;
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	681c      	ldr	r4, [r3, #0]
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	4962      	ldr	r1, [pc, #392]	@ (8001864 <advect_particles_circular+0x1a8>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fa63 	bl	8000ba8 <__aeabi_fmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff f956 	bl	8000998 <__addsf3>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	601a      	str	r2, [r3, #0]
        p->pos.y += p->vel.y * DT;
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	685c      	ldr	r4, [r3, #4]
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4959      	ldr	r1, [pc, #356]	@ (8001864 <advect_particles_circular+0x1a8>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fa52 	bl	8000ba8 <__aeabi_fmul>
 8001704:	4603      	mov	r3, r0
 8001706:	4619      	mov	r1, r3
 8001708:	4620      	mov	r0, r4
 800170a:	f7ff f945 	bl	8000998 <__addsf3>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	605a      	str	r2, [r3, #4]

#define CENTER (GRID_SIZE / 2.0f)
#define SQUARED_RADIUS (CENTER * CENTER)

        float dx = p->pos.x - CENTER;
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f938 	bl	8000994 <__aeabi_fsub>
 8001724:	4603      	mov	r3, r0
 8001726:	61fb      	str	r3, [r7, #28]
        float dy = p->pos.y - CENTER;
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff f92f 	bl	8000994 <__aeabi_fsub>
 8001736:	4603      	mov	r3, r0
 8001738:	61bb      	str	r3, [r7, #24]
        float dist2 = dx * dx + dy * dy;
 800173a:	69f9      	ldr	r1, [r7, #28]
 800173c:	69f8      	ldr	r0, [r7, #28]
 800173e:	f7ff fa33 	bl	8000ba8 <__aeabi_fmul>
 8001742:	4603      	mov	r3, r0
 8001744:	461c      	mov	r4, r3
 8001746:	69b9      	ldr	r1, [r7, #24]
 8001748:	69b8      	ldr	r0, [r7, #24]
 800174a:	f7ff fa2d 	bl	8000ba8 <__aeabi_fmul>
 800174e:	4603      	mov	r3, r0
 8001750:	4619      	mov	r1, r3
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff f920 	bl	8000998 <__addsf3>
 8001758:	4603      	mov	r3, r0
 800175a:	617b      	str	r3, [r7, #20]

        if (dist2 > SQUARED_RADIUS) {
 800175c:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001760:	6978      	ldr	r0, [r7, #20]
 8001762:	f7ff fbdd 	bl	8000f20 <__aeabi_fcmpgt>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d06c      	beq.n	8001846 <advect_particles_circular+0x18a>
            float dist = sqrtf(dist2);
 800176c:	6978      	ldr	r0, [r7, #20]
 800176e:	f003 ff6b 	bl	8005648 <sqrtf>
 8001772:	6138      	str	r0, [r7, #16]
            float nx = dx / dist;  // normal x
 8001774:	6939      	ldr	r1, [r7, #16]
 8001776:	69f8      	ldr	r0, [r7, #28]
 8001778:	f7ff faca 	bl	8000d10 <__aeabi_fdiv>
 800177c:	4603      	mov	r3, r0
 800177e:	60fb      	str	r3, [r7, #12]
            float ny = dy / dist;  // normal y
 8001780:	6939      	ldr	r1, [r7, #16]
 8001782:	69b8      	ldr	r0, [r7, #24]
 8001784:	f7ff fac4 	bl	8000d10 <__aeabi_fdiv>
 8001788:	4603      	mov	r3, r0
 800178a:	60bb      	str	r3, [r7, #8]


            p->pos.x = CENTER + nx * CENTER;
 800178c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f7ff fa09 	bl	8000ba8 <__aeabi_fmul>
 8001796:	4603      	mov	r3, r0
 8001798:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff f8fb 	bl	8000998 <__addsf3>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	601a      	str	r2, [r3, #0]
            p->pos.y = CENTER + ny * CENTER;
 80017aa:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80017ae:	68b8      	ldr	r0, [r7, #8]
 80017b0:	f7ff f9fa 	bl	8000ba8 <__aeabi_fmul>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f8ec 	bl	8000998 <__addsf3>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	605a      	str	r2, [r3, #4]


            float dot = p->vel.x * nx + p->vel.y * ny;
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	68f9      	ldr	r1, [r7, #12]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f9ea 	bl	8000ba8 <__aeabi_fmul>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461c      	mov	r4, r3
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f9e2 	bl	8000ba8 <__aeabi_fmul>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4619      	mov	r1, r3
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff f8d5 	bl	8000998 <__addsf3>
 80017ee:	4603      	mov	r3, r0
 80017f0:	607b      	str	r3, [r7, #4]
            p->vel.x -= 2.0f * dot * nx;
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	689c      	ldr	r4, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f8cc 	bl	8000998 <__addsf3>
 8001800:	4603      	mov	r3, r0
 8001802:	68f9      	ldr	r1, [r7, #12]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff f9cf 	bl	8000ba8 <__aeabi_fmul>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff f8c0 	bl	8000994 <__aeabi_fsub>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	609a      	str	r2, [r3, #8]
            p->vel.y -= 2.0f * dot * ny;
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	68dc      	ldr	r4, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4619      	mov	r1, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff f8b7 	bl	8000998 <__addsf3>
 800182a:	4603      	mov	r3, r0
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f9ba 	bl	8000ba8 <__aeabi_fmul>
 8001834:	4603      	mov	r3, r0
 8001836:	4619      	mov	r1, r3
 8001838:	4620      	mov	r0, r4
 800183a:	f7ff f8ab 	bl	8000994 <__aeabi_fsub>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	3301      	adds	r3, #1
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	2b1d      	cmp	r3, #29
 8001850:	f77f af3a 	ble.w	80016c8 <advect_particles_circular+0xc>

        }
    }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	372c      	adds	r7, #44	@ 0x2c
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}
 800185e:	bf00      	nop
 8001860:	2000010c 	.word	0x2000010c
 8001864:	3dcccccd 	.word	0x3dcccccd

08001868 <apply_repulsion>:

void apply_repulsion(Particle* p1, Particle* p2) {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b08b      	sub	sp, #44	@ 0x2c
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    Vec2 dp = {
        p1->pos.x - p2->pos.x,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4619      	mov	r1, r3
 800187c:	4610      	mov	r0, r2
 800187e:	f7ff f889 	bl	8000994 <__aeabi_fsub>
 8001882:	4603      	mov	r3, r0
    Vec2 dp = {
 8001884:	617b      	str	r3, [r7, #20]
        p1->pos.y - p2->pos.y
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f7ff f87f 	bl	8000994 <__aeabi_fsub>
 8001896:	4603      	mov	r3, r0
    Vec2 dp = {
 8001898:	61bb      	str	r3, [r7, #24]
    };
    float dist2 = dp.x * dp.x + dp.y * dp.y;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff f981 	bl	8000ba8 <__aeabi_fmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461c      	mov	r4, r3
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f979 	bl	8000ba8 <__aeabi_fmul>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4619      	mov	r1, r3
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff f86c 	bl	8000998 <__addsf3>
 80018c0:	4603      	mov	r3, r0
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (dist2 < eps) {
 80018c4:	4ba8      	ldr	r3, [pc, #672]	@ (8001b68 <apply_repulsion+0x300>)
 80018c6:	4619      	mov	r1, r3
 80018c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018ca:	f7ff fb0b 	bl	8000ee4 <__aeabi_fcmplt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80b8 	beq.w	8001a46 <apply_repulsion+0x1de>
        p1->vel.x = GRAVITY_MAGNITUDE * ((float)(rand() % 20000) / 10000.0 - 1.0);
 80018d6:	f002 fed1 	bl	800467c <rand>
 80018da:	4602      	mov	r2, r0
 80018dc:	4ba3      	ldr	r3, [pc, #652]	@ (8001b6c <apply_repulsion+0x304>)
 80018de:	fb83 1302 	smull	r1, r3, r3, r2
 80018e2:	1359      	asrs	r1, r3, #13
 80018e4:	17d3      	asrs	r3, r2, #31
 80018e6:	1acb      	subs	r3, r1, r3
 80018e8:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f904 	bl	8000b00 <__aeabi_i2f>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fd8c 	bl	8000418 <__aeabi_f2d>
 8001900:	a397      	add	r3, pc, #604	@ (adr r3, 8001b60 <apply_repulsion+0x2f8>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe ff09 	bl	800071c <__aeabi_ddiv>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b96      	ldr	r3, [pc, #600]	@ (8001b70 <apply_repulsion+0x308>)
 8001918:	f7fe fc1e 	bl	8000158 <__aeabi_dsub>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7fe ffe2 	bl	80008ec <__aeabi_d2f>
 8001928:	4603      	mov	r3, r0
 800192a:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	609a      	str	r2, [r3, #8]
        p1->vel.y = GRAVITY_MAGNITUDE * ((float)(rand() % 20000) / 10000.0 - 1.0);
 8001932:	f002 fea3 	bl	800467c <rand>
 8001936:	4602      	mov	r2, r0
 8001938:	4b8c      	ldr	r3, [pc, #560]	@ (8001b6c <apply_repulsion+0x304>)
 800193a:	fb83 1302 	smull	r1, r3, r3, r2
 800193e:	1359      	asrs	r1, r3, #13
 8001940:	17d3      	asrs	r3, r2, #31
 8001942:	1acb      	subs	r3, r1, r3
 8001944:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f8d6 	bl	8000b00 <__aeabi_i2f>
 8001954:	4603      	mov	r3, r0
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fd5e 	bl	8000418 <__aeabi_f2d>
 800195c:	a380      	add	r3, pc, #512	@ (adr r3, 8001b60 <apply_repulsion+0x2f8>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe fedb 	bl	800071c <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	4b7f      	ldr	r3, [pc, #508]	@ (8001b70 <apply_repulsion+0x308>)
 8001974:	f7fe fbf0 	bl	8000158 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7fe ffb4 	bl	80008ec <__aeabi_d2f>
 8001984:	4603      	mov	r3, r0
 8001986:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60da      	str	r2, [r3, #12]
        p2->vel.x = GRAVITY_MAGNITUDE * ((float)(rand() % 20000) / 10000.0 - 1.0);
 800198e:	f002 fe75 	bl	800467c <rand>
 8001992:	4602      	mov	r2, r0
 8001994:	4b75      	ldr	r3, [pc, #468]	@ (8001b6c <apply_repulsion+0x304>)
 8001996:	fb83 1302 	smull	r1, r3, r3, r2
 800199a:	1359      	asrs	r1, r3, #13
 800199c:	17d3      	asrs	r3, r2, #31
 800199e:	1acb      	subs	r3, r1, r3
 80019a0:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f8a8 	bl	8000b00 <__aeabi_i2f>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fd30 	bl	8000418 <__aeabi_f2d>
 80019b8:	a369      	add	r3, pc, #420	@ (adr r3, 8001b60 <apply_repulsion+0x2f8>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fead 	bl	800071c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b68      	ldr	r3, [pc, #416]	@ (8001b70 <apply_repulsion+0x308>)
 80019d0:	f7fe fbc2 	bl	8000158 <__aeabi_dsub>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7fe ff86 	bl	80008ec <__aeabi_d2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	609a      	str	r2, [r3, #8]
        p2->vel.y = GRAVITY_MAGNITUDE * ((float)(rand() % 20000) / 10000.0 - 1.0);
 80019ea:	f002 fe47 	bl	800467c <rand>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b6c <apply_repulsion+0x304>)
 80019f2:	fb83 1302 	smull	r1, r3, r3, r2
 80019f6:	1359      	asrs	r1, r3, #13
 80019f8:	17d3      	asrs	r3, r2, #31
 80019fa:	1acb      	subs	r3, r1, r3
 80019fc:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f87a 	bl	8000b00 <__aeabi_i2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd02 	bl	8000418 <__aeabi_f2d>
 8001a14:	a352      	add	r3, pc, #328	@ (adr r3, 8001b60 <apply_repulsion+0x2f8>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fe7f 	bl	800071c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b51      	ldr	r3, [pc, #324]	@ (8001b70 <apply_repulsion+0x308>)
 8001a2c:	f7fe fb94 	bl	8000158 <__aeabi_dsub>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7fe ff58 	bl	80008ec <__aeabi_d2f>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	60da      	str	r2, [r3, #12]
		//p1->vel.x *= -1;
		//p1->vel.y *= -1;
    }
    if (dist2 < minDist * minDist) {
 8001a46:	4b4b      	ldr	r3, [pc, #300]	@ (8001b74 <apply_repulsion+0x30c>)
 8001a48:	4a4a      	ldr	r2, [pc, #296]	@ (8001b74 <apply_repulsion+0x30c>)
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f8ab 	bl	8000ba8 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4619      	mov	r1, r3
 8001a56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a58:	f7ff fa44 	bl	8000ee4 <__aeabi_fcmplt>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d100      	bne.n	8001a64 <apply_repulsion+0x1fc>
        p1->vel.x += dir.x * force * DT;
        p1->vel.y += dir.y * force * DT;
        p2->vel.x -= dir.x * force * DT;
        p2->vel.y -= dir.y * force * DT;
    }
}
 8001a62:	e079      	b.n	8001b58 <apply_repulsion+0x2f0>
        float dist = sqrtf(dist2);
 8001a64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a66:	f003 fdef 	bl	8005648 <sqrtf>
 8001a6a:	6238      	str	r0, [r7, #32]
        float force = k * (minDist - dist) / dist;
 8001a6c:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <apply_repulsion+0x30c>)
 8001a6e:	6a39      	ldr	r1, [r7, #32]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe ff8f 	bl	8000994 <__aeabi_fsub>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f7ff f891 	bl	8000ba8 <__aeabi_fmul>
 8001a86:	4603      	mov	r3, r0
 8001a88:	6a39      	ldr	r1, [r7, #32]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f940 	bl	8000d10 <__aeabi_fdiv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	61fb      	str	r3, [r7, #28]
        Vec2 dir = { dp.x / dist, dp.y / dist };
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	6a39      	ldr	r1, [r7, #32]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f939 	bl	8000d10 <__aeabi_fdiv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	6a39      	ldr	r1, [r7, #32]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f932 	bl	8000d10 <__aeabi_fdiv>
 8001aac:	4603      	mov	r3, r0
 8001aae:	613b      	str	r3, [r7, #16]
        p1->vel.x += dir.x * force * DT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689c      	ldr	r4, [r3, #8]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	69f9      	ldr	r1, [r7, #28]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f875 	bl	8000ba8 <__aeabi_fmul>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	492d      	ldr	r1, [pc, #180]	@ (8001b78 <apply_repulsion+0x310>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f870 	bl	8000ba8 <__aeabi_fmul>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7fe ff63 	bl	8000998 <__addsf3>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
        p1->vel.y += dir.y * force * DT;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68dc      	ldr	r4, [r3, #12]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	69f9      	ldr	r1, [r7, #28]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f860 	bl	8000ba8 <__aeabi_fmul>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4923      	ldr	r1, [pc, #140]	@ (8001b78 <apply_repulsion+0x310>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f85b 	bl	8000ba8 <__aeabi_fmul>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4619      	mov	r1, r3
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7fe ff4e 	bl	8000998 <__addsf3>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
        p2->vel.x -= dir.x * force * DT;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689c      	ldr	r4, [r3, #8]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	69f9      	ldr	r1, [r7, #28]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f84b 	bl	8000ba8 <__aeabi_fmul>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4918      	ldr	r1, [pc, #96]	@ (8001b78 <apply_repulsion+0x310>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f846 	bl	8000ba8 <__aeabi_fmul>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4620      	mov	r0, r4
 8001b22:	f7fe ff37 	bl	8000994 <__aeabi_fsub>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	609a      	str	r2, [r3, #8]
        p2->vel.y -= dir.y * force * DT;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68dc      	ldr	r4, [r3, #12]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	69f9      	ldr	r1, [r7, #28]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f836 	bl	8000ba8 <__aeabi_fmul>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	490e      	ldr	r1, [pc, #56]	@ (8001b78 <apply_repulsion+0x310>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f831 	bl	8000ba8 <__aeabi_fmul>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7fe ff22 	bl	8000994 <__aeabi_fsub>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	60da      	str	r2, [r3, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	372c      	adds	r7, #44	@ 0x2c
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	00000000 	.word	0x00000000
 8001b64:	40c38800 	.word	0x40c38800
 8001b68:	3d4ccccd 	.word	0x3d4ccccd
 8001b6c:	68db8bad 	.word	0x68db8bad
 8001b70:	3ff00000 	.word	0x3ff00000
 8001b74:	3f8020c5 	.word	0x3f8020c5
 8001b78:	3dcccccd 	.word	0x3dcccccd

08001b7c <apply_repulsion_optimized_without_hash>:

void apply_repulsion_optimized_without_hash() {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	@ 0x50
 8001b80:	af00      	add	r7, sp, #0
    for (int i = 0; i < REPULSION_GRID_DIM; i++) {
 8001b82:	2300      	movs	r3, #0
 8001b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b86:	e013      	b.n	8001bb0 <apply_repulsion_optimized_without_hash+0x34>
		for (int j = 0; j < REPULSION_GRID_DIM; j++) {
 8001b88:	2300      	movs	r3, #0
 8001b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b8c:	e00a      	b.n	8001ba4 <apply_repulsion_optimized_without_hash+0x28>
			indexTable[i][j] = 0;
 8001b8e:	4982      	ldr	r1, [pc, #520]	@ (8001d98 <apply_repulsion_optimized_without_hash+0x21c>)
 8001b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b92:	00da      	lsls	r2, r3, #3
 8001b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b96:	4413      	add	r3, r2
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < REPULSION_GRID_DIM; j++) {
 8001b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ba6:	2b07      	cmp	r3, #7
 8001ba8:	ddf1      	ble.n	8001b8e <apply_repulsion_optimized_without_hash+0x12>
    for (int i = 0; i < REPULSION_GRID_DIM; i++) {
 8001baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bac:	3301      	adds	r3, #1
 8001bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bb2:	2b07      	cmp	r3, #7
 8001bb4:	dde8      	ble.n	8001b88 <apply_repulsion_optimized_without_hash+0xc>
		}
    }
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bba:	e052      	b.n	8001c62 <apply_repulsion_optimized_without_hash+0xe6>
        Particle* p = particles + i;
 8001bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4a76      	ldr	r2, [pc, #472]	@ (8001d9c <apply_repulsion_optimized_without_hash+0x220>)
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60bb      	str	r3, [r7, #8]
        if (isnan(p->pos.x) || isnan(p->pos.y)) {
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f9b1 	bl	8000f34 <__aeabi_fcmpun>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d108      	bne.n	8001bea <apply_repulsion_optimized_without_hash+0x6e>
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f9a8 	bl	8000f34 <__aeabi_fcmpun>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00f      	beq.n	8001c0a <apply_repulsion_optimized_without_hash+0x8e>
            p->pos.x = 0;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
            p->pos.y = 0;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
            p->vel.x = 0;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
            p->vel.y = 0;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
        }
        int x = (int)(p->pos.x / minDist);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a64      	ldr	r2, [pc, #400]	@ (8001da0 <apply_repulsion_optimized_without_hash+0x224>)
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f87c 	bl	8000d10 <__aeabi_fdiv>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f9a0 	bl	8000f60 <__aeabi_f2iz>
 8001c20:	4603      	mov	r3, r0
 8001c22:	607b      	str	r3, [r7, #4]
        int y = (int)(p->pos.y / minDist);
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a5d      	ldr	r2, [pc, #372]	@ (8001da0 <apply_repulsion_optimized_without_hash+0x224>)
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f86f 	bl	8000d10 <__aeabi_fdiv>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f993 	bl	8000f60 <__aeabi_f2iz>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	603b      	str	r3, [r7, #0]
		indexTable[x][y]++;
 8001c3e:	4956      	ldr	r1, [pc, #344]	@ (8001d98 <apply_repulsion_optimized_without_hash+0x21c>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	00da      	lsls	r2, r3, #3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	4852      	ldr	r0, [pc, #328]	@ (8001d98 <apply_repulsion_optimized_without_hash+0x21c>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	00d9      	lsls	r1, r3, #3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	440b      	add	r3, r1
 8001c58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 8001c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c5e:	3301      	adds	r3, #1
 8001c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c64:	2b1d      	cmp	r3, #29
 8001c66:	dda9      	ble.n	8001bbc <apply_repulsion_optimized_without_hash+0x40>
    }

    int last_val = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	643b      	str	r3, [r7, #64]	@ 0x40
	for (int i = 0; i < REPULSION_GRID_DIM; i++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c70:	e023      	b.n	8001cba <apply_repulsion_optimized_without_hash+0x13e>
		for (int j = 0; j < REPULSION_GRID_DIM; j++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c76:	e01a      	b.n	8001cae <apply_repulsion_optimized_without_hash+0x132>
			indexTable[i][j] += last_val;
 8001c78:	4947      	ldr	r1, [pc, #284]	@ (8001d98 <apply_repulsion_optimized_without_hash+0x21c>)
 8001c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c7c:	00da      	lsls	r2, r3, #3
 8001c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c80:	4413      	add	r3, r2
 8001c82:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c88:	441a      	add	r2, r3
 8001c8a:	4843      	ldr	r0, [pc, #268]	@ (8001d98 <apply_repulsion_optimized_without_hash+0x21c>)
 8001c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c8e:	00d9      	lsls	r1, r3, #3
 8001c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c92:	440b      	add	r3, r1
 8001c94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			last_val = indexTable[i][j];
 8001c98:	493f      	ldr	r1, [pc, #252]	@ (8001d98 <apply_repulsion_optimized_without_hash+0x21c>)
 8001c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c9c:	00da      	lsls	r2, r3, #3
 8001c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ca6:	643b      	str	r3, [r7, #64]	@ 0x40
		for (int j = 0; j < REPULSION_GRID_DIM; j++) {
 8001ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001caa:	3301      	adds	r3, #1
 8001cac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb0:	2b07      	cmp	r3, #7
 8001cb2:	dde1      	ble.n	8001c78 <apply_repulsion_optimized_without_hash+0xfc>
	for (int i = 0; i < REPULSION_GRID_DIM; i++) {
 8001cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cbc:	2b07      	cmp	r3, #7
 8001cbe:	ddd8      	ble.n	8001c72 <apply_repulsion_optimized_without_hash+0xf6>
		}
	}

    for (int i = 0; i < PARTICLE_COUNT; i++) {
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cc4:	e03d      	b.n	8001d42 <apply_repulsion_optimized_without_hash+0x1c6>
        Particle* p = particles + i;
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	4a34      	ldr	r2, [pc, #208]	@ (8001d9c <apply_repulsion_optimized_without_hash+0x220>)
 8001ccc:	4413      	add	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        int x = (int)(p->pos.x / minDist);
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a32      	ldr	r2, [pc, #200]	@ (8001da0 <apply_repulsion_optimized_without_hash+0x224>)
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f819 	bl	8000d10 <__aeabi_fdiv>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f93d 	bl	8000f60 <__aeabi_f2iz>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	617b      	str	r3, [r7, #20]
        int y = (int)(p->pos.y / minDist);
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a2c      	ldr	r2, [pc, #176]	@ (8001da0 <apply_repulsion_optimized_without_hash+0x224>)
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f80c 	bl	8000d10 <__aeabi_fdiv>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f930 	bl	8000f60 <__aeabi_f2iz>
 8001d00:	4603      	mov	r3, r0
 8001d02:	613b      	str	r3, [r7, #16]
        int final_index = --indexTable[x][y];
 8001d04:	4924      	ldr	r1, [pc, #144]	@ (8001d98 <apply_repulsion_optimized_without_hash+0x21c>)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	00da      	lsls	r2, r3, #3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d12:	1e5a      	subs	r2, r3, #1
 8001d14:	4820      	ldr	r0, [pc, #128]	@ (8001d98 <apply_repulsion_optimized_without_hash+0x21c>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	00d9      	lsls	r1, r3, #3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001d22:	491d      	ldr	r1, [pc, #116]	@ (8001d98 <apply_repulsion_optimized_without_hash+0x21c>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	00da      	lsls	r2, r3, #3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d30:	60fb      	str	r3, [r7, #12]
        particle_lookup[final_index] = p;
 8001d32:	491c      	ldr	r1, [pc, #112]	@ (8001da4 <apply_repulsion_optimized_without_hash+0x228>)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d3e:	3301      	adds	r3, #1
 8001d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d44:	2b1d      	cmp	r3, #29
 8001d46:	ddbe      	ble.n	8001cc6 <apply_repulsion_optimized_without_hash+0x14a>
    }
    for (int i1 = 0; i1 < REPULSION_GRID_DIM; i1++) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d4c:	e0c3      	b.n	8001ed6 <apply_repulsion_optimized_without_hash+0x35a>
        for (int j1 = 0; j1 < REPULSION_GRID_DIM; j1++) {
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d52:	e0b9      	b.n	8001ec8 <apply_repulsion_optimized_without_hash+0x34c>
            for (int i2 = i1 - 1; i2 <= i1 + 1 && i2 < REPULSION_GRID_DIM; i2++) {
 8001d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d56:	3b01      	subs	r3, #1
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d5a:	e0a9      	b.n	8001eb0 <apply_repulsion_optimized_without_hash+0x334>
                if (i2 < 0) continue;
 8001d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f2c0 80a2 	blt.w	8001ea8 <apply_repulsion_optimized_without_hash+0x32c>
                for (int j2 = j1 - 1; j2 <= j1 + 1 && j2 < REPULSION_GRID_DIM; j2++) {
 8001d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d66:	3b01      	subs	r3, #1
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6a:	e093      	b.n	8001e94 <apply_repulsion_optimized_without_hash+0x318>
                    if (j2 < 0) continue;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f2c0 808c 	blt.w	8001e8c <apply_repulsion_optimized_without_hash+0x310>
                    int lookup_index1 = indexTable[i1][j1];
 8001d74:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <apply_repulsion_optimized_without_hash+0x21c>)
 8001d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d78:	00da      	lsls	r2, r3, #3
 8001d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d82:	623b      	str	r3, [r7, #32]
                    while (lookup_index1 >= 0
 8001d84:	e056      	b.n	8001e34 <apply_repulsion_optimized_without_hash+0x2b8>
                        && lookup_index1 < PARTICLE_COUNT
                        && (int)(particle_lookup[lookup_index1]->pos.x / minDist) == i1
                        && (int)(particle_lookup[lookup_index1]->pos.y / minDist) == j1) {
                        int lookup_index2 = indexTable[i2][j2];
 8001d86:	4904      	ldr	r1, [pc, #16]	@ (8001d98 <apply_repulsion_optimized_without_hash+0x21c>)
 8001d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8a:	00da      	lsls	r2, r3, #3
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	4413      	add	r3, r2
 8001d90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d94:	61fb      	str	r3, [r7, #28]
                        while (lookup_index2 >= 0
 8001d96:	e020      	b.n	8001dda <apply_repulsion_optimized_without_hash+0x25e>
 8001d98:	200005ec 	.word	0x200005ec
 8001d9c:	2000010c 	.word	0x2000010c
 8001da0:	3f8020c5 	.word	0x3f8020c5
 8001da4:	200006ec 	.word	0x200006ec
                            && lookup_index2 < PARTICLE_COUNT
                            && (int)(particle_lookup[lookup_index2]->pos.x / minDist) == i2
                            && (int)(particle_lookup[lookup_index2]->pos.y / minDist) == j2) {
                            if (particle_lookup[lookup_index1] != particle_lookup[lookup_index2]) {
 8001da8:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee8 <apply_repulsion_optimized_without_hash+0x36c>)
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001db0:	494d      	ldr	r1, [pc, #308]	@ (8001ee8 <apply_repulsion_optimized_without_hash+0x36c>)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d00b      	beq.n	8001dd4 <apply_repulsion_optimized_without_hash+0x258>
                                apply_repulsion(particle_lookup[lookup_index1], particle_lookup[lookup_index2]);
 8001dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee8 <apply_repulsion_optimized_without_hash+0x36c>)
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dc4:	4948      	ldr	r1, [pc, #288]	@ (8001ee8 <apply_repulsion_optimized_without_hash+0x36c>)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f7ff fd4a 	bl	8001868 <apply_repulsion>
                            }
                            lookup_index2++;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
                            && (int)(particle_lookup[lookup_index2]->pos.y / minDist) == j2) {
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db26      	blt.n	8001e2e <apply_repulsion_optimized_without_hash+0x2b2>
                            && lookup_index2 < PARTICLE_COUNT
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b1d      	cmp	r3, #29
 8001de4:	dc23      	bgt.n	8001e2e <apply_repulsion_optimized_without_hash+0x2b2>
                            && (int)(particle_lookup[lookup_index2]->pos.x / minDist) == i2
 8001de6:	4a40      	ldr	r2, [pc, #256]	@ (8001ee8 <apply_repulsion_optimized_without_hash+0x36c>)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a3e      	ldr	r2, [pc, #248]	@ (8001eec <apply_repulsion_optimized_without_hash+0x370>)
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe ff8b 	bl	8000d10 <__aeabi_fdiv>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f8af 	bl	8000f60 <__aeabi_f2iz>
 8001e02:	4602      	mov	r2, r0
 8001e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d111      	bne.n	8001e2e <apply_repulsion_optimized_without_hash+0x2b2>
                            && (int)(particle_lookup[lookup_index2]->pos.y / minDist) == j2) {
 8001e0a:	4a37      	ldr	r2, [pc, #220]	@ (8001ee8 <apply_repulsion_optimized_without_hash+0x36c>)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a35      	ldr	r2, [pc, #212]	@ (8001eec <apply_repulsion_optimized_without_hash+0x370>)
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe ff79 	bl	8000d10 <__aeabi_fdiv>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f89d 	bl	8000f60 <__aeabi_f2iz>
 8001e26:	4602      	mov	r2, r0
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d0bc      	beq.n	8001da8 <apply_repulsion_optimized_without_hash+0x22c>
                        }
                        lookup_index1++;
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	3301      	adds	r3, #1
 8001e32:	623b      	str	r3, [r7, #32]
                        && (int)(particle_lookup[lookup_index1]->pos.y / minDist) == j1) {
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db29      	blt.n	8001e8e <apply_repulsion_optimized_without_hash+0x312>
                        && lookup_index1 < PARTICLE_COUNT
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	2b1d      	cmp	r3, #29
 8001e3e:	dc26      	bgt.n	8001e8e <apply_repulsion_optimized_without_hash+0x312>
                        && (int)(particle_lookup[lookup_index1]->pos.x / minDist) == i1
 8001e40:	4a29      	ldr	r2, [pc, #164]	@ (8001ee8 <apply_repulsion_optimized_without_hash+0x36c>)
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a28      	ldr	r2, [pc, #160]	@ (8001eec <apply_repulsion_optimized_without_hash+0x370>)
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe ff5e 	bl	8000d10 <__aeabi_fdiv>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f882 	bl	8000f60 <__aeabi_f2iz>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d114      	bne.n	8001e8e <apply_repulsion_optimized_without_hash+0x312>
                        && (int)(particle_lookup[lookup_index1]->pos.y / minDist) == j1) {
 8001e64:	4a20      	ldr	r2, [pc, #128]	@ (8001ee8 <apply_repulsion_optimized_without_hash+0x36c>)
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001eec <apply_repulsion_optimized_without_hash+0x370>)
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe ff4c 	bl	8000d10 <__aeabi_fdiv>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f870 	bl	8000f60 <__aeabi_f2iz>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e84:	4293      	cmp	r3, r2
 8001e86:	f43f af7e 	beq.w	8001d86 <apply_repulsion_optimized_without_hash+0x20a>
 8001e8a:	e000      	b.n	8001e8e <apply_repulsion_optimized_without_hash+0x312>
                    if (j2 < 0) continue;
 8001e8c:	bf00      	nop
                for (int j2 = j1 - 1; j2 <= j1 + 1 && j2 < REPULSION_GRID_DIM; j2++) {
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	3301      	adds	r3, #1
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e96:	3301      	adds	r3, #1
 8001e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	dc05      	bgt.n	8001eaa <apply_repulsion_optimized_without_hash+0x32e>
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	2b07      	cmp	r3, #7
 8001ea2:	f77f af63 	ble.w	8001d6c <apply_repulsion_optimized_without_hash+0x1f0>
 8001ea6:	e000      	b.n	8001eaa <apply_repulsion_optimized_without_hash+0x32e>
                if (i2 < 0) continue;
 8001ea8:	bf00      	nop
            for (int i2 = i1 - 1; i2 <= i1 + 1 && i2 < REPULSION_GRID_DIM; i2++) {
 8001eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eac:	3301      	adds	r3, #1
 8001eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dc03      	bgt.n	8001ec2 <apply_repulsion_optimized_without_hash+0x346>
 8001eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ebc:	2b07      	cmp	r3, #7
 8001ebe:	f77f af4d 	ble.w	8001d5c <apply_repulsion_optimized_without_hash+0x1e0>
        for (int j1 = 0; j1 < REPULSION_GRID_DIM; j1++) {
 8001ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eca:	2b07      	cmp	r3, #7
 8001ecc:	f77f af42 	ble.w	8001d54 <apply_repulsion_optimized_without_hash+0x1d8>
    for (int i1 = 0; i1 < REPULSION_GRID_DIM; i1++) {
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed8:	2b07      	cmp	r3, #7
 8001eda:	f77f af38 	ble.w	8001d4e <apply_repulsion_optimized_without_hash+0x1d2>

                }
            }
        }
    }
}
 8001ede:	bf00      	nop
 8001ee0:	bf00      	nop
 8001ee2:	3750      	adds	r7, #80	@ 0x50
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200006ec 	.word	0x200006ec
 8001eec:	3f8020c5 	.word	0x3f8020c5

08001ef0 <step_simulation>:

void step_simulation() {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	clear_grid();
 8001ef4:	f7ff f92a 	bl	800114c <clear_grid>
	particle_to_grid();
 8001ef8:	f7ff f97a 	bl	80011f0 <particle_to_grid>
	apply_gravity();
 8001efc:	f7ff fab6 	bl	800146c <apply_gravity>
	grid_to_particle();
 8001f00:	f7ff fb8e 	bl	8001620 <grid_to_particle>
	apply_repulsion_optimized_without_hash();
 8001f04:	f7ff fe3a 	bl	8001b7c <apply_repulsion_optimized_without_hash>
	//apply_repulsion_optimized();
	//apply_repulsion();
	advect_particles_circular();
 8001f08:	f7ff fbd8 	bl	80016bc <advect_particles_circular>
	//advect_particles();
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <DrawBufferDim>:
			}
		}
	}
}

void DrawBufferDim() {
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
	for (int i = 0; i < OUT_BUFFER_DIM; i++) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	e037      	b.n	8001f8c <DrawBufferDim+0x7c>
		for (int j = 0; j < OUT_BUFFER_DIM; j++) {
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	e02e      	b.n	8001f80 <DrawBufferDim+0x70>
			if (out_buffer[i][j]){
 8001f22:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <DrawBufferDim+0x90>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	441a      	add	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d011      	beq.n	8001f58 <DrawBufferDim+0x48>
				frame[i * FRAME_DIM + j] &= ~0x200;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	00da      	lsls	r2, r3, #3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <DrawBufferDim+0x94>)
 8001f3e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	00d9      	lsls	r1, r3, #3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	440b      	add	r3, r1
 8001f4a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f4e:	b291      	uxth	r1, r2
 8001f50:	4a14      	ldr	r2, [pc, #80]	@ (8001fa4 <DrawBufferDim+0x94>)
 8001f52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001f56:	e010      	b.n	8001f7a <DrawBufferDim+0x6a>
			}
			else {
				frame[i * FRAME_DIM + j] |= 0x200;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	00da      	lsls	r2, r3, #3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a10      	ldr	r2, [pc, #64]	@ (8001fa4 <DrawBufferDim+0x94>)
 8001f62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	00d9      	lsls	r1, r3, #3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	440b      	add	r3, r1
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f72:	b291      	uxth	r1, r2
 8001f74:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <DrawBufferDim+0x94>)
 8001f76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int j = 0; j < OUT_BUFFER_DIM; j++) {
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2b07      	cmp	r3, #7
 8001f84:	ddcd      	ble.n	8001f22 <DrawBufferDim+0x12>
	for (int i = 0; i < OUT_BUFFER_DIM; i++) {
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	ddc4      	ble.n	8001f1c <DrawBufferDim+0xc>
			}
		}
	}
}
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000768 	.word	0x20000768
 8001fa4:	20000008 	.word	0x20000008

08001fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fae:	f000 fbc9 	bl	8002744 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb2:	f000 f8a5 	bl	8002100 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fb6:	f000 f917 	bl	80021e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001fba:	f000 f8e7 	bl	800218c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Włącz DMA i Timer
  	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8001fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80020e8 <main+0x140>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4a49      	ldr	r2, [pc, #292]	@ (80020e8 <main+0x140>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6153      	str	r3, [r2, #20]
  	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001fca:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <main+0x140>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	4a46      	ldr	r2, [pc, #280]	@ (80020e8 <main+0x140>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	61d3      	str	r3, [r2, #28]

  	// DMA1_Channel2 ← wyzwalany przez TIM2_UP
  	DMA1_Channel2->CCR &= ~DMA_CCR_EN;  // wyłącz DMA przed konfiguracją
 8001fd6:	4b45      	ldr	r3, [pc, #276]	@ (80020ec <main+0x144>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a44      	ldr	r2, [pc, #272]	@ (80020ec <main+0x144>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6013      	str	r3, [r2, #0]

  	DMA1_Channel2->CPAR = (uint32_t)&GPIOA->ODR;
 8001fe2:	4b42      	ldr	r3, [pc, #264]	@ (80020ec <main+0x144>)
 8001fe4:	4a42      	ldr	r2, [pc, #264]	@ (80020f0 <main+0x148>)
 8001fe6:	609a      	str	r2, [r3, #8]
  	DMA1_Channel2->CMAR = (uint32_t)frame;
 8001fe8:	4b40      	ldr	r3, [pc, #256]	@ (80020ec <main+0x144>)
 8001fea:	4a42      	ldr	r2, [pc, #264]	@ (80020f4 <main+0x14c>)
 8001fec:	60da      	str	r2, [r3, #12]
  	DMA1_Channel2->CNDTR = FRAME_SIZE;
 8001fee:	4b3f      	ldr	r3, [pc, #252]	@ (80020ec <main+0x144>)
 8001ff0:	2240      	movs	r2, #64	@ 0x40
 8001ff2:	605a      	str	r2, [r3, #4]

  	DMA1_Channel2->CCR =
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80020ec <main+0x144>)
 8001ff6:	f44f 62b6 	mov.w	r2, #1456	@ 0x5b0
 8001ffa:	601a      	str	r2, [r3, #0]
  	    DMA_CCR_DIR  |         // Mem → Periph
  	    DMA_CCR_CIRC |         // Cyklicznie
  	    DMA_CCR_MSIZE_0 |      // MSIZE = 16-bit
  	    DMA_CCR_PSIZE_0;       // PSIZE = 16-bit

  	DMA1_Channel2->CCR |= DMA_CCR_EN;   // włącz DMA
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80020ec <main+0x144>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a3a      	ldr	r2, [pc, #232]	@ (80020ec <main+0x144>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6013      	str	r3, [r2, #0]

  	// Timer 2 – co 1 ms
  	TIM2->PSC = 72 - 1;  // (72MHz / 7200 = 10kHz)
 8002008:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800200c:	2247      	movs	r2, #71	@ 0x47
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28
  	TIM2->ARR = 10 - 1;    // co 1 ms
 8002010:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002014:	2209      	movs	r2, #9
 8002016:	62da      	str	r2, [r3, #44]	@ 0x2c
  	TIM2->DIER |= TIM_DIER_UDE; // update event triggers DMA
 8002018:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002026:	60d3      	str	r3, [r2, #12]
  	TIM2->CR1 |= TIM_CR1_CEN;   // start
 8002028:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6013      	str	r3, [r2, #0]

  	init_particles_middle();
 8002038:	f7ff f81a 	bl	8001070 <init_particles_middle>
    // init mpu
  	MPU6050_Data mpu;
  	HAL_Delay(10);
 800203c:	200a      	movs	r0, #10
 800203e:	f000 fbe3 	bl	8002808 <HAL_Delay>
  	MPU6050_Init(&hi2c1);
 8002042:	482d      	ldr	r0, [pc, #180]	@ (80020f8 <main+0x150>)
 8002044:	f000 f944 	bl	80022d0 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	while (1)
	{
		debug_info = 6;
 8002048:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <main+0x154>)
 800204a:	2206      	movs	r2, #6
 800204c:	601a      	str	r2, [r3, #0]
		if (MPU6050_ReadData(&hi2c1, &mpu) == HAL_OK) {
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	4619      	mov	r1, r3
 8002054:	4828      	ldr	r0, [pc, #160]	@ (80020f8 <main+0x150>)
 8002056:	f000 f955 	bl	8002304 <MPU6050_ReadData>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d114      	bne.n	800208a <main+0xe2>
			  Vec2 gravity;
			  gravity.x = -mpu.Accel_X;
 8002060:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002064:	425b      	negs	r3, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fd4a 	bl	8000b00 <__aeabi_i2f>
 800206c:	4603      	mov	r3, r0
 800206e:	603b      	str	r3, [r7, #0]
			  gravity.y = -mpu.Accel_Y;
 8002070:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002074:	425b      	negs	r3, r3
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fd42 	bl	8000b00 <__aeabi_i2f>
 800207c:	4603      	mov	r3, r0
 800207e:	607b      	str	r3, [r7, #4]
			  set_gravity_direction(gravity);
 8002080:	463b      	mov	r3, r7
 8002082:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002086:	f7ff fa81 	bl	800158c <set_gravity_direction>
		}
		debug_info = 0;
 800208a:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <main+0x154>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
		Vec2 gravity;
		gravity.x = -mpu.Accel_Y;
 8002090:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002094:	425b      	negs	r3, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fd32 	bl	8000b00 <__aeabi_i2f>
 800209c:	4603      	mov	r3, r0
 800209e:	60bb      	str	r3, [r7, #8]
		gravity.y = mpu.Accel_Z;
 80020a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fd2b 	bl	8000b00 <__aeabi_i2f>
 80020aa:	4603      	mov	r3, r0
 80020ac:	60fb      	str	r3, [r7, #12]
		debug_info = 5;
 80020ae:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <main+0x154>)
 80020b0:	2205      	movs	r2, #5
 80020b2:	601a      	str	r2, [r3, #0]
		set_gravity_direction(gravity);
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020bc:	f7ff fa66 	bl	800158c <set_gravity_direction>

		debug_info = 1;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <main+0x154>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
		step_simulation();
 80020c6:	f7ff ff13 	bl	8001ef0 <step_simulation>
		debug_info = 2;
 80020ca:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <main+0x154>)
 80020cc:	2202      	movs	r2, #2
 80020ce:	601a      	str	r2, [r3, #0]
		generate_output();
 80020d0:	f7fe ff6c 	bl	8000fac <generate_output>
		debug_info = 3;
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <main+0x154>)
 80020d6:	2203      	movs	r2, #3
 80020d8:	601a      	str	r2, [r3, #0]
		DrawBufferDim();
 80020da:	f7ff ff19 	bl	8001f10 <DrawBufferDim>
		debug_info = 4;
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <main+0x154>)
 80020e0:	2204      	movs	r2, #4
 80020e2:	601a      	str	r2, [r3, #0]
	{
 80020e4:	e7b0      	b.n	8002048 <main+0xa0>
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	4002001c 	.word	0x4002001c
 80020f0:	4001080c 	.word	0x4001080c
 80020f4:	20000008 	.word	0x20000008
 80020f8:	200007a8 	.word	0x200007a8
 80020fc:	200007fc 	.word	0x200007fc

08002100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b090      	sub	sp, #64	@ 0x40
 8002104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002106:	f107 0318 	add.w	r3, r7, #24
 800210a:	2228      	movs	r2, #40	@ 0x28
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f002 fbf7 	bl	8004902 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002122:	2301      	movs	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002126:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800212a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002130:	2301      	movs	r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002134:	2302      	movs	r3, #2
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002138:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800213c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800213e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	4618      	mov	r0, r3
 800214a:	f001 fe9b 	bl	8003e84 <HAL_RCC_OscConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002154:	f000 f8b6 	bl	80022c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002158:	230f      	movs	r3, #15
 800215a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215c:	2302      	movs	r3, #2
 800215e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002164:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800216a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800216e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	2102      	movs	r1, #2
 8002174:	4618      	mov	r0, r3
 8002176:	f002 f907 	bl	8004388 <HAL_RCC_ClockConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002180:	f000 f8a0 	bl	80022c4 <Error_Handler>
  }
}
 8002184:	bf00      	nop
 8002186:	3740      	adds	r7, #64	@ 0x40
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <MX_I2C1_Init+0x50>)
 8002192:	4a13      	ldr	r2, [pc, #76]	@ (80021e0 <MX_I2C1_Init+0x54>)
 8002194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002196:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <MX_I2C1_Init+0x50>)
 8002198:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <MX_I2C1_Init+0x58>)
 800219a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800219c:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <MX_I2C1_Init+0x50>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <MX_I2C1_Init+0x50>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <MX_I2C1_Init+0x50>)
 80021aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <MX_I2C1_Init+0x50>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021b6:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <MX_I2C1_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021bc:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <MX_I2C1_Init+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <MX_I2C1_Init+0x50>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021c8:	4804      	ldr	r0, [pc, #16]	@ (80021dc <MX_I2C1_Init+0x50>)
 80021ca:	f000 fdb9 	bl	8002d40 <HAL_I2C_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021d4:	f000 f876 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200007a8 	.word	0x200007a8
 80021e0:	40005400 	.word	0x40005400
 80021e4:	000186a0 	.word	0x000186a0

080021e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fc:	4b2e      	ldr	r3, [pc, #184]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a2d      	ldr	r2, [pc, #180]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 8002202:	f043 0310 	orr.w	r3, r3, #16
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b2b      	ldr	r3, [pc, #172]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002214:	4b28      	ldr	r3, [pc, #160]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a27      	ldr	r2, [pc, #156]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 800221a:	f043 0320 	orr.w	r3, r3, #32
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222c:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4a21      	ldr	r2, [pc, #132]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 8002232:	f043 0304 	orr.w	r3, r3, #4
 8002236:	6193      	str	r3, [r2, #24]
 8002238:	4b1f      	ldr	r3, [pc, #124]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002244:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4a1b      	ldr	r2, [pc, #108]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 800224a:	f043 0308 	orr.w	r3, r3, #8
 800224e:	6193      	str	r3, [r2, #24]
 8002250:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <MX_GPIO_Init+0xd0>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002262:	4816      	ldr	r0, [pc, #88]	@ (80022bc <MX_GPIO_Init+0xd4>)
 8002264:	f000 fd54 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002268:	2200      	movs	r2, #0
 800226a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800226e:	4814      	ldr	r0, [pc, #80]	@ (80022c0 <MX_GPIO_Init+0xd8>)
 8002270:	f000 fd4e 	bl	8002d10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227a:	2301      	movs	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2302      	movs	r3, #2
 8002284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	4619      	mov	r1, r3
 800228c:	480b      	ldr	r0, [pc, #44]	@ (80022bc <MX_GPIO_Init+0xd4>)
 800228e:	f000 fbc3 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002292:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8002296:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2302      	movs	r3, #2
 80022a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	4619      	mov	r1, r3
 80022aa:	4805      	ldr	r0, [pc, #20]	@ (80022c0 <MX_GPIO_Init+0xd8>)
 80022ac:	f000 fbb4 	bl	8002a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80022b0:	bf00      	nop
 80022b2:	3720      	adds	r7, #32
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40011000 	.word	0x40011000
 80022c0:	40010800 	.word	0x40010800

080022c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <MPU6050_Init>:
#include "mpu6050.h"

#define MPU6050_PWR_MGMT_1   0x6B
#define MPU6050_ACCEL_XOUT_H 0x3B

HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af04      	add	r7, sp, #16
 80022d6:	6078      	str	r0, [r7, #4]
    uint8_t data = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]
    return HAL_I2C_Mem_Write(hi2c, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	2301      	movs	r3, #1
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	f107 030f 	add.w	r3, r7, #15
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2301      	movs	r3, #1
 80022ee:	226b      	movs	r2, #107	@ 0x6b
 80022f0:	21d0      	movs	r1, #208	@ 0xd0
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fe68 	bl	8002fc8 <HAL_I2C_Mem_Write>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <MPU6050_ReadData>:
uint8_t raw[15];
HAL_StatusTypeDef MPU6050_ReadData(I2C_HandleTypeDef *hi2c, MPU6050_Data *data) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af04      	add	r7, sp, #16
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]

    debug_info = 60;
 800230e:	4b3a      	ldr	r3, [pc, #232]	@ (80023f8 <MPU6050_ReadData+0xf4>)
 8002310:	223c      	movs	r2, #60	@ 0x3c
 8002312:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_Mem_Read(hi2c, MPU6050_I2C_ADDR, MPU6050_ACCEL_XOUT_H, 1, raw, 14, HAL_MAX_DELAY) != HAL_OK) {
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
 8002318:	9302      	str	r3, [sp, #8]
 800231a:	230e      	movs	r3, #14
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <MPU6050_ReadData+0xf8>)
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2301      	movs	r3, #1
 8002324:	223b      	movs	r2, #59	@ 0x3b
 8002326:	21d0      	movs	r1, #208	@ 0xd0
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 ff47 	bl	80031bc <HAL_I2C_Mem_Read>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MPU6050_ReadData+0x34>
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e05a      	b.n	80023ee <MPU6050_ReadData+0xea>
    }
    debug_info = 61;
 8002338:	4b2f      	ldr	r3, [pc, #188]	@ (80023f8 <MPU6050_ReadData+0xf4>)
 800233a:	223d      	movs	r2, #61	@ 0x3d
 800233c:	601a      	str	r2, [r3, #0]
    data->Accel_X = (int16_t)(raw[0] << 8 | raw[1]);
 800233e:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <MPU6050_ReadData+0xf8>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	b21b      	sxth	r3, r3
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	b21a      	sxth	r2, r3
 8002348:	4b2c      	ldr	r3, [pc, #176]	@ (80023fc <MPU6050_ReadData+0xf8>)
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	b21b      	sxth	r3, r3
 800234e:	4313      	orrs	r3, r2
 8002350:	b21a      	sxth	r2, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	801a      	strh	r2, [r3, #0]
    data->Accel_Y = (int16_t)(raw[2] << 8 | raw[3]);
 8002356:	4b29      	ldr	r3, [pc, #164]	@ (80023fc <MPU6050_ReadData+0xf8>)
 8002358:	789b      	ldrb	r3, [r3, #2]
 800235a:	b21b      	sxth	r3, r3
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	b21a      	sxth	r2, r3
 8002360:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <MPU6050_ReadData+0xf8>)
 8002362:	78db      	ldrb	r3, [r3, #3]
 8002364:	b21b      	sxth	r3, r3
 8002366:	4313      	orrs	r3, r2
 8002368:	b21a      	sxth	r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	805a      	strh	r2, [r3, #2]
    data->Accel_Z = (int16_t)(raw[4] << 8 | raw[5]);
 800236e:	4b23      	ldr	r3, [pc, #140]	@ (80023fc <MPU6050_ReadData+0xf8>)
 8002370:	791b      	ldrb	r3, [r3, #4]
 8002372:	b21b      	sxth	r3, r3
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	b21a      	sxth	r2, r3
 8002378:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <MPU6050_ReadData+0xf8>)
 800237a:	795b      	ldrb	r3, [r3, #5]
 800237c:	b21b      	sxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b21a      	sxth	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	809a      	strh	r2, [r3, #4]
    data->Temp    = (int16_t)(raw[6] << 8 | raw[7]);
 8002386:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <MPU6050_ReadData+0xf8>)
 8002388:	799b      	ldrb	r3, [r3, #6]
 800238a:	b21b      	sxth	r3, r3
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	b21a      	sxth	r2, r3
 8002390:	4b1a      	ldr	r3, [pc, #104]	@ (80023fc <MPU6050_ReadData+0xf8>)
 8002392:	79db      	ldrb	r3, [r3, #7]
 8002394:	b21b      	sxth	r3, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	b21a      	sxth	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	819a      	strh	r2, [r3, #12]
    data->Gyro_X  = (int16_t)(raw[8] << 8 | raw[9]);
 800239e:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <MPU6050_ReadData+0xf8>)
 80023a0:	7a1b      	ldrb	r3, [r3, #8]
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <MPU6050_ReadData+0xf8>)
 80023aa:	7a5b      	ldrb	r3, [r3, #9]
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	80da      	strh	r2, [r3, #6]
    data->Gyro_Y  = (int16_t)(raw[10] << 8 | raw[11]);
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <MPU6050_ReadData+0xf8>)
 80023b8:	7a9b      	ldrb	r3, [r3, #10]
 80023ba:	b21b      	sxth	r3, r3
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	b21a      	sxth	r2, r3
 80023c0:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <MPU6050_ReadData+0xf8>)
 80023c2:	7adb      	ldrb	r3, [r3, #11]
 80023c4:	b21b      	sxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	811a      	strh	r2, [r3, #8]
    data->Gyro_Z  = (int16_t)(raw[12] << 8 | raw[13]);
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <MPU6050_ReadData+0xf8>)
 80023d0:	7b1b      	ldrb	r3, [r3, #12]
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <MPU6050_ReadData+0xf8>)
 80023da:	7b5b      	ldrb	r3, [r3, #13]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	b21a      	sxth	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	815a      	strh	r2, [r3, #10]
    debug_info = 62;
 80023e6:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <MPU6050_ReadData+0xf4>)
 80023e8:	223e      	movs	r2, #62	@ 0x3e
 80023ea:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200007fc 	.word	0x200007fc
 80023fc:	20000800 	.word	0x20000800

08002400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_MspInit+0x5c>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	4a14      	ldr	r2, [pc, #80]	@ (800245c <HAL_MspInit+0x5c>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6193      	str	r3, [r2, #24]
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <HAL_MspInit+0x5c>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <HAL_MspInit+0x5c>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a0e      	ldr	r2, [pc, #56]	@ (800245c <HAL_MspInit+0x5c>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <HAL_MspInit+0x5c>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002436:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <HAL_MspInit+0x60>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <HAL_MspInit+0x60>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000

08002464 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a16      	ldr	r2, [pc, #88]	@ (80024d8 <HAL_I2C_MspInit+0x74>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d125      	bne.n	80024d0 <HAL_I2C_MspInit+0x6c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002484:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <HAL_I2C_MspInit+0x78>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a14      	ldr	r2, [pc, #80]	@ (80024dc <HAL_I2C_MspInit+0x78>)
 800248a:	f043 0308 	orr.w	r3, r3, #8
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_I2C_MspInit+0x78>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800249c:	23c0      	movs	r3, #192	@ 0xc0
 800249e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a0:	2312      	movs	r3, #18
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ac:	f107 0310 	add.w	r3, r7, #16
 80024b0:	4619      	mov	r1, r3
 80024b2:	480b      	ldr	r0, [pc, #44]	@ (80024e0 <HAL_I2C_MspInit+0x7c>)
 80024b4:	f000 fab0 	bl	8002a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <HAL_I2C_MspInit+0x78>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <HAL_I2C_MspInit+0x78>)
 80024be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024c2:	61d3      	str	r3, [r2, #28]
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_I2C_MspInit+0x78>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024d0:	bf00      	nop
 80024d2:	3720      	adds	r7, #32
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40005400 	.word	0x40005400
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010c00 	.word	0x40010c00

080024e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024e8:	f3bf 8f4f 	dsb	sy
}
 80024ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <__NVIC_SystemReset+0x24>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80024f6:	4904      	ldr	r1, [pc, #16]	@ (8002508 <__NVIC_SystemReset+0x24>)
 80024f8:	4b04      	ldr	r3, [pc, #16]	@ (800250c <__NVIC_SystemReset+0x28>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80024fe:	f3bf 8f4f 	dsb	sy
}
 8002502:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <__NVIC_SystemReset+0x20>
 8002508:	e000ed00 	.word	0xe000ed00
 800250c:	05fa0004 	.word	0x05fa0004

08002510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <NMI_Handler+0x4>

08002518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 800251c:	f7ff ffe2 	bl	80024e4 <__NVIC_SystemReset>

08002520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <MemManage_Handler+0x4>

08002528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <BusFault_Handler+0x4>

08002530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <UsageFault_Handler+0x4>

08002538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002560:	f000 f936 	bl	80027d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}

08002568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <_kill>:

int _kill(int pid, int sig)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002580:	f002 fa0e 	bl	80049a0 <__errno>
 8002584:	4603      	mov	r3, r0
 8002586:	2216      	movs	r2, #22
 8002588:	601a      	str	r2, [r3, #0]
  return -1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <_exit>:

void _exit (int status)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800259e:	f04f 31ff 	mov.w	r1, #4294967295
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ffe7 	bl	8002576 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <_exit+0x12>

080025ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e00a      	b.n	80025d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025be:	f3af 8000 	nop.w
 80025c2:	4601      	mov	r1, r0
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	60ba      	str	r2, [r7, #8]
 80025ca:	b2ca      	uxtb	r2, r1
 80025cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3301      	adds	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	dbf0      	blt.n	80025be <_read+0x12>
  }

  return len;
 80025dc:	687b      	ldr	r3, [r7, #4]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e009      	b.n	800260c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	60ba      	str	r2, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	dbf1      	blt.n	80025f8 <_write+0x12>
  }
  return len;
 8002614:	687b      	ldr	r3, [r7, #4]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_close>:

int _close(int file)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002644:	605a      	str	r2, [r3, #4]
  return 0;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <_isatty>:

int _isatty(int file)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
	...

08002680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002688:	4a14      	ldr	r2, [pc, #80]	@ (80026dc <_sbrk+0x5c>)
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <_sbrk+0x60>)
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002694:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800269c:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <_sbrk+0x64>)
 800269e:	4a12      	ldr	r2, [pc, #72]	@ (80026e8 <_sbrk+0x68>)
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <_sbrk+0x64>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d207      	bcs.n	80026c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b0:	f002 f976 	bl	80049a0 <__errno>
 80026b4:	4603      	mov	r3, r0
 80026b6:	220c      	movs	r2, #12
 80026b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	e009      	b.n	80026d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c0:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <_sbrk+0x64>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026c6:	4b07      	ldr	r3, [pc, #28]	@ (80026e4 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	4a05      	ldr	r2, [pc, #20]	@ (80026e4 <_sbrk+0x64>)
 80026d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026d2:	68fb      	ldr	r3, [r7, #12]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20002800 	.word	0x20002800
 80026e0:	00000400 	.word	0x00000400
 80026e4:	20000810 	.word	0x20000810
 80026e8:	20000968 	.word	0x20000968

080026ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026f8:	f7ff fff8 	bl	80026ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026fc:	480b      	ldr	r0, [pc, #44]	@ (800272c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026fe:	490c      	ldr	r1, [pc, #48]	@ (8002730 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002700:	4a0c      	ldr	r2, [pc, #48]	@ (8002734 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002704:	e002      	b.n	800270c <LoopCopyDataInit>

08002706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270a:	3304      	adds	r3, #4

0800270c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800270c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002710:	d3f9      	bcc.n	8002706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002712:	4a09      	ldr	r2, [pc, #36]	@ (8002738 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002714:	4c09      	ldr	r4, [pc, #36]	@ (800273c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002718:	e001      	b.n	800271e <LoopFillZerobss>

0800271a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800271c:	3204      	adds	r2, #4

0800271e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002720:	d3fb      	bcc.n	800271a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002722:	f002 f943 	bl	80049ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002726:	f7ff fc3f 	bl	8001fa8 <main>
  bx lr
 800272a:	4770      	bx	lr
  ldr r0, =_sdata
 800272c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002730:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8002734:	0800588c 	.word	0x0800588c
  ldr r2, =_sbss
 8002738:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 800273c:	20000964 	.word	0x20000964

08002740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002740:	e7fe      	b.n	8002740 <ADC1_2_IRQHandler>
	...

08002744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002748:	4b08      	ldr	r3, [pc, #32]	@ (800276c <HAL_Init+0x28>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a07      	ldr	r2, [pc, #28]	@ (800276c <HAL_Init+0x28>)
 800274e:	f043 0310 	orr.w	r3, r3, #16
 8002752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002754:	2003      	movs	r0, #3
 8002756:	f000 f92b 	bl	80029b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275a:	200f      	movs	r0, #15
 800275c:	f000 f808 	bl	8002770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002760:	f7ff fe4e 	bl	8002400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40022000 	.word	0x40022000

08002770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_InitTick+0x54>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <HAL_InitTick+0x58>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002786:	fbb3 f3f1 	udiv	r3, r3, r1
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f935 	bl	80029fe <HAL_SYSTICK_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e00e      	b.n	80027bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b0f      	cmp	r3, #15
 80027a2:	d80a      	bhi.n	80027ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a4:	2200      	movs	r2, #0
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	f000 f90b 	bl	80029c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b0:	4a06      	ldr	r2, [pc, #24]	@ (80027cc <HAL_InitTick+0x5c>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e000      	b.n	80027bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000088 	.word	0x20000088
 80027c8:	20000090 	.word	0x20000090
 80027cc:	2000008c 	.word	0x2000008c

080027d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d4:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_IncTick+0x1c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <HAL_IncTick+0x20>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4a03      	ldr	r2, [pc, #12]	@ (80027f0 <HAL_IncTick+0x20>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	20000090 	.word	0x20000090
 80027f0:	20000814 	.word	0x20000814

080027f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return uwTick;
 80027f8:	4b02      	ldr	r3, [pc, #8]	@ (8002804 <HAL_GetTick+0x10>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	20000814 	.word	0x20000814

08002808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff fff0 	bl	80027f4 <HAL_GetTick>
 8002814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d005      	beq.n	800282e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002822:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <HAL_Delay+0x44>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800282e:	bf00      	nop
 8002830:	f7ff ffe0 	bl	80027f4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	429a      	cmp	r2, r3
 800283e:	d8f7      	bhi.n	8002830 <HAL_Delay+0x28>
  {
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000090 	.word	0x20000090

08002850 <__NVIC_SetPriorityGrouping>:
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <__NVIC_SetPriorityGrouping+0x44>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800286c:	4013      	ands	r3, r2
 800286e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002878:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800287c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002882:	4a04      	ldr	r2, [pc, #16]	@ (8002894 <__NVIC_SetPriorityGrouping+0x44>)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	60d3      	str	r3, [r2, #12]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_GetPriorityGrouping>:
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800289c:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <__NVIC_GetPriorityGrouping+0x18>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	f003 0307 	and.w	r3, r3, #7
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_SetPriority>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	db0a      	blt.n	80028de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	490c      	ldr	r1, [pc, #48]	@ (8002900 <__NVIC_SetPriority+0x4c>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	440b      	add	r3, r1
 80028d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80028dc:	e00a      	b.n	80028f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4908      	ldr	r1, [pc, #32]	@ (8002904 <__NVIC_SetPriority+0x50>)
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3b04      	subs	r3, #4
 80028ec:	0112      	lsls	r2, r2, #4
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	440b      	add	r3, r1
 80028f2:	761a      	strb	r2, [r3, #24]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000e100 	.word	0xe000e100
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <NVIC_EncodePriority>:
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	@ 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f1c3 0307 	rsb	r3, r3, #7
 8002922:	2b04      	cmp	r3, #4
 8002924:	bf28      	it	cs
 8002926:	2304      	movcs	r3, #4
 8002928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3304      	adds	r3, #4
 800292e:	2b06      	cmp	r3, #6
 8002930:	d902      	bls.n	8002938 <NVIC_EncodePriority+0x30>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3b03      	subs	r3, #3
 8002936:	e000      	b.n	800293a <NVIC_EncodePriority+0x32>
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	f04f 32ff 	mov.w	r2, #4294967295
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002950:	f04f 31ff 	mov.w	r1, #4294967295
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43d9      	mvns	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	4313      	orrs	r3, r2
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	@ 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297c:	d301      	bcc.n	8002982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <SysTick_Config+0x40>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298a:	210f      	movs	r1, #15
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f7ff ff90 	bl	80028b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <SysTick_Config+0x40>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299a:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <SysTick_Config+0x40>)
 800299c:	2207      	movs	r2, #7
 800299e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000e010 	.word	0xe000e010

080029b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff49 	bl	8002850 <__NVIC_SetPriorityGrouping>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d8:	f7ff ff5e 	bl	8002898 <__NVIC_GetPriorityGrouping>
 80029dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f7ff ff90 	bl	8002908 <NVIC_EncodePriority>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff5f 	bl	80028b4 <__NVIC_SetPriority>
}
 80029f6:	bf00      	nop
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffb0 	bl	800296c <SysTick_Config>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b08b      	sub	sp, #44	@ 0x2c
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2a:	e161      	b.n	8002cf0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f040 8150 	bne.w	8002cea <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4a97      	ldr	r2, [pc, #604]	@ (8002cac <HAL_GPIO_Init+0x294>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d05e      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a54:	4a95      	ldr	r2, [pc, #596]	@ (8002cac <HAL_GPIO_Init+0x294>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d875      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a5a:	4a95      	ldr	r2, [pc, #596]	@ (8002cb0 <HAL_GPIO_Init+0x298>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d058      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a60:	4a93      	ldr	r2, [pc, #588]	@ (8002cb0 <HAL_GPIO_Init+0x298>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d86f      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a66:	4a93      	ldr	r2, [pc, #588]	@ (8002cb4 <HAL_GPIO_Init+0x29c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d052      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a6c:	4a91      	ldr	r2, [pc, #580]	@ (8002cb4 <HAL_GPIO_Init+0x29c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d869      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a72:	4a91      	ldr	r2, [pc, #580]	@ (8002cb8 <HAL_GPIO_Init+0x2a0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d04c      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a78:	4a8f      	ldr	r2, [pc, #572]	@ (8002cb8 <HAL_GPIO_Init+0x2a0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d863      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a7e:	4a8f      	ldr	r2, [pc, #572]	@ (8002cbc <HAL_GPIO_Init+0x2a4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d046      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a84:	4a8d      	ldr	r2, [pc, #564]	@ (8002cbc <HAL_GPIO_Init+0x2a4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d85d      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	d82a      	bhi.n	8002ae4 <HAL_GPIO_Init+0xcc>
 8002a8e:	2b12      	cmp	r3, #18
 8002a90:	d859      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a92:	a201      	add	r2, pc, #4	@ (adr r2, 8002a98 <HAL_GPIO_Init+0x80>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002b13 	.word	0x08002b13
 8002a9c:	08002aed 	.word	0x08002aed
 8002aa0:	08002aff 	.word	0x08002aff
 8002aa4:	08002b41 	.word	0x08002b41
 8002aa8:	08002b47 	.word	0x08002b47
 8002aac:	08002b47 	.word	0x08002b47
 8002ab0:	08002b47 	.word	0x08002b47
 8002ab4:	08002b47 	.word	0x08002b47
 8002ab8:	08002b47 	.word	0x08002b47
 8002abc:	08002b47 	.word	0x08002b47
 8002ac0:	08002b47 	.word	0x08002b47
 8002ac4:	08002b47 	.word	0x08002b47
 8002ac8:	08002b47 	.word	0x08002b47
 8002acc:	08002b47 	.word	0x08002b47
 8002ad0:	08002b47 	.word	0x08002b47
 8002ad4:	08002b47 	.word	0x08002b47
 8002ad8:	08002b47 	.word	0x08002b47
 8002adc:	08002af5 	.word	0x08002af5
 8002ae0:	08002b09 	.word	0x08002b09
 8002ae4:	4a76      	ldr	r2, [pc, #472]	@ (8002cc0 <HAL_GPIO_Init+0x2a8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aea:	e02c      	b.n	8002b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	623b      	str	r3, [r7, #32]
          break;
 8002af2:	e029      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	3304      	adds	r3, #4
 8002afa:	623b      	str	r3, [r7, #32]
          break;
 8002afc:	e024      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	3308      	adds	r3, #8
 8002b04:	623b      	str	r3, [r7, #32]
          break;
 8002b06:	e01f      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	623b      	str	r3, [r7, #32]
          break;
 8002b10:	e01a      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	623b      	str	r3, [r7, #32]
          break;
 8002b1e:	e013      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	611a      	str	r2, [r3, #16]
          break;
 8002b32:	e009      	b.n	8002b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b34:	2308      	movs	r3, #8
 8002b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	615a      	str	r2, [r3, #20]
          break;
 8002b3e:	e003      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b40:	2300      	movs	r3, #0
 8002b42:	623b      	str	r3, [r7, #32]
          break;
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          break;
 8002b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2bff      	cmp	r3, #255	@ 0xff
 8002b4c:	d801      	bhi.n	8002b52 <HAL_GPIO_Init+0x13a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	e001      	b.n	8002b56 <HAL_GPIO_Init+0x13e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2bff      	cmp	r3, #255	@ 0xff
 8002b5c:	d802      	bhi.n	8002b64 <HAL_GPIO_Init+0x14c>
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	e002      	b.n	8002b6a <HAL_GPIO_Init+0x152>
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	3b08      	subs	r3, #8
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	210f      	movs	r1, #15
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80a9 	beq.w	8002cea <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b98:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc4 <HAL_GPIO_Init+0x2ac>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a49      	ldr	r2, [pc, #292]	@ (8002cc4 <HAL_GPIO_Init+0x2ac>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b47      	ldr	r3, [pc, #284]	@ (8002cc4 <HAL_GPIO_Init+0x2ac>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bb0:	4a45      	ldr	r2, [pc, #276]	@ (8002cc8 <HAL_GPIO_Init+0x2b0>)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a3d      	ldr	r2, [pc, #244]	@ (8002ccc <HAL_GPIO_Init+0x2b4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00d      	beq.n	8002bf8 <HAL_GPIO_Init+0x1e0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd0 <HAL_GPIO_Init+0x2b8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d007      	beq.n	8002bf4 <HAL_GPIO_Init+0x1dc>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3b      	ldr	r2, [pc, #236]	@ (8002cd4 <HAL_GPIO_Init+0x2bc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_GPIO_Init+0x1d8>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e004      	b.n	8002bfa <HAL_GPIO_Init+0x1e2>
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e002      	b.n	8002bfa <HAL_GPIO_Init+0x1e2>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_GPIO_Init+0x1e2>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bfc:	f002 0203 	and.w	r2, r2, #3
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	4093      	lsls	r3, r2
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c0a:	492f      	ldr	r1, [pc, #188]	@ (8002cc8 <HAL_GPIO_Init+0x2b0>)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	3302      	adds	r3, #2
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d006      	beq.n	8002c32 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c24:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	492b      	ldr	r1, [pc, #172]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c32:	4b29      	ldr	r3, [pc, #164]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	4927      	ldr	r1, [pc, #156]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c4c:	4b22      	ldr	r3, [pc, #136]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	4921      	ldr	r1, [pc, #132]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60cb      	str	r3, [r1, #12]
 8002c58:	e006      	b.n	8002c68 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	491d      	ldr	r1, [pc, #116]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c74:	4b18      	ldr	r3, [pc, #96]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4917      	ldr	r1, [pc, #92]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c82:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	4913      	ldr	r1, [pc, #76]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01f      	beq.n	8002cdc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	490d      	ldr	r1, [pc, #52]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
 8002ca8:	e01f      	b.n	8002cea <HAL_GPIO_Init+0x2d2>
 8002caa:	bf00      	nop
 8002cac:	10320000 	.word	0x10320000
 8002cb0:	10310000 	.word	0x10310000
 8002cb4:	10220000 	.word	0x10220000
 8002cb8:	10210000 	.word	0x10210000
 8002cbc:	10120000 	.word	0x10120000
 8002cc0:	10110000 	.word	0x10110000
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40010800 	.word	0x40010800
 8002cd0:	40010c00 	.word	0x40010c00
 8002cd4:	40011000 	.word	0x40011000
 8002cd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_GPIO_Init+0x2f4>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	4909      	ldr	r1, [pc, #36]	@ (8002d0c <HAL_GPIO_Init+0x2f4>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	3301      	adds	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f47f ae96 	bne.w	8002a2c <HAL_GPIO_Init+0x14>
  }
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	372c      	adds	r7, #44	@ 0x2c
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	40010400 	.word	0x40010400

08002d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d20:	787b      	ldrb	r3, [r7, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d2c:	e003      	b.n	8002d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	041a      	lsls	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	611a      	str	r2, [r3, #16]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e12b      	b.n	8002faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff fb7c 	bl	8002464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	@ 0x24
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da4:	f001 fc38 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8002da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4a81      	ldr	r2, [pc, #516]	@ (8002fb4 <HAL_I2C_Init+0x274>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d807      	bhi.n	8002dc4 <HAL_I2C_Init+0x84>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a80      	ldr	r2, [pc, #512]	@ (8002fb8 <HAL_I2C_Init+0x278>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e006      	b.n	8002dd2 <HAL_I2C_Init+0x92>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a7d      	ldr	r2, [pc, #500]	@ (8002fbc <HAL_I2C_Init+0x27c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0e7      	b.n	8002faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a78      	ldr	r2, [pc, #480]	@ (8002fc0 <HAL_I2C_Init+0x280>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0c9b      	lsrs	r3, r3, #18
 8002de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a6a      	ldr	r2, [pc, #424]	@ (8002fb4 <HAL_I2C_Init+0x274>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d802      	bhi.n	8002e14 <HAL_I2C_Init+0xd4>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3301      	adds	r3, #1
 8002e12:	e009      	b.n	8002e28 <HAL_I2C_Init+0xe8>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a69      	ldr	r2, [pc, #420]	@ (8002fc4 <HAL_I2C_Init+0x284>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	3301      	adds	r3, #1
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	495c      	ldr	r1, [pc, #368]	@ (8002fb4 <HAL_I2C_Init+0x274>)
 8002e44:	428b      	cmp	r3, r1
 8002e46:	d819      	bhi.n	8002e7c <HAL_I2C_Init+0x13c>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e59      	subs	r1, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e56:	1c59      	adds	r1, r3, #1
 8002e58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_I2C_Init+0x138>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e59      	subs	r1, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e76:	e051      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e04f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HAL_I2C_Init+0x168>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e012      	b.n	8002ece <HAL_I2C_Init+0x18e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	0099      	lsls	r1, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Init+0x196>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e022      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10e      	bne.n	8002efc <HAL_I2C_Init+0x1bc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1e58      	subs	r0, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	440b      	add	r3, r1
 8002eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002efa:	e00f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	6809      	ldr	r1, [r1, #0]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6911      	ldr	r1, [r2, #16]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68d2      	ldr	r2, [r2, #12]
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	000186a0 	.word	0x000186a0
 8002fb8:	001e847f 	.word	0x001e847f
 8002fbc:	003d08ff 	.word	0x003d08ff
 8002fc0:	431bde83 	.word	0x431bde83
 8002fc4:	10624dd3 	.word	0x10624dd3

08002fc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	817b      	strh	r3, [r7, #10]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	813b      	strh	r3, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fe2:	f7ff fc07 	bl	80027f4 <HAL_GetTick>
 8002fe6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	f040 80d9 	bne.w	80031a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2319      	movs	r3, #25
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	496d      	ldr	r1, [pc, #436]	@ (80031b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fd09 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
 800300e:	e0cc      	b.n	80031aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_I2C_Mem_Write+0x56>
 800301a:	2302      	movs	r3, #2
 800301c:	e0c5      	b.n	80031aa <HAL_I2C_Mem_Write+0x1e2>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d007      	beq.n	8003044 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003052:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2221      	movs	r2, #33	@ 0x21
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2240      	movs	r2, #64	@ 0x40
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a3a      	ldr	r2, [r7, #32]
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003074:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a4d      	ldr	r2, [pc, #308]	@ (80031b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003084:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003086:	88f8      	ldrh	r0, [r7, #6]
 8003088:	893a      	ldrh	r2, [r7, #8]
 800308a:	8979      	ldrh	r1, [r7, #10]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	4603      	mov	r3, r0
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 fb40 	bl	800371c <I2C_RequestMemoryWrite>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d052      	beq.n	8003148 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e081      	b.n	80031aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fdce 	bl	8003c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d107      	bne.n	80030ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e06b      	b.n	80031aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b04      	cmp	r3, #4
 800310e:	d11b      	bne.n	8003148 <HAL_I2C_Mem_Write+0x180>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	d017      	beq.n	8003148 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1aa      	bne.n	80030a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fdc1 	bl	8003cdc <I2C_WaitOnBTFFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00d      	beq.n	800317c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	2b04      	cmp	r3, #4
 8003166:	d107      	bne.n	8003178 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003176:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e016      	b.n	80031aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	00100002 	.word	0x00100002
 80031b8:	ffff0000 	.word	0xffff0000

080031bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
extern debug_info;
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	@ 0x30
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	4608      	mov	r0, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	461a      	mov	r2, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	817b      	strh	r3, [r7, #10]
 80031ce:	460b      	mov	r3, r1
 80031d0:	813b      	strh	r3, [r7, #8]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
	debug_info = 601;
 80031d6:	4b8a      	ldr	r3, [pc, #552]	@ (8003400 <HAL_I2C_Mem_Read+0x244>)
 80031d8:	f240 2259 	movw	r2, #601	@ 0x259
 80031dc:	601a      	str	r2, [r3, #0]
  __IO uint32_t count = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031e2:	f7ff fb07 	bl	80027f4 <HAL_GetTick>
 80031e6:	6278      	str	r0, [r7, #36]	@ 0x24
  debug_info = 6011;
 80031e8:	4b85      	ldr	r3, [pc, #532]	@ (8003400 <HAL_I2C_Mem_Read+0x244>)
 80031ea:	f241 727b 	movw	r2, #6011	@ 0x177b
 80031ee:	601a      	str	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  debug_info = 6012;
 80031f0:	4b83      	ldr	r3, [pc, #524]	@ (8003400 <HAL_I2C_Mem_Read+0x244>)
 80031f2:	f241 727c 	movw	r2, #6012	@ 0x177c
 80031f6:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b20      	cmp	r3, #32
 8003202:	f040 8283 	bne.w	800370c <HAL_I2C_Mem_Read+0x550>
  {
	  debug_info = 6013;
 8003206:	4b7e      	ldr	r3, [pc, #504]	@ (8003400 <HAL_I2C_Mem_Read+0x244>)
 8003208:	f241 727d 	movw	r2, #6013	@ 0x177d
 800320c:	601a      	str	r2, [r3, #0]
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2319      	movs	r3, #25
 8003214:	2201      	movs	r2, #1
 8003216:	497b      	ldr	r1, [pc, #492]	@ (8003404 <HAL_I2C_Mem_Read+0x248>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fbfd 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2C_Mem_Read+0x6c>
    {
      return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
 8003226:	e272      	b.n	800370e <HAL_I2C_Mem_Read+0x552>
    }
    debug_info = 6014;
 8003228:	4b75      	ldr	r3, [pc, #468]	@ (8003400 <HAL_I2C_Mem_Read+0x244>)
 800322a:	f241 727e 	movw	r2, #6014	@ 0x177e
 800322e:	601a      	str	r2, [r3, #0]
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_I2C_Mem_Read+0x82>
 800323a:	2302      	movs	r3, #2
 800323c:	e267      	b.n	800370e <HAL_I2C_Mem_Read+0x552>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    debug_info = 6015;
 8003246:	4b6e      	ldr	r3, [pc, #440]	@ (8003400 <HAL_I2C_Mem_Read+0x244>)
 8003248:	f241 727f 	movw	r2, #6015	@ 0x177f
 800324c:	601a      	str	r2, [r3, #0]
    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d007      	beq.n	800326c <HAL_I2C_Mem_Read+0xb0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
    }
    debug_info = 6016;
 800326c:	4b64      	ldr	r3, [pc, #400]	@ (8003400 <HAL_I2C_Mem_Read+0x244>)
 800326e:	f44f 52bc 	mov.w	r2, #6016	@ 0x1780
 8003272:	601a      	str	r2, [r3, #0]
    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003282:	601a      	str	r2, [r3, #0]
    debug_info = 6017;
 8003284:	4b5e      	ldr	r3, [pc, #376]	@ (8003400 <HAL_I2C_Mem_Read+0x244>)
 8003286:	f241 7281 	movw	r2, #6017	@ 0x1781
 800328a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2222      	movs	r2, #34	@ 0x22
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2240      	movs	r2, #64	@ 0x40
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	641a      	str	r2, [r3, #64]	@ 0x40
    debug_info = 6018;
 80032a2:	4b57      	ldr	r3, [pc, #348]	@ (8003400 <HAL_I2C_Mem_Read+0x244>)
 80032a4:	f241 7282 	movw	r2, #6018	@ 0x1782
 80032a8:	601a      	str	r2, [r3, #0]
    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a51      	ldr	r2, [pc, #324]	@ (8003408 <HAL_I2C_Mem_Read+0x24c>)
 80032c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    debug_info = 602;
 80032c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003400 <HAL_I2C_Mem_Read+0x244>)
 80032c8:	f240 225a 	movw	r2, #602	@ 0x25a
 80032cc:	601a      	str	r2, [r3, #0]
    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032ce:	88f8      	ldrh	r0, [r7, #6]
 80032d0:	893a      	ldrh	r2, [r7, #8]
 80032d2:	8979      	ldrh	r1, [r7, #10]
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4603      	mov	r3, r0
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fab2 	bl	8003848 <I2C_RequestMemoryRead>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Mem_Read+0x132>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e20f      	b.n	800370e <HAL_I2C_Mem_Read+0x552>
    }

    if (hi2c->XferSize == 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d113      	bne.n	800331e <HAL_I2C_Mem_Read+0x162>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e058      	b.n	80033d0 <HAL_I2C_Mem_Read+0x214>
    }
    else if (hi2c->XferSize == 1U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003322:	2b01      	cmp	r3, #1
 8003324:	d11e      	bne.n	8003364 <HAL_I2C_Mem_Read+0x1a8>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003334:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003336:	b672      	cpsid	i
}
 8003338:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003360:	b662      	cpsie	i
}
 8003362:	e035      	b.n	80033d0 <HAL_I2C_Mem_Read+0x214>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003368:	2b02      	cmp	r3, #2
 800336a:	d11e      	bne.n	80033aa <HAL_I2C_Mem_Read+0x1ee>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800337a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800337c:	b672      	cpsid	i
}
 800337e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033a6:	b662      	cpsie	i
}
 80033a8:	e012      	b.n	80033d0 <HAL_I2C_Mem_Read+0x214>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033b8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	693b      	ldr	r3, [r7, #16]
    }
    debug_info = 603;
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_I2C_Mem_Read+0x244>)
 80033d2:	f240 225b 	movw	r2, #603	@ 0x25b
 80033d6:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 80033d8:	e181      	b.n	80036de <HAL_I2C_Mem_Read+0x522>
    {
      if (hi2c->XferSize <= 3U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033de:	2b03      	cmp	r3, #3
 80033e0:	f200 8122 	bhi.w	8003628 <HAL_I2C_Mem_Read+0x46c>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d129      	bne.n	8003440 <HAL_I2C_Mem_Read+0x284>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fcbb 	bl	8003d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e186      	b.n	800370e <HAL_I2C_Mem_Read+0x552>
 8003400:	200007fc 	.word	0x200007fc
 8003404:	00100002 	.word	0x00100002
 8003408:	ffff0000 	.word	0xffff0000
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800343e:	e14e      	b.n	80036de <HAL_I2C_Mem_Read+0x522>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003444:	2b02      	cmp	r3, #2
 8003446:	d14b      	bne.n	80034e0 <HAL_I2C_Mem_Read+0x324>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344e:	2200      	movs	r2, #0
 8003450:	497c      	ldr	r1, [pc, #496]	@ (8003644 <HAL_I2C_Mem_Read+0x488>)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fae0 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_I2C_Mem_Read+0x2a6>
          {
            return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e155      	b.n	800370e <HAL_I2C_Mem_Read+0x552>
  __ASM volatile ("cpsid i" : : : "memory");
 8003462:	b672      	cpsid	i
}
 8003464:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003474:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034a8:	b662      	cpsie	i
}
 80034aa:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034de:	e0fe      	b.n	80036de <HAL_I2C_Mem_Read+0x522>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e6:	2200      	movs	r2, #0
 80034e8:	4956      	ldr	r1, [pc, #344]	@ (8003644 <HAL_I2C_Mem_Read+0x488>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fa94 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Mem_Read+0x33e>
          {
            return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e109      	b.n	800370e <HAL_I2C_Mem_Read+0x552>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003508:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800350a:	b672      	cpsid	i
}
 800350c:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003540:	4b41      	ldr	r3, [pc, #260]	@ (8003648 <HAL_I2C_Mem_Read+0x48c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	08db      	lsrs	r3, r3, #3
 8003546:	4a41      	ldr	r2, [pc, #260]	@ (800364c <HAL_I2C_Mem_Read+0x490>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	0a1a      	lsrs	r2, r3, #8
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00da      	lsls	r2, r3, #3
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	3b01      	subs	r3, #1
 800355e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_I2C_Mem_Read+0x3dc>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	f043 0220 	orr.w	r2, r3, #32
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003588:	b662      	cpsie	i
}
 800358a:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0ba      	b.n	800370e <HAL_I2C_Mem_Read+0x552>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d1d9      	bne.n	800355a <HAL_I2C_Mem_Read+0x39e>
          debug_info = 604;
 80035a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003650 <HAL_I2C_Mem_Read+0x494>)
 80035a8:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 80035ac:	601a      	str	r2, [r3, #0]
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035bc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035f0:	b662      	cpsie	i
}
 80035f2:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003626:	e05a      	b.n	80036de <HAL_I2C_Mem_Read+0x522>
        }
      }
      else
      {
    	  debug_info = 605;
 8003628:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <HAL_I2C_Mem_Read+0x494>)
 800362a:	f240 225d 	movw	r2, #605	@ 0x25d
 800362e:	601a      	str	r2, [r3, #0]
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003632:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fb99 	bl	8003d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_I2C_Mem_Read+0x498>
        {
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e064      	b.n	800370e <HAL_I2C_Mem_Read+0x552>
 8003644:	00010004 	.word	0x00010004
 8003648:	20000088 	.word	0x20000088
 800364c:	14f8b589 	.word	0x14f8b589
 8003650:	200007fc 	.word	0x200007fc
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b04      	cmp	r3, #4
 8003692:	d124      	bne.n	80036de <HAL_I2C_Mem_Read+0x522>
        {
          if (hi2c->XferSize == 3U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003698:	2b03      	cmp	r3, #3
 800369a:	d107      	bne.n	80036ac <HAL_I2C_Mem_Read+0x4f0>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036aa:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f47f ae79 	bne.w	80033da <HAL_I2C_Mem_Read+0x21e>
        }
      }
    }
    debug_info = 606;
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <HAL_I2C_Mem_Read+0x55c>)
 80036ea:	f240 225e 	movw	r2, #606	@ 0x25e
 80036ee:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_I2C_Mem_Read+0x552>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3728      	adds	r7, #40	@ 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200007fc 	.word	0x200007fc

0800371c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	4608      	mov	r0, r1
 8003726:	4611      	mov	r1, r2
 8003728:	461a      	mov	r2, r3
 800372a:	4603      	mov	r3, r0
 800372c:	817b      	strh	r3, [r7, #10]
 800372e:	460b      	mov	r3, r1
 8003730:	813b      	strh	r3, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003744:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	2200      	movs	r2, #0
 800374e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f960 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800376c:	d103      	bne.n	8003776 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003774:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e05f      	b.n	800383a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003788:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	6a3a      	ldr	r2, [r7, #32]
 800378e:	492d      	ldr	r1, [pc, #180]	@ (8003844 <I2C_RequestMemoryWrite+0x128>)
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f9bb 	bl	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e04c      	b.n	800383a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b8:	6a39      	ldr	r1, [r7, #32]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fa46 	bl	8003c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d107      	bne.n	80037de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e02b      	b.n	800383a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d105      	bne.n	80037f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037e8:	893b      	ldrh	r3, [r7, #8]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	611a      	str	r2, [r3, #16]
 80037f2:	e021      	b.n	8003838 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037f4:	893b      	ldrh	r3, [r7, #8]
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003804:	6a39      	ldr	r1, [r7, #32]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fa20 	bl	8003c4c <I2C_WaitOnTXEFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	2b04      	cmp	r3, #4
 8003818:	d107      	bne.n	800382a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003828:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e005      	b.n	800383a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800382e:	893b      	ldrh	r3, [r7, #8]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	00010002 	.word	0x00010002

08003848 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	461a      	mov	r2, r3
 8003856:	4603      	mov	r3, r0
 8003858:	817b      	strh	r3, [r7, #10]
 800385a:	460b      	mov	r3, r1
 800385c:	813b      	strh	r3, [r7, #8]
 800385e:	4613      	mov	r3, r2
 8003860:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003870:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003880:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	2200      	movs	r2, #0
 800388a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f8c2 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00d      	beq.n	80038b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a8:	d103      	bne.n	80038b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0aa      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	4952      	ldr	r1, [pc, #328]	@ (8003a14 <I2C_RequestMemoryRead+0x1cc>)
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f91d 	bl	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e097      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f4:	6a39      	ldr	r1, [r7, #32]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f9a8 	bl	8003c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00d      	beq.n	800391e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	2b04      	cmp	r3, #4
 8003908:	d107      	bne.n	800391a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003918:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e076      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003924:	893b      	ldrh	r3, [r7, #8]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	611a      	str	r2, [r3, #16]
 800392e:	e021      	b.n	8003974 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003930:	893b      	ldrh	r3, [r7, #8]
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	b29b      	uxth	r3, r3
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800393e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003940:	6a39      	ldr	r1, [r7, #32]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f982 	bl	8003c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	2b04      	cmp	r3, #4
 8003954:	d107      	bne.n	8003966 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003964:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e050      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800396a:	893b      	ldrh	r3, [r7, #8]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003976:	6a39      	ldr	r1, [r7, #32]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f967 	bl	8003c4c <I2C_WaitOnTXEFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e035      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f82b 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00d      	beq.n	80039e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d6:	d103      	bne.n	80039e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e013      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039e4:	897b      	ldrh	r3, [r7, #10]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	6a3a      	ldr	r2, [r7, #32]
 80039f8:	4906      	ldr	r1, [pc, #24]	@ (8003a14 <I2C_RequestMemoryRead+0x1cc>)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f886 	bl	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	00010002 	.word	0x00010002

08003a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a28:	e048      	b.n	8003abc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d044      	beq.n	8003abc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a32:	f7fe fedf 	bl	80027f4 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d139      	bne.n	8003abc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d10d      	bne.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	e00c      	b.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	43da      	mvns	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d116      	bne.n	8003abc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e023      	b.n	8003b04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10d      	bne.n	8003ae2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	43da      	mvns	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	e00c      	b.n	8003afc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d093      	beq.n	8003a2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b1a:	e071      	b.n	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2a:	d123      	bne.n	8003b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e067      	b.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d041      	beq.n	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fe fe3a 	bl	80027f4 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d136      	bne.n	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	0c1b      	lsrs	r3, r3, #16
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10c      	bne.n	8003bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	bf14      	ite	ne
 8003bae:	2301      	movne	r3, #1
 8003bb0:	2300      	moveq	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	e00b      	b.n	8003bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf14      	ite	ne
 8003bc8:	2301      	movne	r3, #1
 8003bca:	2300      	moveq	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	f043 0220 	orr.w	r2, r3, #32
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e021      	b.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d10c      	bne.n	8003c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e00b      	b.n	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bf14      	ite	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	2300      	moveq	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f47f af6d 	bne.w	8003b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c58:	e034      	b.n	8003cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f8e3 	bl	8003e26 <I2C_IsAcknowledgeFailed>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e034      	b.n	8003cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d028      	beq.n	8003cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fe fdbf 	bl	80027f4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d11d      	bne.n	8003cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c92:	2b80      	cmp	r3, #128	@ 0x80
 8003c94:	d016      	beq.n	8003cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e007      	b.n	8003cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cce:	2b80      	cmp	r3, #128	@ 0x80
 8003cd0:	d1c3      	bne.n	8003c5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ce8:	e034      	b.n	8003d54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f89b 	bl	8003e26 <I2C_IsAcknowledgeFailed>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e034      	b.n	8003d64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d028      	beq.n	8003d54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7fe fd77 	bl	80027f4 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11d      	bne.n	8003d54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d016      	beq.n	8003d54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e007      	b.n	8003d64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d1c3      	bne.n	8003cea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d78:	e049      	b.n	8003e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d119      	bne.n	8003dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0210 	mvn.w	r2, #16
 8003d90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e030      	b.n	8003e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbc:	f7fe fd1a 	bl	80027f4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d302      	bcc.n	8003dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d11d      	bne.n	8003e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ddc:	2b40      	cmp	r3, #64	@ 0x40
 8003dde:	d016      	beq.n	8003e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e007      	b.n	8003e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e18:	2b40      	cmp	r3, #64	@ 0x40
 8003e1a:	d1ae      	bne.n	8003d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3c:	d11b      	bne.n	8003e76 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e46:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	f043 0204 	orr.w	r2, r3, #4
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e272      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8087 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ea4:	4b92      	ldr	r3, [pc, #584]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d00c      	beq.n	8003eca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003eb0:	4b8f      	ldr	r3, [pc, #572]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d112      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x5e>
 8003ebc:	4b8c      	ldr	r3, [pc, #560]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eca:	4b89      	ldr	r3, [pc, #548]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d06c      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x12c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d168      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e24c      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eea:	d106      	bne.n	8003efa <HAL_RCC_OscConfig+0x76>
 8003eec:	4b80      	ldr	r3, [pc, #512]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a7f      	ldr	r2, [pc, #508]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	e02e      	b.n	8003f58 <HAL_RCC_OscConfig+0xd4>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x98>
 8003f02:	4b7b      	ldr	r3, [pc, #492]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a7a      	ldr	r2, [pc, #488]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b78      	ldr	r3, [pc, #480]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a77      	ldr	r2, [pc, #476]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e01d      	b.n	8003f58 <HAL_RCC_OscConfig+0xd4>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCC_OscConfig+0xbc>
 8003f26:	4b72      	ldr	r3, [pc, #456]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a71      	ldr	r2, [pc, #452]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4b6f      	ldr	r3, [pc, #444]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a6e      	ldr	r2, [pc, #440]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e00b      	b.n	8003f58 <HAL_RCC_OscConfig+0xd4>
 8003f40:	4b6b      	ldr	r3, [pc, #428]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a6a      	ldr	r2, [pc, #424]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	4b68      	ldr	r3, [pc, #416]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a67      	ldr	r2, [pc, #412]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d013      	beq.n	8003f88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fe fc48 	bl	80027f4 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f68:	f7fe fc44 	bl	80027f4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	@ 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e200      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0xe4>
 8003f86:	e014      	b.n	8003fb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fe fc34 	bl	80027f4 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f90:	f7fe fc30 	bl	80027f4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	@ 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e1ec      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa2:	4b53      	ldr	r3, [pc, #332]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x10c>
 8003fae:	e000      	b.n	8003fb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d063      	beq.n	8004086 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fbe:	4b4c      	ldr	r3, [pc, #304]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fca:	4b49      	ldr	r3, [pc, #292]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d11c      	bne.n	8004010 <HAL_RCC_OscConfig+0x18c>
 8003fd6:	4b46      	ldr	r3, [pc, #280]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d116      	bne.n	8004010 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe2:	4b43      	ldr	r3, [pc, #268]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_RCC_OscConfig+0x176>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d001      	beq.n	8003ffa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e1c0      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4939      	ldr	r1, [pc, #228]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400e:	e03a      	b.n	8004086 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d020      	beq.n	800405a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004018:	4b36      	ldr	r3, [pc, #216]	@ (80040f4 <HAL_RCC_OscConfig+0x270>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401e:	f7fe fbe9 	bl	80027f4 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004026:	f7fe fbe5 	bl	80027f4 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e1a1      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004038:	4b2d      	ldr	r3, [pc, #180]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004044:	4b2a      	ldr	r3, [pc, #168]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4927      	ldr	r1, [pc, #156]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]
 8004058:	e015      	b.n	8004086 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800405a:	4b26      	ldr	r3, [pc, #152]	@ (80040f4 <HAL_RCC_OscConfig+0x270>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fe fbc8 	bl	80027f4 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004068:	f7fe fbc4 	bl	80027f4 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e180      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407a:	4b1d      	ldr	r3, [pc, #116]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d03a      	beq.n	8004108 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d019      	beq.n	80040ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800409a:	4b17      	ldr	r3, [pc, #92]	@ (80040f8 <HAL_RCC_OscConfig+0x274>)
 800409c:	2201      	movs	r2, #1
 800409e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a0:	f7fe fba8 	bl	80027f4 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a8:	f7fe fba4 	bl	80027f4 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e160      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ba:	4b0d      	ldr	r3, [pc, #52]	@ (80040f0 <HAL_RCC_OscConfig+0x26c>)
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040c6:	2001      	movs	r0, #1
 80040c8:	f000 faba 	bl	8004640 <RCC_Delay>
 80040cc:	e01c      	b.n	8004108 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ce:	4b0a      	ldr	r3, [pc, #40]	@ (80040f8 <HAL_RCC_OscConfig+0x274>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d4:	f7fe fb8e 	bl	80027f4 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040da:	e00f      	b.n	80040fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040dc:	f7fe fb8a 	bl	80027f4 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d908      	bls.n	80040fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e146      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000
 80040f4:	42420000 	.word	0x42420000
 80040f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	4b92      	ldr	r3, [pc, #584]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e9      	bne.n	80040dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80a6 	beq.w	8004262 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411a:	4b8b      	ldr	r3, [pc, #556]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10d      	bne.n	8004142 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	4b88      	ldr	r3, [pc, #544]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	4a87      	ldr	r2, [pc, #540]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004130:	61d3      	str	r3, [r2, #28]
 8004132:	4b85      	ldr	r3, [pc, #532]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413e:	2301      	movs	r3, #1
 8004140:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004142:	4b82      	ldr	r3, [pc, #520]	@ (800434c <HAL_RCC_OscConfig+0x4c8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d118      	bne.n	8004180 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800414e:	4b7f      	ldr	r3, [pc, #508]	@ (800434c <HAL_RCC_OscConfig+0x4c8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a7e      	ldr	r2, [pc, #504]	@ (800434c <HAL_RCC_OscConfig+0x4c8>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415a:	f7fe fb4b 	bl	80027f4 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004162:	f7fe fb47 	bl	80027f4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b64      	cmp	r3, #100	@ 0x64
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e103      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004174:	4b75      	ldr	r3, [pc, #468]	@ (800434c <HAL_RCC_OscConfig+0x4c8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d106      	bne.n	8004196 <HAL_RCC_OscConfig+0x312>
 8004188:	4b6f      	ldr	r3, [pc, #444]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	4a6e      	ldr	r2, [pc, #440]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	6213      	str	r3, [r2, #32]
 8004194:	e02d      	b.n	80041f2 <HAL_RCC_OscConfig+0x36e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x334>
 800419e:	4b6a      	ldr	r3, [pc, #424]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4a69      	ldr	r2, [pc, #420]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	6213      	str	r3, [r2, #32]
 80041aa:	4b67      	ldr	r3, [pc, #412]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	4a66      	ldr	r2, [pc, #408]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041b0:	f023 0304 	bic.w	r3, r3, #4
 80041b4:	6213      	str	r3, [r2, #32]
 80041b6:	e01c      	b.n	80041f2 <HAL_RCC_OscConfig+0x36e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b05      	cmp	r3, #5
 80041be:	d10c      	bne.n	80041da <HAL_RCC_OscConfig+0x356>
 80041c0:	4b61      	ldr	r3, [pc, #388]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4a60      	ldr	r2, [pc, #384]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041c6:	f043 0304 	orr.w	r3, r3, #4
 80041ca:	6213      	str	r3, [r2, #32]
 80041cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6213      	str	r3, [r2, #32]
 80041d8:	e00b      	b.n	80041f2 <HAL_RCC_OscConfig+0x36e>
 80041da:	4b5b      	ldr	r3, [pc, #364]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	4a5a      	ldr	r2, [pc, #360]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	6213      	str	r3, [r2, #32]
 80041e6:	4b58      	ldr	r3, [pc, #352]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	4a57      	ldr	r2, [pc, #348]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	f023 0304 	bic.w	r3, r3, #4
 80041f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d015      	beq.n	8004226 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fa:	f7fe fafb 	bl	80027f4 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004200:	e00a      	b.n	8004218 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004202:	f7fe faf7 	bl	80027f4 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004210:	4293      	cmp	r3, r2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e0b1      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004218:	4b4b      	ldr	r3, [pc, #300]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ee      	beq.n	8004202 <HAL_RCC_OscConfig+0x37e>
 8004224:	e014      	b.n	8004250 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004226:	f7fe fae5 	bl	80027f4 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422c:	e00a      	b.n	8004244 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422e:	f7fe fae1 	bl	80027f4 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423c:	4293      	cmp	r3, r2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e09b      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004244:	4b40      	ldr	r3, [pc, #256]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ee      	bne.n	800422e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d105      	bne.n	8004262 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004256:	4b3c      	ldr	r3, [pc, #240]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	4a3b      	ldr	r2, [pc, #236]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 800425c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004260:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 8087 	beq.w	800437a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800426c:	4b36      	ldr	r3, [pc, #216]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d061      	beq.n	800433c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d146      	bne.n	800430e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004280:	4b33      	ldr	r3, [pc, #204]	@ (8004350 <HAL_RCC_OscConfig+0x4cc>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004286:	f7fe fab5 	bl	80027f4 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428e:	f7fe fab1 	bl	80027f4 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e06d      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042a0:	4b29      	ldr	r3, [pc, #164]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b4:	d108      	bne.n	80042c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042b6:	4b24      	ldr	r3, [pc, #144]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	4921      	ldr	r1, [pc, #132]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a19      	ldr	r1, [r3, #32]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	430b      	orrs	r3, r1
 80042da:	491b      	ldr	r1, [pc, #108]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004350 <HAL_RCC_OscConfig+0x4cc>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e6:	f7fe fa85 	bl	80027f4 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fe fa81 	bl	80027f4 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e03d      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004300:	4b11      	ldr	r3, [pc, #68]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x46a>
 800430c:	e035      	b.n	800437a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b10      	ldr	r3, [pc, #64]	@ (8004350 <HAL_RCC_OscConfig+0x4cc>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fe fa6e 	bl	80027f4 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431c:	f7fe fa6a 	bl	80027f4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e026      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800432e:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <HAL_RCC_OscConfig+0x4c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x498>
 800433a:	e01e      	b.n	800437a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e019      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
 8004348:	40021000 	.word	0x40021000
 800434c:	40007000 	.word	0x40007000
 8004350:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004354:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <HAL_RCC_OscConfig+0x500>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	429a      	cmp	r2, r3
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000

08004388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0d0      	b.n	800453e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800439c:	4b6a      	ldr	r3, [pc, #424]	@ (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d910      	bls.n	80043cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b67      	ldr	r3, [pc, #412]	@ (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 0207 	bic.w	r2, r3, #7
 80043b2:	4965      	ldr	r1, [pc, #404]	@ (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b63      	ldr	r3, [pc, #396]	@ (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0b8      	b.n	800453e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e4:	4b59      	ldr	r3, [pc, #356]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a58      	ldr	r2, [pc, #352]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 80043ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043fc:	4b53      	ldr	r3, [pc, #332]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4a52      	ldr	r2, [pc, #328]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004402:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004406:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004408:	4b50      	ldr	r3, [pc, #320]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	494d      	ldr	r1, [pc, #308]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004416:	4313      	orrs	r3, r2
 8004418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d040      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b47      	ldr	r3, [pc, #284]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d115      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07f      	b.n	800453e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	4b41      	ldr	r3, [pc, #260]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e073      	b.n	800453e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004456:	4b3d      	ldr	r3, [pc, #244]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e06b      	b.n	800453e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004466:	4b39      	ldr	r3, [pc, #228]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f023 0203 	bic.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4936      	ldr	r1, [pc, #216]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004478:	f7fe f9bc 	bl	80027f4 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	e00a      	b.n	8004496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004480:	f7fe f9b8 	bl	80027f4 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e053      	b.n	800453e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	4b2d      	ldr	r3, [pc, #180]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 020c 	and.w	r2, r3, #12
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1eb      	bne.n	8004480 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b27      	ldr	r3, [pc, #156]	@ (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d210      	bcs.n	80044d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b24      	ldr	r3, [pc, #144]	@ (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 0207 	bic.w	r2, r3, #7
 80044be:	4922      	ldr	r1, [pc, #136]	@ (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b20      	ldr	r3, [pc, #128]	@ (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e032      	b.n	800453e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e4:	4b19      	ldr	r3, [pc, #100]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4916      	ldr	r1, [pc, #88]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004502:	4b12      	ldr	r3, [pc, #72]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	490e      	ldr	r1, [pc, #56]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004516:	f000 f821 	bl	800455c <HAL_RCC_GetSysClockFreq>
 800451a:	4602      	mov	r2, r0
 800451c:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	490a      	ldr	r1, [pc, #40]	@ (8004550 <HAL_RCC_ClockConfig+0x1c8>)
 8004528:	5ccb      	ldrb	r3, [r1, r3]
 800452a:	fa22 f303 	lsr.w	r3, r2, r3
 800452e:	4a09      	ldr	r2, [pc, #36]	@ (8004554 <HAL_RCC_ClockConfig+0x1cc>)
 8004530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004532:	4b09      	ldr	r3, [pc, #36]	@ (8004558 <HAL_RCC_ClockConfig+0x1d0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe f91a 	bl	8002770 <HAL_InitTick>

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40022000 	.word	0x40022000
 800454c:	40021000 	.word	0x40021000
 8004550:	08005774 	.word	0x08005774
 8004554:	20000088 	.word	0x20000088
 8004558:	2000008c 	.word	0x2000008c

0800455c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	2300      	movs	r3, #0
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	2300      	movs	r3, #0
 8004570:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004576:	4b1e      	ldr	r3, [pc, #120]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b04      	cmp	r3, #4
 8004584:	d002      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0x30>
 8004586:	2b08      	cmp	r3, #8
 8004588:	d003      	beq.n	8004592 <HAL_RCC_GetSysClockFreq+0x36>
 800458a:	e027      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800458c:	4b19      	ldr	r3, [pc, #100]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800458e:	613b      	str	r3, [r7, #16]
      break;
 8004590:	e027      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	0c9b      	lsrs	r3, r3, #18
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	4a17      	ldr	r2, [pc, #92]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800459c:	5cd3      	ldrb	r3, [r2, r3]
 800459e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d010      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045aa:	4b11      	ldr	r3, [pc, #68]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	0c5b      	lsrs	r3, r3, #17
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	4a11      	ldr	r2, [pc, #68]	@ (80045fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80045b6:	5cd3      	ldrb	r3, [r2, r3]
 80045b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a0d      	ldr	r2, [pc, #52]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80045be:	fb03 f202 	mul.w	r2, r3, r2
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e004      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004600 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045d0:	fb02 f303 	mul.w	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	613b      	str	r3, [r7, #16]
      break;
 80045da:	e002      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80045de:	613b      	str	r3, [r7, #16]
      break;
 80045e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e2:	693b      	ldr	r3, [r7, #16]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000
 80045f4:	007a1200 	.word	0x007a1200
 80045f8:	0800578c 	.word	0x0800578c
 80045fc:	0800579c 	.word	0x0800579c
 8004600:	003d0900 	.word	0x003d0900

08004604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004608:	4b02      	ldr	r3, [pc, #8]	@ (8004614 <HAL_RCC_GetHCLKFreq+0x10>)
 800460a:	681b      	ldr	r3, [r3, #0]
}
 800460c:	4618      	mov	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr
 8004614:	20000088 	.word	0x20000088

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800461c:	f7ff fff2 	bl	8004604 <HAL_RCC_GetHCLKFreq>
 8004620:	4602      	mov	r2, r0
 8004622:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4903      	ldr	r1, [pc, #12]	@ (800463c <HAL_RCC_GetPCLK1Freq+0x24>)
 800462e:	5ccb      	ldrb	r3, [r1, r3]
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40021000 	.word	0x40021000
 800463c:	08005784 	.word	0x08005784

08004640 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004648:	4b0a      	ldr	r3, [pc, #40]	@ (8004674 <RCC_Delay+0x34>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a0a      	ldr	r2, [pc, #40]	@ (8004678 <RCC_Delay+0x38>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	0a5b      	lsrs	r3, r3, #9
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800465c:	bf00      	nop
  }
  while (Delay --);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1e5a      	subs	r2, r3, #1
 8004662:	60fa      	str	r2, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f9      	bne.n	800465c <RCC_Delay+0x1c>
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	20000088 	.word	0x20000088
 8004678:	10624dd3 	.word	0x10624dd3

0800467c <rand>:
 800467c:	4b16      	ldr	r3, [pc, #88]	@ (80046d8 <rand+0x5c>)
 800467e:	b510      	push	{r4, lr}
 8004680:	681c      	ldr	r4, [r3, #0]
 8004682:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004684:	b9b3      	cbnz	r3, 80046b4 <rand+0x38>
 8004686:	2018      	movs	r0, #24
 8004688:	f000 fa1e 	bl	8004ac8 <malloc>
 800468c:	4602      	mov	r2, r0
 800468e:	6320      	str	r0, [r4, #48]	@ 0x30
 8004690:	b920      	cbnz	r0, 800469c <rand+0x20>
 8004692:	2152      	movs	r1, #82	@ 0x52
 8004694:	4b11      	ldr	r3, [pc, #68]	@ (80046dc <rand+0x60>)
 8004696:	4812      	ldr	r0, [pc, #72]	@ (80046e0 <rand+0x64>)
 8004698:	f000 f9b0 	bl	80049fc <__assert_func>
 800469c:	4911      	ldr	r1, [pc, #68]	@ (80046e4 <rand+0x68>)
 800469e:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <rand+0x6c>)
 80046a0:	e9c0 1300 	strd	r1, r3, [r0]
 80046a4:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <rand+0x70>)
 80046a6:	2100      	movs	r1, #0
 80046a8:	6083      	str	r3, [r0, #8]
 80046aa:	230b      	movs	r3, #11
 80046ac:	8183      	strh	r3, [r0, #12]
 80046ae:	2001      	movs	r0, #1
 80046b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80046b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80046b6:	480e      	ldr	r0, [pc, #56]	@ (80046f0 <rand+0x74>)
 80046b8:	690b      	ldr	r3, [r1, #16]
 80046ba:	694c      	ldr	r4, [r1, #20]
 80046bc:	4358      	muls	r0, r3
 80046be:	4a0d      	ldr	r2, [pc, #52]	@ (80046f4 <rand+0x78>)
 80046c0:	fb02 0004 	mla	r0, r2, r4, r0
 80046c4:	fba3 3202 	umull	r3, r2, r3, r2
 80046c8:	3301      	adds	r3, #1
 80046ca:	eb40 0002 	adc.w	r0, r0, r2
 80046ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80046d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80046d6:	bd10      	pop	{r4, pc}
 80046d8:	200000a0 	.word	0x200000a0
 80046dc:	0800579e 	.word	0x0800579e
 80046e0:	080057b5 	.word	0x080057b5
 80046e4:	abcd330e 	.word	0xabcd330e
 80046e8:	e66d1234 	.word	0xe66d1234
 80046ec:	0005deec 	.word	0x0005deec
 80046f0:	5851f42d 	.word	0x5851f42d
 80046f4:	4c957f2d 	.word	0x4c957f2d

080046f8 <std>:
 80046f8:	2300      	movs	r3, #0
 80046fa:	b510      	push	{r4, lr}
 80046fc:	4604      	mov	r4, r0
 80046fe:	e9c0 3300 	strd	r3, r3, [r0]
 8004702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004706:	6083      	str	r3, [r0, #8]
 8004708:	8181      	strh	r1, [r0, #12]
 800470a:	6643      	str	r3, [r0, #100]	@ 0x64
 800470c:	81c2      	strh	r2, [r0, #14]
 800470e:	6183      	str	r3, [r0, #24]
 8004710:	4619      	mov	r1, r3
 8004712:	2208      	movs	r2, #8
 8004714:	305c      	adds	r0, #92	@ 0x5c
 8004716:	f000 f8f4 	bl	8004902 <memset>
 800471a:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <std+0x58>)
 800471c:	6224      	str	r4, [r4, #32]
 800471e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004720:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <std+0x5c>)
 8004722:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004724:	4b0c      	ldr	r3, [pc, #48]	@ (8004758 <std+0x60>)
 8004726:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004728:	4b0c      	ldr	r3, [pc, #48]	@ (800475c <std+0x64>)
 800472a:	6323      	str	r3, [r4, #48]	@ 0x30
 800472c:	4b0c      	ldr	r3, [pc, #48]	@ (8004760 <std+0x68>)
 800472e:	429c      	cmp	r4, r3
 8004730:	d006      	beq.n	8004740 <std+0x48>
 8004732:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004736:	4294      	cmp	r4, r2
 8004738:	d002      	beq.n	8004740 <std+0x48>
 800473a:	33d0      	adds	r3, #208	@ 0xd0
 800473c:	429c      	cmp	r4, r3
 800473e:	d105      	bne.n	800474c <std+0x54>
 8004740:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004748:	f000 b954 	b.w	80049f4 <__retarget_lock_init_recursive>
 800474c:	bd10      	pop	{r4, pc}
 800474e:	bf00      	nop
 8004750:	0800487d 	.word	0x0800487d
 8004754:	0800489f 	.word	0x0800489f
 8004758:	080048d7 	.word	0x080048d7
 800475c:	080048fb 	.word	0x080048fb
 8004760:	20000818 	.word	0x20000818

08004764 <stdio_exit_handler>:
 8004764:	4a02      	ldr	r2, [pc, #8]	@ (8004770 <stdio_exit_handler+0xc>)
 8004766:	4903      	ldr	r1, [pc, #12]	@ (8004774 <stdio_exit_handler+0x10>)
 8004768:	4803      	ldr	r0, [pc, #12]	@ (8004778 <stdio_exit_handler+0x14>)
 800476a:	f000 b869 	b.w	8004840 <_fwalk_sglue>
 800476e:	bf00      	nop
 8004770:	20000094 	.word	0x20000094
 8004774:	08004d35 	.word	0x08004d35
 8004778:	200000a4 	.word	0x200000a4

0800477c <cleanup_stdio>:
 800477c:	6841      	ldr	r1, [r0, #4]
 800477e:	4b0c      	ldr	r3, [pc, #48]	@ (80047b0 <cleanup_stdio+0x34>)
 8004780:	b510      	push	{r4, lr}
 8004782:	4299      	cmp	r1, r3
 8004784:	4604      	mov	r4, r0
 8004786:	d001      	beq.n	800478c <cleanup_stdio+0x10>
 8004788:	f000 fad4 	bl	8004d34 <_fflush_r>
 800478c:	68a1      	ldr	r1, [r4, #8]
 800478e:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <cleanup_stdio+0x38>)
 8004790:	4299      	cmp	r1, r3
 8004792:	d002      	beq.n	800479a <cleanup_stdio+0x1e>
 8004794:	4620      	mov	r0, r4
 8004796:	f000 facd 	bl	8004d34 <_fflush_r>
 800479a:	68e1      	ldr	r1, [r4, #12]
 800479c:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <cleanup_stdio+0x3c>)
 800479e:	4299      	cmp	r1, r3
 80047a0:	d004      	beq.n	80047ac <cleanup_stdio+0x30>
 80047a2:	4620      	mov	r0, r4
 80047a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a8:	f000 bac4 	b.w	8004d34 <_fflush_r>
 80047ac:	bd10      	pop	{r4, pc}
 80047ae:	bf00      	nop
 80047b0:	20000818 	.word	0x20000818
 80047b4:	20000880 	.word	0x20000880
 80047b8:	200008e8 	.word	0x200008e8

080047bc <global_stdio_init.part.0>:
 80047bc:	b510      	push	{r4, lr}
 80047be:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <global_stdio_init.part.0+0x30>)
 80047c0:	4c0b      	ldr	r4, [pc, #44]	@ (80047f0 <global_stdio_init.part.0+0x34>)
 80047c2:	4a0c      	ldr	r2, [pc, #48]	@ (80047f4 <global_stdio_init.part.0+0x38>)
 80047c4:	4620      	mov	r0, r4
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	2104      	movs	r1, #4
 80047ca:	2200      	movs	r2, #0
 80047cc:	f7ff ff94 	bl	80046f8 <std>
 80047d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047d4:	2201      	movs	r2, #1
 80047d6:	2109      	movs	r1, #9
 80047d8:	f7ff ff8e 	bl	80046f8 <std>
 80047dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047e0:	2202      	movs	r2, #2
 80047e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e6:	2112      	movs	r1, #18
 80047e8:	f7ff bf86 	b.w	80046f8 <std>
 80047ec:	20000950 	.word	0x20000950
 80047f0:	20000818 	.word	0x20000818
 80047f4:	08004765 	.word	0x08004765

080047f8 <__sfp_lock_acquire>:
 80047f8:	4801      	ldr	r0, [pc, #4]	@ (8004800 <__sfp_lock_acquire+0x8>)
 80047fa:	f000 b8fc 	b.w	80049f6 <__retarget_lock_acquire_recursive>
 80047fe:	bf00      	nop
 8004800:	20000959 	.word	0x20000959

08004804 <__sfp_lock_release>:
 8004804:	4801      	ldr	r0, [pc, #4]	@ (800480c <__sfp_lock_release+0x8>)
 8004806:	f000 b8f7 	b.w	80049f8 <__retarget_lock_release_recursive>
 800480a:	bf00      	nop
 800480c:	20000959 	.word	0x20000959

08004810 <__sinit>:
 8004810:	b510      	push	{r4, lr}
 8004812:	4604      	mov	r4, r0
 8004814:	f7ff fff0 	bl	80047f8 <__sfp_lock_acquire>
 8004818:	6a23      	ldr	r3, [r4, #32]
 800481a:	b11b      	cbz	r3, 8004824 <__sinit+0x14>
 800481c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004820:	f7ff bff0 	b.w	8004804 <__sfp_lock_release>
 8004824:	4b04      	ldr	r3, [pc, #16]	@ (8004838 <__sinit+0x28>)
 8004826:	6223      	str	r3, [r4, #32]
 8004828:	4b04      	ldr	r3, [pc, #16]	@ (800483c <__sinit+0x2c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f5      	bne.n	800481c <__sinit+0xc>
 8004830:	f7ff ffc4 	bl	80047bc <global_stdio_init.part.0>
 8004834:	e7f2      	b.n	800481c <__sinit+0xc>
 8004836:	bf00      	nop
 8004838:	0800477d 	.word	0x0800477d
 800483c:	20000950 	.word	0x20000950

08004840 <_fwalk_sglue>:
 8004840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004844:	4607      	mov	r7, r0
 8004846:	4688      	mov	r8, r1
 8004848:	4614      	mov	r4, r2
 800484a:	2600      	movs	r6, #0
 800484c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004850:	f1b9 0901 	subs.w	r9, r9, #1
 8004854:	d505      	bpl.n	8004862 <_fwalk_sglue+0x22>
 8004856:	6824      	ldr	r4, [r4, #0]
 8004858:	2c00      	cmp	r4, #0
 800485a:	d1f7      	bne.n	800484c <_fwalk_sglue+0xc>
 800485c:	4630      	mov	r0, r6
 800485e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004862:	89ab      	ldrh	r3, [r5, #12]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d907      	bls.n	8004878 <_fwalk_sglue+0x38>
 8004868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800486c:	3301      	adds	r3, #1
 800486e:	d003      	beq.n	8004878 <_fwalk_sglue+0x38>
 8004870:	4629      	mov	r1, r5
 8004872:	4638      	mov	r0, r7
 8004874:	47c0      	blx	r8
 8004876:	4306      	orrs	r6, r0
 8004878:	3568      	adds	r5, #104	@ 0x68
 800487a:	e7e9      	b.n	8004850 <_fwalk_sglue+0x10>

0800487c <__sread>:
 800487c:	b510      	push	{r4, lr}
 800487e:	460c      	mov	r4, r1
 8004880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004884:	f000 f868 	bl	8004958 <_read_r>
 8004888:	2800      	cmp	r0, #0
 800488a:	bfab      	itete	ge
 800488c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800488e:	89a3      	ldrhlt	r3, [r4, #12]
 8004890:	181b      	addge	r3, r3, r0
 8004892:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004896:	bfac      	ite	ge
 8004898:	6563      	strge	r3, [r4, #84]	@ 0x54
 800489a:	81a3      	strhlt	r3, [r4, #12]
 800489c:	bd10      	pop	{r4, pc}

0800489e <__swrite>:
 800489e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a2:	461f      	mov	r7, r3
 80048a4:	898b      	ldrh	r3, [r1, #12]
 80048a6:	4605      	mov	r5, r0
 80048a8:	05db      	lsls	r3, r3, #23
 80048aa:	460c      	mov	r4, r1
 80048ac:	4616      	mov	r6, r2
 80048ae:	d505      	bpl.n	80048bc <__swrite+0x1e>
 80048b0:	2302      	movs	r3, #2
 80048b2:	2200      	movs	r2, #0
 80048b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b8:	f000 f83c 	bl	8004934 <_lseek_r>
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	4632      	mov	r2, r6
 80048c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048c4:	81a3      	strh	r3, [r4, #12]
 80048c6:	4628      	mov	r0, r5
 80048c8:	463b      	mov	r3, r7
 80048ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048d2:	f000 b853 	b.w	800497c <_write_r>

080048d6 <__sseek>:
 80048d6:	b510      	push	{r4, lr}
 80048d8:	460c      	mov	r4, r1
 80048da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048de:	f000 f829 	bl	8004934 <_lseek_r>
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	bf15      	itete	ne
 80048e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048f2:	81a3      	strheq	r3, [r4, #12]
 80048f4:	bf18      	it	ne
 80048f6:	81a3      	strhne	r3, [r4, #12]
 80048f8:	bd10      	pop	{r4, pc}

080048fa <__sclose>:
 80048fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048fe:	f000 b809 	b.w	8004914 <_close_r>

08004902 <memset>:
 8004902:	4603      	mov	r3, r0
 8004904:	4402      	add	r2, r0
 8004906:	4293      	cmp	r3, r2
 8004908:	d100      	bne.n	800490c <memset+0xa>
 800490a:	4770      	bx	lr
 800490c:	f803 1b01 	strb.w	r1, [r3], #1
 8004910:	e7f9      	b.n	8004906 <memset+0x4>
	...

08004914 <_close_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	2300      	movs	r3, #0
 8004918:	4d05      	ldr	r5, [pc, #20]	@ (8004930 <_close_r+0x1c>)
 800491a:	4604      	mov	r4, r0
 800491c:	4608      	mov	r0, r1
 800491e:	602b      	str	r3, [r5, #0]
 8004920:	f7fd fe7d 	bl	800261e <_close>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_close_r+0x1a>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b103      	cbz	r3, 800492e <_close_r+0x1a>
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	20000954 	.word	0x20000954

08004934 <_lseek_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4604      	mov	r4, r0
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	2200      	movs	r2, #0
 800493e:	4d05      	ldr	r5, [pc, #20]	@ (8004954 <_lseek_r+0x20>)
 8004940:	602a      	str	r2, [r5, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	f7fd fe8f 	bl	8002666 <_lseek>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d102      	bne.n	8004952 <_lseek_r+0x1e>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	b103      	cbz	r3, 8004952 <_lseek_r+0x1e>
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	20000954 	.word	0x20000954

08004958 <_read_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4604      	mov	r4, r0
 800495c:	4608      	mov	r0, r1
 800495e:	4611      	mov	r1, r2
 8004960:	2200      	movs	r2, #0
 8004962:	4d05      	ldr	r5, [pc, #20]	@ (8004978 <_read_r+0x20>)
 8004964:	602a      	str	r2, [r5, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	f7fd fe20 	bl	80025ac <_read>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d102      	bne.n	8004976 <_read_r+0x1e>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	b103      	cbz	r3, 8004976 <_read_r+0x1e>
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	20000954 	.word	0x20000954

0800497c <_write_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4604      	mov	r4, r0
 8004980:	4608      	mov	r0, r1
 8004982:	4611      	mov	r1, r2
 8004984:	2200      	movs	r2, #0
 8004986:	4d05      	ldr	r5, [pc, #20]	@ (800499c <_write_r+0x20>)
 8004988:	602a      	str	r2, [r5, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	f7fd fe2b 	bl	80025e6 <_write>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_write_r+0x1e>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_write_r+0x1e>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	20000954 	.word	0x20000954

080049a0 <__errno>:
 80049a0:	4b01      	ldr	r3, [pc, #4]	@ (80049a8 <__errno+0x8>)
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	200000a0 	.word	0x200000a0

080049ac <__libc_init_array>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	2600      	movs	r6, #0
 80049b0:	4d0c      	ldr	r5, [pc, #48]	@ (80049e4 <__libc_init_array+0x38>)
 80049b2:	4c0d      	ldr	r4, [pc, #52]	@ (80049e8 <__libc_init_array+0x3c>)
 80049b4:	1b64      	subs	r4, r4, r5
 80049b6:	10a4      	asrs	r4, r4, #2
 80049b8:	42a6      	cmp	r6, r4
 80049ba:	d109      	bne.n	80049d0 <__libc_init_array+0x24>
 80049bc:	f000 fece 	bl	800575c <_init>
 80049c0:	2600      	movs	r6, #0
 80049c2:	4d0a      	ldr	r5, [pc, #40]	@ (80049ec <__libc_init_array+0x40>)
 80049c4:	4c0a      	ldr	r4, [pc, #40]	@ (80049f0 <__libc_init_array+0x44>)
 80049c6:	1b64      	subs	r4, r4, r5
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	42a6      	cmp	r6, r4
 80049cc:	d105      	bne.n	80049da <__libc_init_array+0x2e>
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d4:	4798      	blx	r3
 80049d6:	3601      	adds	r6, #1
 80049d8:	e7ee      	b.n	80049b8 <__libc_init_array+0xc>
 80049da:	f855 3b04 	ldr.w	r3, [r5], #4
 80049de:	4798      	blx	r3
 80049e0:	3601      	adds	r6, #1
 80049e2:	e7f2      	b.n	80049ca <__libc_init_array+0x1e>
 80049e4:	08005884 	.word	0x08005884
 80049e8:	08005884 	.word	0x08005884
 80049ec:	08005884 	.word	0x08005884
 80049f0:	08005888 	.word	0x08005888

080049f4 <__retarget_lock_init_recursive>:
 80049f4:	4770      	bx	lr

080049f6 <__retarget_lock_acquire_recursive>:
 80049f6:	4770      	bx	lr

080049f8 <__retarget_lock_release_recursive>:
 80049f8:	4770      	bx	lr
	...

080049fc <__assert_func>:
 80049fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049fe:	4614      	mov	r4, r2
 8004a00:	461a      	mov	r2, r3
 8004a02:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <__assert_func+0x2c>)
 8004a04:	4605      	mov	r5, r0
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68d8      	ldr	r0, [r3, #12]
 8004a0a:	b14c      	cbz	r4, 8004a20 <__assert_func+0x24>
 8004a0c:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <__assert_func+0x30>)
 8004a0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a12:	9100      	str	r1, [sp, #0]
 8004a14:	462b      	mov	r3, r5
 8004a16:	4906      	ldr	r1, [pc, #24]	@ (8004a30 <__assert_func+0x34>)
 8004a18:	f000 f9b4 	bl	8004d84 <fiprintf>
 8004a1c:	f000 f9d4 	bl	8004dc8 <abort>
 8004a20:	4b04      	ldr	r3, [pc, #16]	@ (8004a34 <__assert_func+0x38>)
 8004a22:	461c      	mov	r4, r3
 8004a24:	e7f3      	b.n	8004a0e <__assert_func+0x12>
 8004a26:	bf00      	nop
 8004a28:	200000a0 	.word	0x200000a0
 8004a2c:	0800580d 	.word	0x0800580d
 8004a30:	0800581a 	.word	0x0800581a
 8004a34:	08005848 	.word	0x08005848

08004a38 <_free_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4605      	mov	r5, r0
 8004a3c:	2900      	cmp	r1, #0
 8004a3e:	d040      	beq.n	8004ac2 <_free_r+0x8a>
 8004a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a44:	1f0c      	subs	r4, r1, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bfb8      	it	lt
 8004a4a:	18e4      	addlt	r4, r4, r3
 8004a4c:	f000 f8e6 	bl	8004c1c <__malloc_lock>
 8004a50:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <_free_r+0x8c>)
 8004a52:	6813      	ldr	r3, [r2, #0]
 8004a54:	b933      	cbnz	r3, 8004a64 <_free_r+0x2c>
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	6014      	str	r4, [r2, #0]
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a60:	f000 b8e2 	b.w	8004c28 <__malloc_unlock>
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	d908      	bls.n	8004a7a <_free_r+0x42>
 8004a68:	6820      	ldr	r0, [r4, #0]
 8004a6a:	1821      	adds	r1, r4, r0
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	bf01      	itttt	eq
 8004a70:	6819      	ldreq	r1, [r3, #0]
 8004a72:	685b      	ldreq	r3, [r3, #4]
 8004a74:	1809      	addeq	r1, r1, r0
 8004a76:	6021      	streq	r1, [r4, #0]
 8004a78:	e7ed      	b.n	8004a56 <_free_r+0x1e>
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	b10b      	cbz	r3, 8004a84 <_free_r+0x4c>
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	d9fa      	bls.n	8004a7a <_free_r+0x42>
 8004a84:	6811      	ldr	r1, [r2, #0]
 8004a86:	1850      	adds	r0, r2, r1
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d10b      	bne.n	8004aa4 <_free_r+0x6c>
 8004a8c:	6820      	ldr	r0, [r4, #0]
 8004a8e:	4401      	add	r1, r0
 8004a90:	1850      	adds	r0, r2, r1
 8004a92:	4283      	cmp	r3, r0
 8004a94:	6011      	str	r1, [r2, #0]
 8004a96:	d1e0      	bne.n	8004a5a <_free_r+0x22>
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4408      	add	r0, r1
 8004a9e:	6010      	str	r0, [r2, #0]
 8004aa0:	6053      	str	r3, [r2, #4]
 8004aa2:	e7da      	b.n	8004a5a <_free_r+0x22>
 8004aa4:	d902      	bls.n	8004aac <_free_r+0x74>
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	e7d6      	b.n	8004a5a <_free_r+0x22>
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	1821      	adds	r1, r4, r0
 8004ab0:	428b      	cmp	r3, r1
 8004ab2:	bf01      	itttt	eq
 8004ab4:	6819      	ldreq	r1, [r3, #0]
 8004ab6:	685b      	ldreq	r3, [r3, #4]
 8004ab8:	1809      	addeq	r1, r1, r0
 8004aba:	6021      	streq	r1, [r4, #0]
 8004abc:	6063      	str	r3, [r4, #4]
 8004abe:	6054      	str	r4, [r2, #4]
 8004ac0:	e7cb      	b.n	8004a5a <_free_r+0x22>
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	20000960 	.word	0x20000960

08004ac8 <malloc>:
 8004ac8:	4b02      	ldr	r3, [pc, #8]	@ (8004ad4 <malloc+0xc>)
 8004aca:	4601      	mov	r1, r0
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	f000 b825 	b.w	8004b1c <_malloc_r>
 8004ad2:	bf00      	nop
 8004ad4:	200000a0 	.word	0x200000a0

08004ad8 <sbrk_aligned>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	4e0f      	ldr	r6, [pc, #60]	@ (8004b18 <sbrk_aligned+0x40>)
 8004adc:	460c      	mov	r4, r1
 8004ade:	6831      	ldr	r1, [r6, #0]
 8004ae0:	4605      	mov	r5, r0
 8004ae2:	b911      	cbnz	r1, 8004aea <sbrk_aligned+0x12>
 8004ae4:	f000 f960 	bl	8004da8 <_sbrk_r>
 8004ae8:	6030      	str	r0, [r6, #0]
 8004aea:	4621      	mov	r1, r4
 8004aec:	4628      	mov	r0, r5
 8004aee:	f000 f95b 	bl	8004da8 <_sbrk_r>
 8004af2:	1c43      	adds	r3, r0, #1
 8004af4:	d103      	bne.n	8004afe <sbrk_aligned+0x26>
 8004af6:	f04f 34ff 	mov.w	r4, #4294967295
 8004afa:	4620      	mov	r0, r4
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
 8004afe:	1cc4      	adds	r4, r0, #3
 8004b00:	f024 0403 	bic.w	r4, r4, #3
 8004b04:	42a0      	cmp	r0, r4
 8004b06:	d0f8      	beq.n	8004afa <sbrk_aligned+0x22>
 8004b08:	1a21      	subs	r1, r4, r0
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 f94c 	bl	8004da8 <_sbrk_r>
 8004b10:	3001      	adds	r0, #1
 8004b12:	d1f2      	bne.n	8004afa <sbrk_aligned+0x22>
 8004b14:	e7ef      	b.n	8004af6 <sbrk_aligned+0x1e>
 8004b16:	bf00      	nop
 8004b18:	2000095c 	.word	0x2000095c

08004b1c <_malloc_r>:
 8004b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b20:	1ccd      	adds	r5, r1, #3
 8004b22:	f025 0503 	bic.w	r5, r5, #3
 8004b26:	3508      	adds	r5, #8
 8004b28:	2d0c      	cmp	r5, #12
 8004b2a:	bf38      	it	cc
 8004b2c:	250c      	movcc	r5, #12
 8004b2e:	2d00      	cmp	r5, #0
 8004b30:	4606      	mov	r6, r0
 8004b32:	db01      	blt.n	8004b38 <_malloc_r+0x1c>
 8004b34:	42a9      	cmp	r1, r5
 8004b36:	d904      	bls.n	8004b42 <_malloc_r+0x26>
 8004b38:	230c      	movs	r3, #12
 8004b3a:	6033      	str	r3, [r6, #0]
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c18 <_malloc_r+0xfc>
 8004b46:	f000 f869 	bl	8004c1c <__malloc_lock>
 8004b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b4e:	461c      	mov	r4, r3
 8004b50:	bb44      	cbnz	r4, 8004ba4 <_malloc_r+0x88>
 8004b52:	4629      	mov	r1, r5
 8004b54:	4630      	mov	r0, r6
 8004b56:	f7ff ffbf 	bl	8004ad8 <sbrk_aligned>
 8004b5a:	1c43      	adds	r3, r0, #1
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	d158      	bne.n	8004c12 <_malloc_r+0xf6>
 8004b60:	f8d8 4000 	ldr.w	r4, [r8]
 8004b64:	4627      	mov	r7, r4
 8004b66:	2f00      	cmp	r7, #0
 8004b68:	d143      	bne.n	8004bf2 <_malloc_r+0xd6>
 8004b6a:	2c00      	cmp	r4, #0
 8004b6c:	d04b      	beq.n	8004c06 <_malloc_r+0xea>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	4639      	mov	r1, r7
 8004b72:	4630      	mov	r0, r6
 8004b74:	eb04 0903 	add.w	r9, r4, r3
 8004b78:	f000 f916 	bl	8004da8 <_sbrk_r>
 8004b7c:	4581      	cmp	r9, r0
 8004b7e:	d142      	bne.n	8004c06 <_malloc_r+0xea>
 8004b80:	6821      	ldr	r1, [r4, #0]
 8004b82:	4630      	mov	r0, r6
 8004b84:	1a6d      	subs	r5, r5, r1
 8004b86:	4629      	mov	r1, r5
 8004b88:	f7ff ffa6 	bl	8004ad8 <sbrk_aligned>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d03a      	beq.n	8004c06 <_malloc_r+0xea>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	442b      	add	r3, r5
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	f8d8 3000 	ldr.w	r3, [r8]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	bb62      	cbnz	r2, 8004bf8 <_malloc_r+0xdc>
 8004b9e:	f8c8 7000 	str.w	r7, [r8]
 8004ba2:	e00f      	b.n	8004bc4 <_malloc_r+0xa8>
 8004ba4:	6822      	ldr	r2, [r4, #0]
 8004ba6:	1b52      	subs	r2, r2, r5
 8004ba8:	d420      	bmi.n	8004bec <_malloc_r+0xd0>
 8004baa:	2a0b      	cmp	r2, #11
 8004bac:	d917      	bls.n	8004bde <_malloc_r+0xc2>
 8004bae:	1961      	adds	r1, r4, r5
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	6025      	str	r5, [r4, #0]
 8004bb4:	bf18      	it	ne
 8004bb6:	6059      	strne	r1, [r3, #4]
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	bf08      	it	eq
 8004bbc:	f8c8 1000 	streq.w	r1, [r8]
 8004bc0:	5162      	str	r2, [r4, r5]
 8004bc2:	604b      	str	r3, [r1, #4]
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f000 f82f 	bl	8004c28 <__malloc_unlock>
 8004bca:	f104 000b 	add.w	r0, r4, #11
 8004bce:	1d23      	adds	r3, r4, #4
 8004bd0:	f020 0007 	bic.w	r0, r0, #7
 8004bd4:	1ac2      	subs	r2, r0, r3
 8004bd6:	bf1c      	itt	ne
 8004bd8:	1a1b      	subne	r3, r3, r0
 8004bda:	50a3      	strne	r3, [r4, r2]
 8004bdc:	e7af      	b.n	8004b3e <_malloc_r+0x22>
 8004bde:	6862      	ldr	r2, [r4, #4]
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	bf0c      	ite	eq
 8004be4:	f8c8 2000 	streq.w	r2, [r8]
 8004be8:	605a      	strne	r2, [r3, #4]
 8004bea:	e7eb      	b.n	8004bc4 <_malloc_r+0xa8>
 8004bec:	4623      	mov	r3, r4
 8004bee:	6864      	ldr	r4, [r4, #4]
 8004bf0:	e7ae      	b.n	8004b50 <_malloc_r+0x34>
 8004bf2:	463c      	mov	r4, r7
 8004bf4:	687f      	ldr	r7, [r7, #4]
 8004bf6:	e7b6      	b.n	8004b66 <_malloc_r+0x4a>
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	d1fb      	bne.n	8004bf8 <_malloc_r+0xdc>
 8004c00:	2300      	movs	r3, #0
 8004c02:	6053      	str	r3, [r2, #4]
 8004c04:	e7de      	b.n	8004bc4 <_malloc_r+0xa8>
 8004c06:	230c      	movs	r3, #12
 8004c08:	4630      	mov	r0, r6
 8004c0a:	6033      	str	r3, [r6, #0]
 8004c0c:	f000 f80c 	bl	8004c28 <__malloc_unlock>
 8004c10:	e794      	b.n	8004b3c <_malloc_r+0x20>
 8004c12:	6005      	str	r5, [r0, #0]
 8004c14:	e7d6      	b.n	8004bc4 <_malloc_r+0xa8>
 8004c16:	bf00      	nop
 8004c18:	20000960 	.word	0x20000960

08004c1c <__malloc_lock>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	@ (8004c24 <__malloc_lock+0x8>)
 8004c1e:	f7ff beea 	b.w	80049f6 <__retarget_lock_acquire_recursive>
 8004c22:	bf00      	nop
 8004c24:	20000958 	.word	0x20000958

08004c28 <__malloc_unlock>:
 8004c28:	4801      	ldr	r0, [pc, #4]	@ (8004c30 <__malloc_unlock+0x8>)
 8004c2a:	f7ff bee5 	b.w	80049f8 <__retarget_lock_release_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000958 	.word	0x20000958

08004c34 <__sflush_r>:
 8004c34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	0716      	lsls	r6, r2, #28
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	d454      	bmi.n	8004cec <__sflush_r+0xb8>
 8004c42:	684b      	ldr	r3, [r1, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	dc02      	bgt.n	8004c4e <__sflush_r+0x1a>
 8004c48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dd48      	ble.n	8004ce0 <__sflush_r+0xac>
 8004c4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c50:	2e00      	cmp	r6, #0
 8004c52:	d045      	beq.n	8004ce0 <__sflush_r+0xac>
 8004c54:	2300      	movs	r3, #0
 8004c56:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c5a:	682f      	ldr	r7, [r5, #0]
 8004c5c:	6a21      	ldr	r1, [r4, #32]
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	d030      	beq.n	8004cc4 <__sflush_r+0x90>
 8004c62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	0759      	lsls	r1, r3, #29
 8004c68:	d505      	bpl.n	8004c76 <__sflush_r+0x42>
 8004c6a:	6863      	ldr	r3, [r4, #4]
 8004c6c:	1ad2      	subs	r2, r2, r3
 8004c6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c70:	b10b      	cbz	r3, 8004c76 <__sflush_r+0x42>
 8004c72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c74:	1ad2      	subs	r2, r2, r3
 8004c76:	2300      	movs	r3, #0
 8004c78:	4628      	mov	r0, r5
 8004c7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c7c:	6a21      	ldr	r1, [r4, #32]
 8004c7e:	47b0      	blx	r6
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	d106      	bne.n	8004c94 <__sflush_r+0x60>
 8004c86:	6829      	ldr	r1, [r5, #0]
 8004c88:	291d      	cmp	r1, #29
 8004c8a:	d82b      	bhi.n	8004ce4 <__sflush_r+0xb0>
 8004c8c:	4a28      	ldr	r2, [pc, #160]	@ (8004d30 <__sflush_r+0xfc>)
 8004c8e:	40ca      	lsrs	r2, r1
 8004c90:	07d6      	lsls	r6, r2, #31
 8004c92:	d527      	bpl.n	8004ce4 <__sflush_r+0xb0>
 8004c94:	2200      	movs	r2, #0
 8004c96:	6062      	str	r2, [r4, #4]
 8004c98:	6922      	ldr	r2, [r4, #16]
 8004c9a:	04d9      	lsls	r1, r3, #19
 8004c9c:	6022      	str	r2, [r4, #0]
 8004c9e:	d504      	bpl.n	8004caa <__sflush_r+0x76>
 8004ca0:	1c42      	adds	r2, r0, #1
 8004ca2:	d101      	bne.n	8004ca8 <__sflush_r+0x74>
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	b903      	cbnz	r3, 8004caa <__sflush_r+0x76>
 8004ca8:	6560      	str	r0, [r4, #84]	@ 0x54
 8004caa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cac:	602f      	str	r7, [r5, #0]
 8004cae:	b1b9      	cbz	r1, 8004ce0 <__sflush_r+0xac>
 8004cb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cb4:	4299      	cmp	r1, r3
 8004cb6:	d002      	beq.n	8004cbe <__sflush_r+0x8a>
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f7ff febd 	bl	8004a38 <_free_r>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cc2:	e00d      	b.n	8004ce0 <__sflush_r+0xac>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b0      	blx	r6
 8004cca:	4602      	mov	r2, r0
 8004ccc:	1c50      	adds	r0, r2, #1
 8004cce:	d1c9      	bne.n	8004c64 <__sflush_r+0x30>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0c6      	beq.n	8004c64 <__sflush_r+0x30>
 8004cd6:	2b1d      	cmp	r3, #29
 8004cd8:	d001      	beq.n	8004cde <__sflush_r+0xaa>
 8004cda:	2b16      	cmp	r3, #22
 8004cdc:	d11d      	bne.n	8004d1a <__sflush_r+0xe6>
 8004cde:	602f      	str	r7, [r5, #0]
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	e021      	b.n	8004d28 <__sflush_r+0xf4>
 8004ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ce8:	b21b      	sxth	r3, r3
 8004cea:	e01a      	b.n	8004d22 <__sflush_r+0xee>
 8004cec:	690f      	ldr	r7, [r1, #16]
 8004cee:	2f00      	cmp	r7, #0
 8004cf0:	d0f6      	beq.n	8004ce0 <__sflush_r+0xac>
 8004cf2:	0793      	lsls	r3, r2, #30
 8004cf4:	bf18      	it	ne
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	680e      	ldr	r6, [r1, #0]
 8004cfa:	bf08      	it	eq
 8004cfc:	694b      	ldreq	r3, [r1, #20]
 8004cfe:	1bf6      	subs	r6, r6, r7
 8004d00:	600f      	str	r7, [r1, #0]
 8004d02:	608b      	str	r3, [r1, #8]
 8004d04:	2e00      	cmp	r6, #0
 8004d06:	ddeb      	ble.n	8004ce0 <__sflush_r+0xac>
 8004d08:	4633      	mov	r3, r6
 8004d0a:	463a      	mov	r2, r7
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	6a21      	ldr	r1, [r4, #32]
 8004d10:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004d14:	47e0      	blx	ip
 8004d16:	2800      	cmp	r0, #0
 8004d18:	dc07      	bgt.n	8004d2a <__sflush_r+0xf6>
 8004d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d22:	f04f 30ff 	mov.w	r0, #4294967295
 8004d26:	81a3      	strh	r3, [r4, #12]
 8004d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2a:	4407      	add	r7, r0
 8004d2c:	1a36      	subs	r6, r6, r0
 8004d2e:	e7e9      	b.n	8004d04 <__sflush_r+0xd0>
 8004d30:	20400001 	.word	0x20400001

08004d34 <_fflush_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	690b      	ldr	r3, [r1, #16]
 8004d38:	4605      	mov	r5, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	b913      	cbnz	r3, 8004d44 <_fflush_r+0x10>
 8004d3e:	2500      	movs	r5, #0
 8004d40:	4628      	mov	r0, r5
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	b118      	cbz	r0, 8004d4e <_fflush_r+0x1a>
 8004d46:	6a03      	ldr	r3, [r0, #32]
 8004d48:	b90b      	cbnz	r3, 8004d4e <_fflush_r+0x1a>
 8004d4a:	f7ff fd61 	bl	8004810 <__sinit>
 8004d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f3      	beq.n	8004d3e <_fflush_r+0xa>
 8004d56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d58:	07d0      	lsls	r0, r2, #31
 8004d5a:	d404      	bmi.n	8004d66 <_fflush_r+0x32>
 8004d5c:	0599      	lsls	r1, r3, #22
 8004d5e:	d402      	bmi.n	8004d66 <_fflush_r+0x32>
 8004d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d62:	f7ff fe48 	bl	80049f6 <__retarget_lock_acquire_recursive>
 8004d66:	4628      	mov	r0, r5
 8004d68:	4621      	mov	r1, r4
 8004d6a:	f7ff ff63 	bl	8004c34 <__sflush_r>
 8004d6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d70:	4605      	mov	r5, r0
 8004d72:	07da      	lsls	r2, r3, #31
 8004d74:	d4e4      	bmi.n	8004d40 <_fflush_r+0xc>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	059b      	lsls	r3, r3, #22
 8004d7a:	d4e1      	bmi.n	8004d40 <_fflush_r+0xc>
 8004d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d7e:	f7ff fe3b 	bl	80049f8 <__retarget_lock_release_recursive>
 8004d82:	e7dd      	b.n	8004d40 <_fflush_r+0xc>

08004d84 <fiprintf>:
 8004d84:	b40e      	push	{r1, r2, r3}
 8004d86:	b503      	push	{r0, r1, lr}
 8004d88:	4601      	mov	r1, r0
 8004d8a:	ab03      	add	r3, sp, #12
 8004d8c:	4805      	ldr	r0, [pc, #20]	@ (8004da4 <fiprintf+0x20>)
 8004d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d92:	6800      	ldr	r0, [r0, #0]
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	f000 f845 	bl	8004e24 <_vfiprintf_r>
 8004d9a:	b002      	add	sp, #8
 8004d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da0:	b003      	add	sp, #12
 8004da2:	4770      	bx	lr
 8004da4:	200000a0 	.word	0x200000a0

08004da8 <_sbrk_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	2300      	movs	r3, #0
 8004dac:	4d05      	ldr	r5, [pc, #20]	@ (8004dc4 <_sbrk_r+0x1c>)
 8004dae:	4604      	mov	r4, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	f7fd fc64 	bl	8002680 <_sbrk>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d102      	bne.n	8004dc2 <_sbrk_r+0x1a>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	b103      	cbz	r3, 8004dc2 <_sbrk_r+0x1a>
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	bd38      	pop	{r3, r4, r5, pc}
 8004dc4:	20000954 	.word	0x20000954

08004dc8 <abort>:
 8004dc8:	2006      	movs	r0, #6
 8004dca:	b508      	push	{r3, lr}
 8004dcc:	f000 fb8e 	bl	80054ec <raise>
 8004dd0:	2001      	movs	r0, #1
 8004dd2:	f7fd fbe0 	bl	8002596 <_exit>

08004dd6 <__sfputc_r>:
 8004dd6:	6893      	ldr	r3, [r2, #8]
 8004dd8:	b410      	push	{r4}
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	6093      	str	r3, [r2, #8]
 8004de0:	da07      	bge.n	8004df2 <__sfputc_r+0x1c>
 8004de2:	6994      	ldr	r4, [r2, #24]
 8004de4:	42a3      	cmp	r3, r4
 8004de6:	db01      	blt.n	8004dec <__sfputc_r+0x16>
 8004de8:	290a      	cmp	r1, #10
 8004dea:	d102      	bne.n	8004df2 <__sfputc_r+0x1c>
 8004dec:	bc10      	pop	{r4}
 8004dee:	f000 bac1 	b.w	8005374 <__swbuf_r>
 8004df2:	6813      	ldr	r3, [r2, #0]
 8004df4:	1c58      	adds	r0, r3, #1
 8004df6:	6010      	str	r0, [r2, #0]
 8004df8:	7019      	strb	r1, [r3, #0]
 8004dfa:	4608      	mov	r0, r1
 8004dfc:	bc10      	pop	{r4}
 8004dfe:	4770      	bx	lr

08004e00 <__sfputs_r>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	4606      	mov	r6, r0
 8004e04:	460f      	mov	r7, r1
 8004e06:	4614      	mov	r4, r2
 8004e08:	18d5      	adds	r5, r2, r3
 8004e0a:	42ac      	cmp	r4, r5
 8004e0c:	d101      	bne.n	8004e12 <__sfputs_r+0x12>
 8004e0e:	2000      	movs	r0, #0
 8004e10:	e007      	b.n	8004e22 <__sfputs_r+0x22>
 8004e12:	463a      	mov	r2, r7
 8004e14:	4630      	mov	r0, r6
 8004e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e1a:	f7ff ffdc 	bl	8004dd6 <__sfputc_r>
 8004e1e:	1c43      	adds	r3, r0, #1
 8004e20:	d1f3      	bne.n	8004e0a <__sfputs_r+0xa>
 8004e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e24 <_vfiprintf_r>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	460d      	mov	r5, r1
 8004e2a:	4614      	mov	r4, r2
 8004e2c:	4698      	mov	r8, r3
 8004e2e:	4606      	mov	r6, r0
 8004e30:	b09d      	sub	sp, #116	@ 0x74
 8004e32:	b118      	cbz	r0, 8004e3c <_vfiprintf_r+0x18>
 8004e34:	6a03      	ldr	r3, [r0, #32]
 8004e36:	b90b      	cbnz	r3, 8004e3c <_vfiprintf_r+0x18>
 8004e38:	f7ff fcea 	bl	8004810 <__sinit>
 8004e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e3e:	07d9      	lsls	r1, r3, #31
 8004e40:	d405      	bmi.n	8004e4e <_vfiprintf_r+0x2a>
 8004e42:	89ab      	ldrh	r3, [r5, #12]
 8004e44:	059a      	lsls	r2, r3, #22
 8004e46:	d402      	bmi.n	8004e4e <_vfiprintf_r+0x2a>
 8004e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e4a:	f7ff fdd4 	bl	80049f6 <__retarget_lock_acquire_recursive>
 8004e4e:	89ab      	ldrh	r3, [r5, #12]
 8004e50:	071b      	lsls	r3, r3, #28
 8004e52:	d501      	bpl.n	8004e58 <_vfiprintf_r+0x34>
 8004e54:	692b      	ldr	r3, [r5, #16]
 8004e56:	b99b      	cbnz	r3, 8004e80 <_vfiprintf_r+0x5c>
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f000 fac8 	bl	80053f0 <__swsetup_r>
 8004e60:	b170      	cbz	r0, 8004e80 <_vfiprintf_r+0x5c>
 8004e62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e64:	07dc      	lsls	r4, r3, #31
 8004e66:	d504      	bpl.n	8004e72 <_vfiprintf_r+0x4e>
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	b01d      	add	sp, #116	@ 0x74
 8004e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e72:	89ab      	ldrh	r3, [r5, #12]
 8004e74:	0598      	lsls	r0, r3, #22
 8004e76:	d4f7      	bmi.n	8004e68 <_vfiprintf_r+0x44>
 8004e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e7a:	f7ff fdbd 	bl	80049f8 <__retarget_lock_release_recursive>
 8004e7e:	e7f3      	b.n	8004e68 <_vfiprintf_r+0x44>
 8004e80:	2300      	movs	r3, #0
 8004e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e84:	2320      	movs	r3, #32
 8004e86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e8a:	2330      	movs	r3, #48	@ 0x30
 8004e8c:	f04f 0901 	mov.w	r9, #1
 8004e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e94:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005040 <_vfiprintf_r+0x21c>
 8004e98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	469a      	mov	sl, r3
 8004ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ea4:	b10a      	cbz	r2, 8004eaa <_vfiprintf_r+0x86>
 8004ea6:	2a25      	cmp	r2, #37	@ 0x25
 8004ea8:	d1f9      	bne.n	8004e9e <_vfiprintf_r+0x7a>
 8004eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8004eae:	d00b      	beq.n	8004ec8 <_vfiprintf_r+0xa4>
 8004eb0:	465b      	mov	r3, fp
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f7ff ffa2 	bl	8004e00 <__sfputs_r>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f000 80a7 	beq.w	8005010 <_vfiprintf_r+0x1ec>
 8004ec2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ec4:	445a      	add	r2, fp
 8004ec6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 809f 	beq.w	8005010 <_vfiprintf_r+0x1ec>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004edc:	f10a 0a01 	add.w	sl, sl, #1
 8004ee0:	9304      	str	r3, [sp, #16]
 8004ee2:	9307      	str	r3, [sp, #28]
 8004ee4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ee8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004eea:	4654      	mov	r4, sl
 8004eec:	2205      	movs	r2, #5
 8004eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef2:	4853      	ldr	r0, [pc, #332]	@ (8005040 <_vfiprintf_r+0x21c>)
 8004ef4:	f000 fb16 	bl	8005524 <memchr>
 8004ef8:	9a04      	ldr	r2, [sp, #16]
 8004efa:	b9d8      	cbnz	r0, 8004f34 <_vfiprintf_r+0x110>
 8004efc:	06d1      	lsls	r1, r2, #27
 8004efe:	bf44      	itt	mi
 8004f00:	2320      	movmi	r3, #32
 8004f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f06:	0713      	lsls	r3, r2, #28
 8004f08:	bf44      	itt	mi
 8004f0a:	232b      	movmi	r3, #43	@ 0x2b
 8004f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f10:	f89a 3000 	ldrb.w	r3, [sl]
 8004f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f16:	d015      	beq.n	8004f44 <_vfiprintf_r+0x120>
 8004f18:	4654      	mov	r4, sl
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	f04f 0c0a 	mov.w	ip, #10
 8004f20:	9a07      	ldr	r2, [sp, #28]
 8004f22:	4621      	mov	r1, r4
 8004f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f28:	3b30      	subs	r3, #48	@ 0x30
 8004f2a:	2b09      	cmp	r3, #9
 8004f2c:	d94b      	bls.n	8004fc6 <_vfiprintf_r+0x1a2>
 8004f2e:	b1b0      	cbz	r0, 8004f5e <_vfiprintf_r+0x13a>
 8004f30:	9207      	str	r2, [sp, #28]
 8004f32:	e014      	b.n	8004f5e <_vfiprintf_r+0x13a>
 8004f34:	eba0 0308 	sub.w	r3, r0, r8
 8004f38:	fa09 f303 	lsl.w	r3, r9, r3
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	46a2      	mov	sl, r4
 8004f40:	9304      	str	r3, [sp, #16]
 8004f42:	e7d2      	b.n	8004eea <_vfiprintf_r+0xc6>
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	1d19      	adds	r1, r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	9103      	str	r1, [sp, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bfbb      	ittet	lt
 8004f50:	425b      	neglt	r3, r3
 8004f52:	f042 0202 	orrlt.w	r2, r2, #2
 8004f56:	9307      	strge	r3, [sp, #28]
 8004f58:	9307      	strlt	r3, [sp, #28]
 8004f5a:	bfb8      	it	lt
 8004f5c:	9204      	strlt	r2, [sp, #16]
 8004f5e:	7823      	ldrb	r3, [r4, #0]
 8004f60:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f62:	d10a      	bne.n	8004f7a <_vfiprintf_r+0x156>
 8004f64:	7863      	ldrb	r3, [r4, #1]
 8004f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f68:	d132      	bne.n	8004fd0 <_vfiprintf_r+0x1ac>
 8004f6a:	9b03      	ldr	r3, [sp, #12]
 8004f6c:	3402      	adds	r4, #2
 8004f6e:	1d1a      	adds	r2, r3, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	9203      	str	r2, [sp, #12]
 8004f74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f78:	9305      	str	r3, [sp, #20]
 8004f7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005044 <_vfiprintf_r+0x220>
 8004f7e:	2203      	movs	r2, #3
 8004f80:	4650      	mov	r0, sl
 8004f82:	7821      	ldrb	r1, [r4, #0]
 8004f84:	f000 face 	bl	8005524 <memchr>
 8004f88:	b138      	cbz	r0, 8004f9a <_vfiprintf_r+0x176>
 8004f8a:	2240      	movs	r2, #64	@ 0x40
 8004f8c:	9b04      	ldr	r3, [sp, #16]
 8004f8e:	eba0 000a 	sub.w	r0, r0, sl
 8004f92:	4082      	lsls	r2, r0
 8004f94:	4313      	orrs	r3, r2
 8004f96:	3401      	adds	r4, #1
 8004f98:	9304      	str	r3, [sp, #16]
 8004f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f9e:	2206      	movs	r2, #6
 8004fa0:	4829      	ldr	r0, [pc, #164]	@ (8005048 <_vfiprintf_r+0x224>)
 8004fa2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fa6:	f000 fabd 	bl	8005524 <memchr>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d03f      	beq.n	800502e <_vfiprintf_r+0x20a>
 8004fae:	4b27      	ldr	r3, [pc, #156]	@ (800504c <_vfiprintf_r+0x228>)
 8004fb0:	bb1b      	cbnz	r3, 8004ffa <_vfiprintf_r+0x1d6>
 8004fb2:	9b03      	ldr	r3, [sp, #12]
 8004fb4:	3307      	adds	r3, #7
 8004fb6:	f023 0307 	bic.w	r3, r3, #7
 8004fba:	3308      	adds	r3, #8
 8004fbc:	9303      	str	r3, [sp, #12]
 8004fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fc0:	443b      	add	r3, r7
 8004fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fc4:	e76a      	b.n	8004e9c <_vfiprintf_r+0x78>
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	2001      	movs	r0, #1
 8004fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fce:	e7a8      	b.n	8004f22 <_vfiprintf_r+0xfe>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f04f 0c0a 	mov.w	ip, #10
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	3401      	adds	r4, #1
 8004fda:	9305      	str	r3, [sp, #20]
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fe2:	3a30      	subs	r2, #48	@ 0x30
 8004fe4:	2a09      	cmp	r2, #9
 8004fe6:	d903      	bls.n	8004ff0 <_vfiprintf_r+0x1cc>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0c6      	beq.n	8004f7a <_vfiprintf_r+0x156>
 8004fec:	9105      	str	r1, [sp, #20]
 8004fee:	e7c4      	b.n	8004f7a <_vfiprintf_r+0x156>
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ff8:	e7f0      	b.n	8004fdc <_vfiprintf_r+0x1b8>
 8004ffa:	ab03      	add	r3, sp, #12
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	462a      	mov	r2, r5
 8005000:	4630      	mov	r0, r6
 8005002:	4b13      	ldr	r3, [pc, #76]	@ (8005050 <_vfiprintf_r+0x22c>)
 8005004:	a904      	add	r1, sp, #16
 8005006:	f3af 8000 	nop.w
 800500a:	4607      	mov	r7, r0
 800500c:	1c78      	adds	r0, r7, #1
 800500e:	d1d6      	bne.n	8004fbe <_vfiprintf_r+0x19a>
 8005010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005012:	07d9      	lsls	r1, r3, #31
 8005014:	d405      	bmi.n	8005022 <_vfiprintf_r+0x1fe>
 8005016:	89ab      	ldrh	r3, [r5, #12]
 8005018:	059a      	lsls	r2, r3, #22
 800501a:	d402      	bmi.n	8005022 <_vfiprintf_r+0x1fe>
 800501c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800501e:	f7ff fceb 	bl	80049f8 <__retarget_lock_release_recursive>
 8005022:	89ab      	ldrh	r3, [r5, #12]
 8005024:	065b      	lsls	r3, r3, #25
 8005026:	f53f af1f 	bmi.w	8004e68 <_vfiprintf_r+0x44>
 800502a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800502c:	e71e      	b.n	8004e6c <_vfiprintf_r+0x48>
 800502e:	ab03      	add	r3, sp, #12
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	462a      	mov	r2, r5
 8005034:	4630      	mov	r0, r6
 8005036:	4b06      	ldr	r3, [pc, #24]	@ (8005050 <_vfiprintf_r+0x22c>)
 8005038:	a904      	add	r1, sp, #16
 800503a:	f000 f87d 	bl	8005138 <_printf_i>
 800503e:	e7e4      	b.n	800500a <_vfiprintf_r+0x1e6>
 8005040:	08005849 	.word	0x08005849
 8005044:	0800584f 	.word	0x0800584f
 8005048:	08005853 	.word	0x08005853
 800504c:	00000000 	.word	0x00000000
 8005050:	08004e01 	.word	0x08004e01

08005054 <_printf_common>:
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	4616      	mov	r6, r2
 800505a:	4698      	mov	r8, r3
 800505c:	688a      	ldr	r2, [r1, #8]
 800505e:	690b      	ldr	r3, [r1, #16]
 8005060:	4607      	mov	r7, r0
 8005062:	4293      	cmp	r3, r2
 8005064:	bfb8      	it	lt
 8005066:	4613      	movlt	r3, r2
 8005068:	6033      	str	r3, [r6, #0]
 800506a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800506e:	460c      	mov	r4, r1
 8005070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005074:	b10a      	cbz	r2, 800507a <_printf_common+0x26>
 8005076:	3301      	adds	r3, #1
 8005078:	6033      	str	r3, [r6, #0]
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	0699      	lsls	r1, r3, #26
 800507e:	bf42      	ittt	mi
 8005080:	6833      	ldrmi	r3, [r6, #0]
 8005082:	3302      	addmi	r3, #2
 8005084:	6033      	strmi	r3, [r6, #0]
 8005086:	6825      	ldr	r5, [r4, #0]
 8005088:	f015 0506 	ands.w	r5, r5, #6
 800508c:	d106      	bne.n	800509c <_printf_common+0x48>
 800508e:	f104 0a19 	add.w	sl, r4, #25
 8005092:	68e3      	ldr	r3, [r4, #12]
 8005094:	6832      	ldr	r2, [r6, #0]
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	42ab      	cmp	r3, r5
 800509a:	dc2b      	bgt.n	80050f4 <_printf_common+0xa0>
 800509c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	3b00      	subs	r3, #0
 80050a4:	bf18      	it	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	0692      	lsls	r2, r2, #26
 80050aa:	d430      	bmi.n	800510e <_printf_common+0xba>
 80050ac:	4641      	mov	r1, r8
 80050ae:	4638      	mov	r0, r7
 80050b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050b4:	47c8      	blx	r9
 80050b6:	3001      	adds	r0, #1
 80050b8:	d023      	beq.n	8005102 <_printf_common+0xae>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	6922      	ldr	r2, [r4, #16]
 80050be:	f003 0306 	and.w	r3, r3, #6
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	bf14      	ite	ne
 80050c6:	2500      	movne	r5, #0
 80050c8:	6833      	ldreq	r3, [r6, #0]
 80050ca:	f04f 0600 	mov.w	r6, #0
 80050ce:	bf08      	it	eq
 80050d0:	68e5      	ldreq	r5, [r4, #12]
 80050d2:	f104 041a 	add.w	r4, r4, #26
 80050d6:	bf08      	it	eq
 80050d8:	1aed      	subeq	r5, r5, r3
 80050da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050de:	bf08      	it	eq
 80050e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e4:	4293      	cmp	r3, r2
 80050e6:	bfc4      	itt	gt
 80050e8:	1a9b      	subgt	r3, r3, r2
 80050ea:	18ed      	addgt	r5, r5, r3
 80050ec:	42b5      	cmp	r5, r6
 80050ee:	d11a      	bne.n	8005126 <_printf_common+0xd2>
 80050f0:	2000      	movs	r0, #0
 80050f2:	e008      	b.n	8005106 <_printf_common+0xb2>
 80050f4:	2301      	movs	r3, #1
 80050f6:	4652      	mov	r2, sl
 80050f8:	4641      	mov	r1, r8
 80050fa:	4638      	mov	r0, r7
 80050fc:	47c8      	blx	r9
 80050fe:	3001      	adds	r0, #1
 8005100:	d103      	bne.n	800510a <_printf_common+0xb6>
 8005102:	f04f 30ff 	mov.w	r0, #4294967295
 8005106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510a:	3501      	adds	r5, #1
 800510c:	e7c1      	b.n	8005092 <_printf_common+0x3e>
 800510e:	2030      	movs	r0, #48	@ 0x30
 8005110:	18e1      	adds	r1, r4, r3
 8005112:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800511c:	4422      	add	r2, r4
 800511e:	3302      	adds	r3, #2
 8005120:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005124:	e7c2      	b.n	80050ac <_printf_common+0x58>
 8005126:	2301      	movs	r3, #1
 8005128:	4622      	mov	r2, r4
 800512a:	4641      	mov	r1, r8
 800512c:	4638      	mov	r0, r7
 800512e:	47c8      	blx	r9
 8005130:	3001      	adds	r0, #1
 8005132:	d0e6      	beq.n	8005102 <_printf_common+0xae>
 8005134:	3601      	adds	r6, #1
 8005136:	e7d9      	b.n	80050ec <_printf_common+0x98>

08005138 <_printf_i>:
 8005138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800513c:	7e0f      	ldrb	r7, [r1, #24]
 800513e:	4691      	mov	r9, r2
 8005140:	2f78      	cmp	r7, #120	@ 0x78
 8005142:	4680      	mov	r8, r0
 8005144:	460c      	mov	r4, r1
 8005146:	469a      	mov	sl, r3
 8005148:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800514a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800514e:	d807      	bhi.n	8005160 <_printf_i+0x28>
 8005150:	2f62      	cmp	r7, #98	@ 0x62
 8005152:	d80a      	bhi.n	800516a <_printf_i+0x32>
 8005154:	2f00      	cmp	r7, #0
 8005156:	f000 80d1 	beq.w	80052fc <_printf_i+0x1c4>
 800515a:	2f58      	cmp	r7, #88	@ 0x58
 800515c:	f000 80b8 	beq.w	80052d0 <_printf_i+0x198>
 8005160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005164:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005168:	e03a      	b.n	80051e0 <_printf_i+0xa8>
 800516a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800516e:	2b15      	cmp	r3, #21
 8005170:	d8f6      	bhi.n	8005160 <_printf_i+0x28>
 8005172:	a101      	add	r1, pc, #4	@ (adr r1, 8005178 <_printf_i+0x40>)
 8005174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005178:	080051d1 	.word	0x080051d1
 800517c:	080051e5 	.word	0x080051e5
 8005180:	08005161 	.word	0x08005161
 8005184:	08005161 	.word	0x08005161
 8005188:	08005161 	.word	0x08005161
 800518c:	08005161 	.word	0x08005161
 8005190:	080051e5 	.word	0x080051e5
 8005194:	08005161 	.word	0x08005161
 8005198:	08005161 	.word	0x08005161
 800519c:	08005161 	.word	0x08005161
 80051a0:	08005161 	.word	0x08005161
 80051a4:	080052e3 	.word	0x080052e3
 80051a8:	0800520f 	.word	0x0800520f
 80051ac:	0800529d 	.word	0x0800529d
 80051b0:	08005161 	.word	0x08005161
 80051b4:	08005161 	.word	0x08005161
 80051b8:	08005305 	.word	0x08005305
 80051bc:	08005161 	.word	0x08005161
 80051c0:	0800520f 	.word	0x0800520f
 80051c4:	08005161 	.word	0x08005161
 80051c8:	08005161 	.word	0x08005161
 80051cc:	080052a5 	.word	0x080052a5
 80051d0:	6833      	ldr	r3, [r6, #0]
 80051d2:	1d1a      	adds	r2, r3, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6032      	str	r2, [r6, #0]
 80051d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051e0:	2301      	movs	r3, #1
 80051e2:	e09c      	b.n	800531e <_printf_i+0x1e6>
 80051e4:	6833      	ldr	r3, [r6, #0]
 80051e6:	6820      	ldr	r0, [r4, #0]
 80051e8:	1d19      	adds	r1, r3, #4
 80051ea:	6031      	str	r1, [r6, #0]
 80051ec:	0606      	lsls	r6, r0, #24
 80051ee:	d501      	bpl.n	80051f4 <_printf_i+0xbc>
 80051f0:	681d      	ldr	r5, [r3, #0]
 80051f2:	e003      	b.n	80051fc <_printf_i+0xc4>
 80051f4:	0645      	lsls	r5, r0, #25
 80051f6:	d5fb      	bpl.n	80051f0 <_printf_i+0xb8>
 80051f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051fc:	2d00      	cmp	r5, #0
 80051fe:	da03      	bge.n	8005208 <_printf_i+0xd0>
 8005200:	232d      	movs	r3, #45	@ 0x2d
 8005202:	426d      	negs	r5, r5
 8005204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005208:	230a      	movs	r3, #10
 800520a:	4858      	ldr	r0, [pc, #352]	@ (800536c <_printf_i+0x234>)
 800520c:	e011      	b.n	8005232 <_printf_i+0xfa>
 800520e:	6821      	ldr	r1, [r4, #0]
 8005210:	6833      	ldr	r3, [r6, #0]
 8005212:	0608      	lsls	r0, r1, #24
 8005214:	f853 5b04 	ldr.w	r5, [r3], #4
 8005218:	d402      	bmi.n	8005220 <_printf_i+0xe8>
 800521a:	0649      	lsls	r1, r1, #25
 800521c:	bf48      	it	mi
 800521e:	b2ad      	uxthmi	r5, r5
 8005220:	2f6f      	cmp	r7, #111	@ 0x6f
 8005222:	6033      	str	r3, [r6, #0]
 8005224:	bf14      	ite	ne
 8005226:	230a      	movne	r3, #10
 8005228:	2308      	moveq	r3, #8
 800522a:	4850      	ldr	r0, [pc, #320]	@ (800536c <_printf_i+0x234>)
 800522c:	2100      	movs	r1, #0
 800522e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005232:	6866      	ldr	r6, [r4, #4]
 8005234:	2e00      	cmp	r6, #0
 8005236:	60a6      	str	r6, [r4, #8]
 8005238:	db05      	blt.n	8005246 <_printf_i+0x10e>
 800523a:	6821      	ldr	r1, [r4, #0]
 800523c:	432e      	orrs	r6, r5
 800523e:	f021 0104 	bic.w	r1, r1, #4
 8005242:	6021      	str	r1, [r4, #0]
 8005244:	d04b      	beq.n	80052de <_printf_i+0x1a6>
 8005246:	4616      	mov	r6, r2
 8005248:	fbb5 f1f3 	udiv	r1, r5, r3
 800524c:	fb03 5711 	mls	r7, r3, r1, r5
 8005250:	5dc7      	ldrb	r7, [r0, r7]
 8005252:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005256:	462f      	mov	r7, r5
 8005258:	42bb      	cmp	r3, r7
 800525a:	460d      	mov	r5, r1
 800525c:	d9f4      	bls.n	8005248 <_printf_i+0x110>
 800525e:	2b08      	cmp	r3, #8
 8005260:	d10b      	bne.n	800527a <_printf_i+0x142>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	07df      	lsls	r7, r3, #31
 8005266:	d508      	bpl.n	800527a <_printf_i+0x142>
 8005268:	6923      	ldr	r3, [r4, #16]
 800526a:	6861      	ldr	r1, [r4, #4]
 800526c:	4299      	cmp	r1, r3
 800526e:	bfde      	ittt	le
 8005270:	2330      	movle	r3, #48	@ 0x30
 8005272:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005276:	f106 36ff 	addle.w	r6, r6, #4294967295
 800527a:	1b92      	subs	r2, r2, r6
 800527c:	6122      	str	r2, [r4, #16]
 800527e:	464b      	mov	r3, r9
 8005280:	4621      	mov	r1, r4
 8005282:	4640      	mov	r0, r8
 8005284:	f8cd a000 	str.w	sl, [sp]
 8005288:	aa03      	add	r2, sp, #12
 800528a:	f7ff fee3 	bl	8005054 <_printf_common>
 800528e:	3001      	adds	r0, #1
 8005290:	d14a      	bne.n	8005328 <_printf_i+0x1f0>
 8005292:	f04f 30ff 	mov.w	r0, #4294967295
 8005296:	b004      	add	sp, #16
 8005298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	f043 0320 	orr.w	r3, r3, #32
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	2778      	movs	r7, #120	@ 0x78
 80052a6:	4832      	ldr	r0, [pc, #200]	@ (8005370 <_printf_i+0x238>)
 80052a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	6831      	ldr	r1, [r6, #0]
 80052b0:	061f      	lsls	r7, r3, #24
 80052b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80052b6:	d402      	bmi.n	80052be <_printf_i+0x186>
 80052b8:	065f      	lsls	r7, r3, #25
 80052ba:	bf48      	it	mi
 80052bc:	b2ad      	uxthmi	r5, r5
 80052be:	6031      	str	r1, [r6, #0]
 80052c0:	07d9      	lsls	r1, r3, #31
 80052c2:	bf44      	itt	mi
 80052c4:	f043 0320 	orrmi.w	r3, r3, #32
 80052c8:	6023      	strmi	r3, [r4, #0]
 80052ca:	b11d      	cbz	r5, 80052d4 <_printf_i+0x19c>
 80052cc:	2310      	movs	r3, #16
 80052ce:	e7ad      	b.n	800522c <_printf_i+0xf4>
 80052d0:	4826      	ldr	r0, [pc, #152]	@ (800536c <_printf_i+0x234>)
 80052d2:	e7e9      	b.n	80052a8 <_printf_i+0x170>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	f023 0320 	bic.w	r3, r3, #32
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	e7f6      	b.n	80052cc <_printf_i+0x194>
 80052de:	4616      	mov	r6, r2
 80052e0:	e7bd      	b.n	800525e <_printf_i+0x126>
 80052e2:	6833      	ldr	r3, [r6, #0]
 80052e4:	6825      	ldr	r5, [r4, #0]
 80052e6:	1d18      	adds	r0, r3, #4
 80052e8:	6961      	ldr	r1, [r4, #20]
 80052ea:	6030      	str	r0, [r6, #0]
 80052ec:	062e      	lsls	r6, r5, #24
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	d501      	bpl.n	80052f6 <_printf_i+0x1be>
 80052f2:	6019      	str	r1, [r3, #0]
 80052f4:	e002      	b.n	80052fc <_printf_i+0x1c4>
 80052f6:	0668      	lsls	r0, r5, #25
 80052f8:	d5fb      	bpl.n	80052f2 <_printf_i+0x1ba>
 80052fa:	8019      	strh	r1, [r3, #0]
 80052fc:	2300      	movs	r3, #0
 80052fe:	4616      	mov	r6, r2
 8005300:	6123      	str	r3, [r4, #16]
 8005302:	e7bc      	b.n	800527e <_printf_i+0x146>
 8005304:	6833      	ldr	r3, [r6, #0]
 8005306:	2100      	movs	r1, #0
 8005308:	1d1a      	adds	r2, r3, #4
 800530a:	6032      	str	r2, [r6, #0]
 800530c:	681e      	ldr	r6, [r3, #0]
 800530e:	6862      	ldr	r2, [r4, #4]
 8005310:	4630      	mov	r0, r6
 8005312:	f000 f907 	bl	8005524 <memchr>
 8005316:	b108      	cbz	r0, 800531c <_printf_i+0x1e4>
 8005318:	1b80      	subs	r0, r0, r6
 800531a:	6060      	str	r0, [r4, #4]
 800531c:	6863      	ldr	r3, [r4, #4]
 800531e:	6123      	str	r3, [r4, #16]
 8005320:	2300      	movs	r3, #0
 8005322:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005326:	e7aa      	b.n	800527e <_printf_i+0x146>
 8005328:	4632      	mov	r2, r6
 800532a:	4649      	mov	r1, r9
 800532c:	4640      	mov	r0, r8
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	47d0      	blx	sl
 8005332:	3001      	adds	r0, #1
 8005334:	d0ad      	beq.n	8005292 <_printf_i+0x15a>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	079b      	lsls	r3, r3, #30
 800533a:	d413      	bmi.n	8005364 <_printf_i+0x22c>
 800533c:	68e0      	ldr	r0, [r4, #12]
 800533e:	9b03      	ldr	r3, [sp, #12]
 8005340:	4298      	cmp	r0, r3
 8005342:	bfb8      	it	lt
 8005344:	4618      	movlt	r0, r3
 8005346:	e7a6      	b.n	8005296 <_printf_i+0x15e>
 8005348:	2301      	movs	r3, #1
 800534a:	4632      	mov	r2, r6
 800534c:	4649      	mov	r1, r9
 800534e:	4640      	mov	r0, r8
 8005350:	47d0      	blx	sl
 8005352:	3001      	adds	r0, #1
 8005354:	d09d      	beq.n	8005292 <_printf_i+0x15a>
 8005356:	3501      	adds	r5, #1
 8005358:	68e3      	ldr	r3, [r4, #12]
 800535a:	9903      	ldr	r1, [sp, #12]
 800535c:	1a5b      	subs	r3, r3, r1
 800535e:	42ab      	cmp	r3, r5
 8005360:	dcf2      	bgt.n	8005348 <_printf_i+0x210>
 8005362:	e7eb      	b.n	800533c <_printf_i+0x204>
 8005364:	2500      	movs	r5, #0
 8005366:	f104 0619 	add.w	r6, r4, #25
 800536a:	e7f5      	b.n	8005358 <_printf_i+0x220>
 800536c:	0800585a 	.word	0x0800585a
 8005370:	0800586b 	.word	0x0800586b

08005374 <__swbuf_r>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	460e      	mov	r6, r1
 8005378:	4614      	mov	r4, r2
 800537a:	4605      	mov	r5, r0
 800537c:	b118      	cbz	r0, 8005386 <__swbuf_r+0x12>
 800537e:	6a03      	ldr	r3, [r0, #32]
 8005380:	b90b      	cbnz	r3, 8005386 <__swbuf_r+0x12>
 8005382:	f7ff fa45 	bl	8004810 <__sinit>
 8005386:	69a3      	ldr	r3, [r4, #24]
 8005388:	60a3      	str	r3, [r4, #8]
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	071a      	lsls	r2, r3, #28
 800538e:	d501      	bpl.n	8005394 <__swbuf_r+0x20>
 8005390:	6923      	ldr	r3, [r4, #16]
 8005392:	b943      	cbnz	r3, 80053a6 <__swbuf_r+0x32>
 8005394:	4621      	mov	r1, r4
 8005396:	4628      	mov	r0, r5
 8005398:	f000 f82a 	bl	80053f0 <__swsetup_r>
 800539c:	b118      	cbz	r0, 80053a6 <__swbuf_r+0x32>
 800539e:	f04f 37ff 	mov.w	r7, #4294967295
 80053a2:	4638      	mov	r0, r7
 80053a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	6922      	ldr	r2, [r4, #16]
 80053aa:	b2f6      	uxtb	r6, r6
 80053ac:	1a98      	subs	r0, r3, r2
 80053ae:	6963      	ldr	r3, [r4, #20]
 80053b0:	4637      	mov	r7, r6
 80053b2:	4283      	cmp	r3, r0
 80053b4:	dc05      	bgt.n	80053c2 <__swbuf_r+0x4e>
 80053b6:	4621      	mov	r1, r4
 80053b8:	4628      	mov	r0, r5
 80053ba:	f7ff fcbb 	bl	8004d34 <_fflush_r>
 80053be:	2800      	cmp	r0, #0
 80053c0:	d1ed      	bne.n	800539e <__swbuf_r+0x2a>
 80053c2:	68a3      	ldr	r3, [r4, #8]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	60a3      	str	r3, [r4, #8]
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	6022      	str	r2, [r4, #0]
 80053ce:	701e      	strb	r6, [r3, #0]
 80053d0:	6962      	ldr	r2, [r4, #20]
 80053d2:	1c43      	adds	r3, r0, #1
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d004      	beq.n	80053e2 <__swbuf_r+0x6e>
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	07db      	lsls	r3, r3, #31
 80053dc:	d5e1      	bpl.n	80053a2 <__swbuf_r+0x2e>
 80053de:	2e0a      	cmp	r6, #10
 80053e0:	d1df      	bne.n	80053a2 <__swbuf_r+0x2e>
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	f7ff fca5 	bl	8004d34 <_fflush_r>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d0d9      	beq.n	80053a2 <__swbuf_r+0x2e>
 80053ee:	e7d6      	b.n	800539e <__swbuf_r+0x2a>

080053f0 <__swsetup_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4b29      	ldr	r3, [pc, #164]	@ (8005498 <__swsetup_r+0xa8>)
 80053f4:	4605      	mov	r5, r0
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	460c      	mov	r4, r1
 80053fa:	b118      	cbz	r0, 8005404 <__swsetup_r+0x14>
 80053fc:	6a03      	ldr	r3, [r0, #32]
 80053fe:	b90b      	cbnz	r3, 8005404 <__swsetup_r+0x14>
 8005400:	f7ff fa06 	bl	8004810 <__sinit>
 8005404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005408:	0719      	lsls	r1, r3, #28
 800540a:	d422      	bmi.n	8005452 <__swsetup_r+0x62>
 800540c:	06da      	lsls	r2, r3, #27
 800540e:	d407      	bmi.n	8005420 <__swsetup_r+0x30>
 8005410:	2209      	movs	r2, #9
 8005412:	602a      	str	r2, [r5, #0]
 8005414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005418:	f04f 30ff 	mov.w	r0, #4294967295
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	e033      	b.n	8005488 <__swsetup_r+0x98>
 8005420:	0758      	lsls	r0, r3, #29
 8005422:	d512      	bpl.n	800544a <__swsetup_r+0x5a>
 8005424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005426:	b141      	cbz	r1, 800543a <__swsetup_r+0x4a>
 8005428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800542c:	4299      	cmp	r1, r3
 800542e:	d002      	beq.n	8005436 <__swsetup_r+0x46>
 8005430:	4628      	mov	r0, r5
 8005432:	f7ff fb01 	bl	8004a38 <_free_r>
 8005436:	2300      	movs	r3, #0
 8005438:	6363      	str	r3, [r4, #52]	@ 0x34
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005440:	81a3      	strh	r3, [r4, #12]
 8005442:	2300      	movs	r3, #0
 8005444:	6063      	str	r3, [r4, #4]
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f043 0308 	orr.w	r3, r3, #8
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	b94b      	cbnz	r3, 800546a <__swsetup_r+0x7a>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800545c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005460:	d003      	beq.n	800546a <__swsetup_r+0x7a>
 8005462:	4621      	mov	r1, r4
 8005464:	4628      	mov	r0, r5
 8005466:	f000 f890 	bl	800558a <__smakebuf_r>
 800546a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800546e:	f013 0201 	ands.w	r2, r3, #1
 8005472:	d00a      	beq.n	800548a <__swsetup_r+0x9a>
 8005474:	2200      	movs	r2, #0
 8005476:	60a2      	str	r2, [r4, #8]
 8005478:	6962      	ldr	r2, [r4, #20]
 800547a:	4252      	negs	r2, r2
 800547c:	61a2      	str	r2, [r4, #24]
 800547e:	6922      	ldr	r2, [r4, #16]
 8005480:	b942      	cbnz	r2, 8005494 <__swsetup_r+0xa4>
 8005482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005486:	d1c5      	bne.n	8005414 <__swsetup_r+0x24>
 8005488:	bd38      	pop	{r3, r4, r5, pc}
 800548a:	0799      	lsls	r1, r3, #30
 800548c:	bf58      	it	pl
 800548e:	6962      	ldrpl	r2, [r4, #20]
 8005490:	60a2      	str	r2, [r4, #8]
 8005492:	e7f4      	b.n	800547e <__swsetup_r+0x8e>
 8005494:	2000      	movs	r0, #0
 8005496:	e7f7      	b.n	8005488 <__swsetup_r+0x98>
 8005498:	200000a0 	.word	0x200000a0

0800549c <_raise_r>:
 800549c:	291f      	cmp	r1, #31
 800549e:	b538      	push	{r3, r4, r5, lr}
 80054a0:	4605      	mov	r5, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	d904      	bls.n	80054b0 <_raise_r+0x14>
 80054a6:	2316      	movs	r3, #22
 80054a8:	6003      	str	r3, [r0, #0]
 80054aa:	f04f 30ff 	mov.w	r0, #4294967295
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80054b2:	b112      	cbz	r2, 80054ba <_raise_r+0x1e>
 80054b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80054b8:	b94b      	cbnz	r3, 80054ce <_raise_r+0x32>
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 f830 	bl	8005520 <_getpid_r>
 80054c0:	4622      	mov	r2, r4
 80054c2:	4601      	mov	r1, r0
 80054c4:	4628      	mov	r0, r5
 80054c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054ca:	f000 b817 	b.w	80054fc <_kill_r>
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d00a      	beq.n	80054e8 <_raise_r+0x4c>
 80054d2:	1c59      	adds	r1, r3, #1
 80054d4:	d103      	bne.n	80054de <_raise_r+0x42>
 80054d6:	2316      	movs	r3, #22
 80054d8:	6003      	str	r3, [r0, #0]
 80054da:	2001      	movs	r0, #1
 80054dc:	e7e7      	b.n	80054ae <_raise_r+0x12>
 80054de:	2100      	movs	r1, #0
 80054e0:	4620      	mov	r0, r4
 80054e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80054e6:	4798      	blx	r3
 80054e8:	2000      	movs	r0, #0
 80054ea:	e7e0      	b.n	80054ae <_raise_r+0x12>

080054ec <raise>:
 80054ec:	4b02      	ldr	r3, [pc, #8]	@ (80054f8 <raise+0xc>)
 80054ee:	4601      	mov	r1, r0
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	f7ff bfd3 	b.w	800549c <_raise_r>
 80054f6:	bf00      	nop
 80054f8:	200000a0 	.word	0x200000a0

080054fc <_kill_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	2300      	movs	r3, #0
 8005500:	4d06      	ldr	r5, [pc, #24]	@ (800551c <_kill_r+0x20>)
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	602b      	str	r3, [r5, #0]
 800550a:	f7fd f834 	bl	8002576 <_kill>
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	d102      	bne.n	8005518 <_kill_r+0x1c>
 8005512:	682b      	ldr	r3, [r5, #0]
 8005514:	b103      	cbz	r3, 8005518 <_kill_r+0x1c>
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	bd38      	pop	{r3, r4, r5, pc}
 800551a:	bf00      	nop
 800551c:	20000954 	.word	0x20000954

08005520 <_getpid_r>:
 8005520:	f7fd b822 	b.w	8002568 <_getpid>

08005524 <memchr>:
 8005524:	4603      	mov	r3, r0
 8005526:	b510      	push	{r4, lr}
 8005528:	b2c9      	uxtb	r1, r1
 800552a:	4402      	add	r2, r0
 800552c:	4293      	cmp	r3, r2
 800552e:	4618      	mov	r0, r3
 8005530:	d101      	bne.n	8005536 <memchr+0x12>
 8005532:	2000      	movs	r0, #0
 8005534:	e003      	b.n	800553e <memchr+0x1a>
 8005536:	7804      	ldrb	r4, [r0, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	428c      	cmp	r4, r1
 800553c:	d1f6      	bne.n	800552c <memchr+0x8>
 800553e:	bd10      	pop	{r4, pc}

08005540 <__swhatbuf_r>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	460c      	mov	r4, r1
 8005544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005548:	4615      	mov	r5, r2
 800554a:	2900      	cmp	r1, #0
 800554c:	461e      	mov	r6, r3
 800554e:	b096      	sub	sp, #88	@ 0x58
 8005550:	da0c      	bge.n	800556c <__swhatbuf_r+0x2c>
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	2100      	movs	r1, #0
 8005556:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800555a:	bf14      	ite	ne
 800555c:	2340      	movne	r3, #64	@ 0x40
 800555e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005562:	2000      	movs	r0, #0
 8005564:	6031      	str	r1, [r6, #0]
 8005566:	602b      	str	r3, [r5, #0]
 8005568:	b016      	add	sp, #88	@ 0x58
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	466a      	mov	r2, sp
 800556e:	f000 f849 	bl	8005604 <_fstat_r>
 8005572:	2800      	cmp	r0, #0
 8005574:	dbed      	blt.n	8005552 <__swhatbuf_r+0x12>
 8005576:	9901      	ldr	r1, [sp, #4]
 8005578:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800557c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005580:	4259      	negs	r1, r3
 8005582:	4159      	adcs	r1, r3
 8005584:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005588:	e7eb      	b.n	8005562 <__swhatbuf_r+0x22>

0800558a <__smakebuf_r>:
 800558a:	898b      	ldrh	r3, [r1, #12]
 800558c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800558e:	079d      	lsls	r5, r3, #30
 8005590:	4606      	mov	r6, r0
 8005592:	460c      	mov	r4, r1
 8005594:	d507      	bpl.n	80055a6 <__smakebuf_r+0x1c>
 8005596:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	6123      	str	r3, [r4, #16]
 800559e:	2301      	movs	r3, #1
 80055a0:	6163      	str	r3, [r4, #20]
 80055a2:	b003      	add	sp, #12
 80055a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a6:	466a      	mov	r2, sp
 80055a8:	ab01      	add	r3, sp, #4
 80055aa:	f7ff ffc9 	bl	8005540 <__swhatbuf_r>
 80055ae:	9f00      	ldr	r7, [sp, #0]
 80055b0:	4605      	mov	r5, r0
 80055b2:	4639      	mov	r1, r7
 80055b4:	4630      	mov	r0, r6
 80055b6:	f7ff fab1 	bl	8004b1c <_malloc_r>
 80055ba:	b948      	cbnz	r0, 80055d0 <__smakebuf_r+0x46>
 80055bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c0:	059a      	lsls	r2, r3, #22
 80055c2:	d4ee      	bmi.n	80055a2 <__smakebuf_r+0x18>
 80055c4:	f023 0303 	bic.w	r3, r3, #3
 80055c8:	f043 0302 	orr.w	r3, r3, #2
 80055cc:	81a3      	strh	r3, [r4, #12]
 80055ce:	e7e2      	b.n	8005596 <__smakebuf_r+0xc>
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055da:	81a3      	strh	r3, [r4, #12]
 80055dc:	9b01      	ldr	r3, [sp, #4]
 80055de:	6020      	str	r0, [r4, #0]
 80055e0:	b15b      	cbz	r3, 80055fa <__smakebuf_r+0x70>
 80055e2:	4630      	mov	r0, r6
 80055e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055e8:	f000 f81e 	bl	8005628 <_isatty_r>
 80055ec:	b128      	cbz	r0, 80055fa <__smakebuf_r+0x70>
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	f023 0303 	bic.w	r3, r3, #3
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	431d      	orrs	r5, r3
 80055fe:	81a5      	strh	r5, [r4, #12]
 8005600:	e7cf      	b.n	80055a2 <__smakebuf_r+0x18>
	...

08005604 <_fstat_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	2300      	movs	r3, #0
 8005608:	4d06      	ldr	r5, [pc, #24]	@ (8005624 <_fstat_r+0x20>)
 800560a:	4604      	mov	r4, r0
 800560c:	4608      	mov	r0, r1
 800560e:	4611      	mov	r1, r2
 8005610:	602b      	str	r3, [r5, #0]
 8005612:	f7fd f80f 	bl	8002634 <_fstat>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d102      	bne.n	8005620 <_fstat_r+0x1c>
 800561a:	682b      	ldr	r3, [r5, #0]
 800561c:	b103      	cbz	r3, 8005620 <_fstat_r+0x1c>
 800561e:	6023      	str	r3, [r4, #0]
 8005620:	bd38      	pop	{r3, r4, r5, pc}
 8005622:	bf00      	nop
 8005624:	20000954 	.word	0x20000954

08005628 <_isatty_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	2300      	movs	r3, #0
 800562c:	4d05      	ldr	r5, [pc, #20]	@ (8005644 <_isatty_r+0x1c>)
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	602b      	str	r3, [r5, #0]
 8005634:	f7fd f80d 	bl	8002652 <_isatty>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_isatty_r+0x1a>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_isatty_r+0x1a>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	20000954 	.word	0x20000954

08005648 <sqrtf>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4605      	mov	r5, r0
 800564c:	f000 f816 	bl	800567c <__ieee754_sqrtf>
 8005650:	4629      	mov	r1, r5
 8005652:	4604      	mov	r4, r0
 8005654:	4628      	mov	r0, r5
 8005656:	f7fb fc6d 	bl	8000f34 <__aeabi_fcmpun>
 800565a:	b968      	cbnz	r0, 8005678 <sqrtf+0x30>
 800565c:	2100      	movs	r1, #0
 800565e:	4628      	mov	r0, r5
 8005660:	f7fb fc40 	bl	8000ee4 <__aeabi_fcmplt>
 8005664:	b140      	cbz	r0, 8005678 <sqrtf+0x30>
 8005666:	f7ff f99b 	bl	80049a0 <__errno>
 800566a:	2321      	movs	r3, #33	@ 0x21
 800566c:	2100      	movs	r1, #0
 800566e:	6003      	str	r3, [r0, #0]
 8005670:	4608      	mov	r0, r1
 8005672:	f7fb fb4d 	bl	8000d10 <__aeabi_fdiv>
 8005676:	4604      	mov	r4, r0
 8005678:	4620      	mov	r0, r4
 800567a:	bd38      	pop	{r3, r4, r5, pc}

0800567c <__ieee754_sqrtf>:
 800567c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8005680:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005688:	4603      	mov	r3, r0
 800568a:	4604      	mov	r4, r0
 800568c:	d30a      	bcc.n	80056a4 <__ieee754_sqrtf+0x28>
 800568e:	4601      	mov	r1, r0
 8005690:	f7fb fa8a 	bl	8000ba8 <__aeabi_fmul>
 8005694:	4601      	mov	r1, r0
 8005696:	4620      	mov	r0, r4
 8005698:	f7fb f97e 	bl	8000998 <__addsf3>
 800569c:	4604      	mov	r4, r0
 800569e:	4620      	mov	r0, r4
 80056a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a4:	2a00      	cmp	r2, #0
 80056a6:	d0fa      	beq.n	800569e <__ieee754_sqrtf+0x22>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	da06      	bge.n	80056ba <__ieee754_sqrtf+0x3e>
 80056ac:	4601      	mov	r1, r0
 80056ae:	f7fb f971 	bl	8000994 <__aeabi_fsub>
 80056b2:	4601      	mov	r1, r0
 80056b4:	f7fb fb2c 	bl	8000d10 <__aeabi_fdiv>
 80056b8:	e7f0      	b.n	800569c <__ieee754_sqrtf+0x20>
 80056ba:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80056be:	d03c      	beq.n	800573a <__ieee754_sqrtf+0xbe>
 80056c0:	15c2      	asrs	r2, r0, #23
 80056c2:	2400      	movs	r4, #0
 80056c4:	2019      	movs	r0, #25
 80056c6:	4626      	mov	r6, r4
 80056c8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80056cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80056d0:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 80056d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80056d8:	07d2      	lsls	r2, r2, #31
 80056da:	bf58      	it	pl
 80056dc:	005b      	lslpl	r3, r3, #1
 80056de:	106d      	asrs	r5, r5, #1
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	1872      	adds	r2, r6, r1
 80056e4:	429a      	cmp	r2, r3
 80056e6:	bfcf      	iteee	gt
 80056e8:	461a      	movgt	r2, r3
 80056ea:	1856      	addle	r6, r2, r1
 80056ec:	1864      	addle	r4, r4, r1
 80056ee:	1a9a      	suble	r2, r3, r2
 80056f0:	3801      	subs	r0, #1
 80056f2:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80056f6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80056fa:	d1f2      	bne.n	80056e2 <__ieee754_sqrtf+0x66>
 80056fc:	b1ba      	cbz	r2, 800572e <__ieee754_sqrtf+0xb2>
 80056fe:	4e15      	ldr	r6, [pc, #84]	@ (8005754 <__ieee754_sqrtf+0xd8>)
 8005700:	4f15      	ldr	r7, [pc, #84]	@ (8005758 <__ieee754_sqrtf+0xdc>)
 8005702:	6830      	ldr	r0, [r6, #0]
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	f7fb f945 	bl	8000994 <__aeabi_fsub>
 800570a:	f8d6 8000 	ldr.w	r8, [r6]
 800570e:	4601      	mov	r1, r0
 8005710:	4640      	mov	r0, r8
 8005712:	f7fb fbf1 	bl	8000ef8 <__aeabi_fcmple>
 8005716:	b150      	cbz	r0, 800572e <__ieee754_sqrtf+0xb2>
 8005718:	6830      	ldr	r0, [r6, #0]
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	f7fb f93c 	bl	8000998 <__addsf3>
 8005720:	6836      	ldr	r6, [r6, #0]
 8005722:	4601      	mov	r1, r0
 8005724:	4630      	mov	r0, r6
 8005726:	f7fb fbdd 	bl	8000ee4 <__aeabi_fcmplt>
 800572a:	b170      	cbz	r0, 800574a <__ieee754_sqrtf+0xce>
 800572c:	3402      	adds	r4, #2
 800572e:	1064      	asrs	r4, r4, #1
 8005730:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8005734:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8005738:	e7b1      	b.n	800569e <__ieee754_sqrtf+0x22>
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	0218      	lsls	r0, r3, #8
 800573e:	460a      	mov	r2, r1
 8005740:	f101 0101 	add.w	r1, r1, #1
 8005744:	d5f9      	bpl.n	800573a <__ieee754_sqrtf+0xbe>
 8005746:	4252      	negs	r2, r2
 8005748:	e7bb      	b.n	80056c2 <__ieee754_sqrtf+0x46>
 800574a:	3401      	adds	r4, #1
 800574c:	f024 0401 	bic.w	r4, r4, #1
 8005750:	e7ed      	b.n	800572e <__ieee754_sqrtf+0xb2>
 8005752:	bf00      	nop
 8005754:	08005880 	.word	0x08005880
 8005758:	0800587c 	.word	0x0800587c

0800575c <_init>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	bf00      	nop
 8005760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005762:	bc08      	pop	{r3}
 8005764:	469e      	mov	lr, r3
 8005766:	4770      	bx	lr

08005768 <_fini>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	bf00      	nop
 800576c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576e:	bc08      	pop	{r3}
 8005770:	469e      	mov	lr, r3
 8005772:	4770      	bx	lr
