
STM32F103C6T6_Fluid_Sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000274c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002858  08002858  00003858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002884  08002884  0000448c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002884  08002884  0000448c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002884  08002884  0000448c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002884  08002884  00003884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002888  08002888  00003888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000048c  20000000  0800288c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000048c  08002d18  0000448c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08002d18  00004508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000448c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d6b  00000000  00000000  000044b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001287  00000000  00000000  0000a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000534  00000000  00000000  0000bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014dba  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008828  00000000  00000000  00020e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c2b7  00000000  00000000  00029686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a593d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b18  00000000  00000000  000a5980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000a7498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000048c 	.word	0x2000048c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002840 	.word	0x08002840

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000490 	.word	0x20000490
 8000148:	08002840 	.word	0x08002840

0800014c <DrawBuffer>:
	{1,0,0,0,0,0,0,0}
};



void DrawBuffer(int buffer[FRAME_DIM][FRAME_DIM]) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < FRAME_DIM; i++) {
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e037      	b.n	80001ca <DrawBuffer+0x7e>
		for (int j = 0; j < FRAME_DIM; j++) {
 800015a:	2300      	movs	r3, #0
 800015c:	60bb      	str	r3, [r7, #8]
 800015e:	e02e      	b.n	80001be <DrawBuffer+0x72>
			if (buffer[i][j]){
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	015b      	lsls	r3, r3, #5
 8000164:	687a      	ldr	r2, [r7, #4]
 8000166:	4413      	add	r3, r2
 8000168:	68ba      	ldr	r2, [r7, #8]
 800016a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d011      	beq.n	8000196 <DrawBuffer+0x4a>
				frame[i * FRAME_DIM + j] &= ~0x200;
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	00da      	lsls	r2, r3, #3
 8000176:	68bb      	ldr	r3, [r7, #8]
 8000178:	4413      	add	r3, r2
 800017a:	4a18      	ldr	r2, [pc, #96]	@ (80001dc <DrawBuffer+0x90>)
 800017c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	00d9      	lsls	r1, r3, #3
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	440b      	add	r3, r1
 8000188:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800018c:	b291      	uxth	r1, r2
 800018e:	4a13      	ldr	r2, [pc, #76]	@ (80001dc <DrawBuffer+0x90>)
 8000190:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000194:	e010      	b.n	80001b8 <DrawBuffer+0x6c>
			}
			else {
				frame[i * FRAME_DIM + j] |= 0x200;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	00da      	lsls	r2, r3, #3
 800019a:	68bb      	ldr	r3, [r7, #8]
 800019c:	4413      	add	r3, r2
 800019e:	4a0f      	ldr	r2, [pc, #60]	@ (80001dc <DrawBuffer+0x90>)
 80001a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	00d9      	lsls	r1, r3, #3
 80001a8:	68bb      	ldr	r3, [r7, #8]
 80001aa:	440b      	add	r3, r1
 80001ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80001b0:	b291      	uxth	r1, r2
 80001b2:	4a0a      	ldr	r2, [pc, #40]	@ (80001dc <DrawBuffer+0x90>)
 80001b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int j = 0; j < FRAME_DIM; j++) {
 80001b8:	68bb      	ldr	r3, [r7, #8]
 80001ba:	3301      	adds	r3, #1
 80001bc:	60bb      	str	r3, [r7, #8]
 80001be:	68bb      	ldr	r3, [r7, #8]
 80001c0:	2b07      	cmp	r3, #7
 80001c2:	ddcd      	ble.n	8000160 <DrawBuffer+0x14>
	for (int i = 0; i < FRAME_DIM; i++) {
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	3301      	adds	r3, #1
 80001c8:	60fb      	str	r3, [r7, #12]
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	2b07      	cmp	r3, #7
 80001ce:	ddc4      	ble.n	800015a <DrawBuffer+0xe>
			}
		}
	}
}
 80001d0:	bf00      	nop
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	20000000 	.word	0x20000000

080001e0 <check_mpu>:
	}
}

#define MPU6050_ADDR 0x68 << 1  // Przesunięcie dla HAL (7-bit + R/W bit)

void check_mpu() {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
    if (HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 3, 100) == HAL_OK) {
 80001e4:	2364      	movs	r3, #100	@ 0x64
 80001e6:	2203      	movs	r2, #3
 80001e8:	21d0      	movs	r1, #208	@ 0xd0
 80001ea:	4802      	ldr	r0, [pc, #8]	@ (80001f4 <check_mpu+0x14>)
 80001ec:	f001 fa1e 	bl	800162c <HAL_I2C_IsDeviceReady>
        // Urządzenie jest gotowe
    } else {
        // Brak odpowiedzi
    }
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	200004a8 	.word	0x200004a8

080001f8 <MPU6050_Init>:

void MPU6050_Init() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &data, 1, 100); // Rejestr 0x6B = PWR_MGMT_1
 8000202:	2364      	movs	r3, #100	@ 0x64
 8000204:	9302      	str	r3, [sp, #8]
 8000206:	2301      	movs	r3, #1
 8000208:	9301      	str	r3, [sp, #4]
 800020a:	1dfb      	adds	r3, r7, #7
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2301      	movs	r3, #1
 8000210:	226b      	movs	r2, #107	@ 0x6b
 8000212:	21d0      	movs	r1, #208	@ 0xd0
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <MPU6050_Init+0x2c>)
 8000216:	f000 fe9b 	bl	8000f50 <HAL_I2C_Mem_Write>
}
 800021a:	bf00      	nop
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	200004a8 	.word	0x200004a8

08000228 <MPU6050_Read_Accel>:
    int16_t z;
} AccelData_t;

AccelData_t accel;

AccelData_t MPU6050_Read_Accel() {
 8000228:	b580      	push	{r7, lr}
 800022a:	b08a      	sub	sp, #40	@ 0x28
 800022c:	af04      	add	r7, sp, #16
 800022e:	6078      	str	r0, [r7, #4]
    uint8_t Rec_Data[6];
    AccelData_t accel;

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 100);
 8000230:	2364      	movs	r3, #100	@ 0x64
 8000232:	9302      	str	r3, [sp, #8]
 8000234:	2306      	movs	r3, #6
 8000236:	9301      	str	r3, [sp, #4]
 8000238:	f107 0310 	add.w	r3, r7, #16
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	2301      	movs	r3, #1
 8000240:	223b      	movs	r2, #59	@ 0x3b
 8000242:	21d0      	movs	r1, #208	@ 0xd0
 8000244:	4814      	ldr	r0, [pc, #80]	@ (8000298 <MPU6050_Read_Accel+0x70>)
 8000246:	f000 ff7d 	bl	8001144 <HAL_I2C_Mem_Read>

    accel.x = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800024a:	7c3b      	ldrb	r3, [r7, #16]
 800024c:	b21b      	sxth	r3, r3
 800024e:	021b      	lsls	r3, r3, #8
 8000250:	b21a      	sxth	r2, r3
 8000252:	7c7b      	ldrb	r3, [r7, #17]
 8000254:	b21b      	sxth	r3, r3
 8000256:	4313      	orrs	r3, r2
 8000258:	b21b      	sxth	r3, r3
 800025a:	813b      	strh	r3, [r7, #8]
    accel.y = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800025c:	7cbb      	ldrb	r3, [r7, #18]
 800025e:	b21b      	sxth	r3, r3
 8000260:	021b      	lsls	r3, r3, #8
 8000262:	b21a      	sxth	r2, r3
 8000264:	7cfb      	ldrb	r3, [r7, #19]
 8000266:	b21b      	sxth	r3, r3
 8000268:	4313      	orrs	r3, r2
 800026a:	b21b      	sxth	r3, r3
 800026c:	817b      	strh	r3, [r7, #10]
    accel.z = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800026e:	7d3b      	ldrb	r3, [r7, #20]
 8000270:	b21b      	sxth	r3, r3
 8000272:	021b      	lsls	r3, r3, #8
 8000274:	b21a      	sxth	r2, r3
 8000276:	7d7b      	ldrb	r3, [r7, #21]
 8000278:	b21b      	sxth	r3, r3
 800027a:	4313      	orrs	r3, r2
 800027c:	b21b      	sxth	r3, r3
 800027e:	81bb      	strh	r3, [r7, #12]

    return accel;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	461a      	mov	r2, r3
 8000284:	f107 0308 	add.w	r3, r7, #8
 8000288:	6818      	ldr	r0, [r3, #0]
 800028a:	6010      	str	r0, [r2, #0]
 800028c:	889b      	ldrh	r3, [r3, #4]
 800028e:	8093      	strh	r3, [r2, #4]
}
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	3718      	adds	r7, #24
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	200004a8 	.word	0x200004a8

0800029c <TestAccel>:

void TestAccel(){
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
	accel = MPU6050_Read_Accel();
 80002a2:	4c1e      	ldr	r4, [pc, #120]	@ (800031c <TestAccel+0x80>)
 80002a4:	463b      	mov	r3, r7
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffbe 	bl	8000228 <MPU6050_Read_Accel>
 80002ac:	4622      	mov	r2, r4
 80002ae:	463b      	mov	r3, r7
 80002b0:	6818      	ldr	r0, [r3, #0]
 80002b2:	6010      	str	r0, [r2, #0]
 80002b4:	889b      	ldrh	r3, [r3, #4]
 80002b6:	8093      	strh	r3, [r2, #4]

	int abs_y = accel.y < 0 ? -accel.y : accel.y;
 80002b8:	4b18      	ldr	r3, [pc, #96]	@ (800031c <TestAccel+0x80>)
 80002ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	bfb8      	it	lt
 80002c2:	425b      	neglt	r3, r3
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	60fb      	str	r3, [r7, #12]
	int abs_z = accel.z < 0 ? -accel.z : accel.z;
 80002c8:	4b14      	ldr	r3, [pc, #80]	@ (800031c <TestAccel+0x80>)
 80002ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	bfb8      	it	lt
 80002d2:	425b      	neglt	r3, r3
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	60bb      	str	r3, [r7, #8]

	if (abs_y > abs_z){
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	429a      	cmp	r2, r3
 80002de:	dd0c      	ble.n	80002fa <TestAccel+0x5e>
		if (accel.y < 0){
 80002e0:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <TestAccel+0x80>)
 80002e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	da03      	bge.n	80002f2 <TestAccel+0x56>
			DrawBuffer(RIGHT_buffer);
 80002ea:	480d      	ldr	r0, [pc, #52]	@ (8000320 <TestAccel+0x84>)
 80002ec:	f7ff ff2e 	bl	800014c <DrawBuffer>
		}
		else {
			DrawBuffer(UP_buffer);
		}
	}
}
 80002f0:	e00f      	b.n	8000312 <TestAccel+0x76>
			DrawBuffer(LEFT_buffer);
 80002f2:	480c      	ldr	r0, [pc, #48]	@ (8000324 <TestAccel+0x88>)
 80002f4:	f7ff ff2a 	bl	800014c <DrawBuffer>
}
 80002f8:	e00b      	b.n	8000312 <TestAccel+0x76>
		if (accel.z < 0){
 80002fa:	4b08      	ldr	r3, [pc, #32]	@ (800031c <TestAccel+0x80>)
 80002fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000300:	2b00      	cmp	r3, #0
 8000302:	da03      	bge.n	800030c <TestAccel+0x70>
			DrawBuffer(DOWN_buffer);
 8000304:	4808      	ldr	r0, [pc, #32]	@ (8000328 <TestAccel+0x8c>)
 8000306:	f7ff ff21 	bl	800014c <DrawBuffer>
}
 800030a:	e002      	b.n	8000312 <TestAccel+0x76>
			DrawBuffer(UP_buffer);
 800030c:	4807      	ldr	r0, [pc, #28]	@ (800032c <TestAccel+0x90>)
 800030e:	f7ff ff1d 	bl	800014c <DrawBuffer>
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	bd90      	pop	{r4, r7, pc}
 800031a:	bf00      	nop
 800031c:	200004fc 	.word	0x200004fc
 8000320:	20000380 	.word	0x20000380
 8000324:	20000280 	.word	0x20000280
 8000328:	20000180 	.word	0x20000180
 800032c:	20000080 	.word	0x20000080

08000330 <main>:

int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0


	HAL_Init();
 8000334:	f000 f9ee 	bl	8000714 <HAL_Init>
	SystemClock_Config();
 8000338:	f000 f850 	bl	80003dc <SystemClock_Config>
	MX_GPIO_Init();
 800033c:	f000 f8b8 	bl	80004b0 <MX_GPIO_Init>



	// Włącz DMA i Timer
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000340:	4b22      	ldr	r3, [pc, #136]	@ (80003cc <main+0x9c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a21      	ldr	r2, [pc, #132]	@ (80003cc <main+0x9c>)
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800034c:	4b1f      	ldr	r3, [pc, #124]	@ (80003cc <main+0x9c>)
 800034e:	69db      	ldr	r3, [r3, #28]
 8000350:	4a1e      	ldr	r2, [pc, #120]	@ (80003cc <main+0x9c>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	61d3      	str	r3, [r2, #28]

	// DMA1_Channel2 ← wyzwalany przez TIM2_UP
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;  // wyłącz DMA przed konfiguracją
 8000358:	4b1d      	ldr	r3, [pc, #116]	@ (80003d0 <main+0xa0>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a1c      	ldr	r2, [pc, #112]	@ (80003d0 <main+0xa0>)
 800035e:	f023 0301 	bic.w	r3, r3, #1
 8000362:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CPAR = (uint32_t)&GPIOA->ODR;
 8000364:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <main+0xa0>)
 8000366:	4a1b      	ldr	r2, [pc, #108]	@ (80003d4 <main+0xa4>)
 8000368:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)frame;
 800036a:	4b19      	ldr	r3, [pc, #100]	@ (80003d0 <main+0xa0>)
 800036c:	4a1a      	ldr	r2, [pc, #104]	@ (80003d8 <main+0xa8>)
 800036e:	60da      	str	r2, [r3, #12]
	DMA1_Channel2->CNDTR = FRAME_SIZE;
 8000370:	4b17      	ldr	r3, [pc, #92]	@ (80003d0 <main+0xa0>)
 8000372:	2240      	movs	r2, #64	@ 0x40
 8000374:	605a      	str	r2, [r3, #4]

	DMA1_Channel2->CCR =
 8000376:	4b16      	ldr	r3, [pc, #88]	@ (80003d0 <main+0xa0>)
 8000378:	f44f 62b6 	mov.w	r2, #1456	@ 0x5b0
 800037c:	601a      	str	r2, [r3, #0]
	    DMA_CCR_DIR  |         // Mem → Periph
	    DMA_CCR_CIRC |         // Cyklicznie
	    DMA_CCR_MSIZE_0 |      // MSIZE = 16-bit
	    DMA_CCR_PSIZE_0;       // PSIZE = 16-bit

	DMA1_Channel2->CCR |= DMA_CCR_EN;   // włącz DMA
 800037e:	4b14      	ldr	r3, [pc, #80]	@ (80003d0 <main+0xa0>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a13      	ldr	r2, [pc, #76]	@ (80003d0 <main+0xa0>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6013      	str	r3, [r2, #0]

	// Timer 2 – co 1 ms
	TIM2->PSC = 72 - 1;  // (72MHz / 7200 = 10kHz)
 800038a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800038e:	2247      	movs	r2, #71	@ 0x47
 8000390:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 10 - 1;    // co 1 ms
 8000392:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000396:	2209      	movs	r2, #9
 8000398:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->DIER |= TIM_DIER_UDE; // update event triggers DMA
 800039a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003a8:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_CEN;   // start
 80003aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6013      	str	r3, [r2, #0]

	MX_I2C1_Init(); // wygenerowane przez CubeMX
 80003ba:	f000 f84b 	bl	8000454 <MX_I2C1_Init>

	check_mpu();     // sprawdź czy odpowiada
 80003be:	f7ff ff0f 	bl	80001e0 <check_mpu>
	MPU6050_Init();  // wybudź MPU6050
 80003c2:	f7ff ff19 	bl	80001f8 <MPU6050_Init>

	while (1)
	{
		//GPIO_PinState state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
		TestAccel();
 80003c6:	f7ff ff69 	bl	800029c <TestAccel>
 80003ca:	e7fc      	b.n	80003c6 <main+0x96>
 80003cc:	40021000 	.word	0x40021000
 80003d0:	4002001c 	.word	0x4002001c
 80003d4:	4001080c 	.word	0x4001080c
 80003d8:	20000000 	.word	0x20000000

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b090      	sub	sp, #64	@ 0x40
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0318 	add.w	r3, r7, #24
 80003e6:	2228      	movs	r2, #40	@ 0x28
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 f9fc 	bl	80027e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fe:	2302      	movs	r3, #2
 8000400:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000402:	2301      	movs	r3, #1
 8000404:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000406:	2310      	movs	r3, #16
 8000408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800040a:	2300      	movs	r3, #0
 800040c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	f107 0318 	add.w	r3, r7, #24
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fdec 	bl	8001ff0 <HAL_RCC_OscConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800041e:	f000 f8a9 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000422:	230f      	movs	r3, #15
 8000424:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f002 f85a 	bl	80024f4 <HAL_RCC_ClockConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000446:	f000 f895 	bl	8000574 <Error_Handler>
  }
}
 800044a:	bf00      	nop
 800044c:	3740      	adds	r7, #64	@ 0x40
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000458:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <MX_I2C1_Init+0x50>)
 800045a:	4a13      	ldr	r2, [pc, #76]	@ (80004a8 <MX_I2C1_Init+0x54>)
 800045c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800045e:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_I2C1_Init+0x50>)
 8000460:	4a12      	ldr	r2, [pc, #72]	@ (80004ac <MX_I2C1_Init+0x58>)
 8000462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <MX_I2C1_Init+0x50>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_I2C1_Init+0x50>)
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <MX_I2C1_Init+0x50>)
 8000472:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000478:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <MX_I2C1_Init+0x50>)
 800047a:	2200      	movs	r2, #0
 800047c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800047e:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <MX_I2C1_Init+0x50>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000484:	4b07      	ldr	r3, [pc, #28]	@ (80004a4 <MX_I2C1_Init+0x50>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800048a:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <MX_I2C1_Init+0x50>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000490:	4804      	ldr	r0, [pc, #16]	@ (80004a4 <MX_I2C1_Init+0x50>)
 8000492:	f000 fc19 	bl	8000cc8 <HAL_I2C_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800049c:	f000 f86a 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	200004a8 	.word	0x200004a8
 80004a8:	40005400 	.word	0x40005400
 80004ac:	000186a0 	.word	0x000186a0

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	4b28      	ldr	r3, [pc, #160]	@ (8000568 <MX_GPIO_Init+0xb8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a27      	ldr	r2, [pc, #156]	@ (8000568 <MX_GPIO_Init+0xb8>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b25      	ldr	r3, [pc, #148]	@ (8000568 <MX_GPIO_Init+0xb8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0304 	and.w	r3, r3, #4
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004dc:	4b22      	ldr	r3, [pc, #136]	@ (8000568 <MX_GPIO_Init+0xb8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a21      	ldr	r2, [pc, #132]	@ (8000568 <MX_GPIO_Init+0xb8>)
 80004e2:	f043 0308 	orr.w	r3, r3, #8
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000568 <MX_GPIO_Init+0xb8>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0308 	and.w	r3, r3, #8
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004f4:	2200      	movs	r2, #0
 80004f6:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 80004fa:	481c      	ldr	r0, [pc, #112]	@ (800056c <MX_GPIO_Init+0xbc>)
 80004fc:	f000 fbcc 	bl	8000c98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
 8000506:	481a      	ldr	r0, [pc, #104]	@ (8000570 <MX_GPIO_Init+0xc0>)
 8000508:	f000 fbc6 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800050c:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000510:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	2301      	movs	r3, #1
 8000514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	2302      	movs	r3, #2
 800051c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 0308 	add.w	r3, r7, #8
 8000522:	4619      	mov	r1, r3
 8000524:	4811      	ldr	r0, [pc, #68]	@ (800056c <MX_GPIO_Init+0xbc>)
 8000526:	f000 fa3b 	bl	80009a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800052a:	2307      	movs	r3, #7
 800052c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000536:	f107 0308 	add.w	r3, r7, #8
 800053a:	4619      	mov	r1, r3
 800053c:	480c      	ldr	r0, [pc, #48]	@ (8000570 <MX_GPIO_Init+0xc0>)
 800053e:	f000 fa2f 	bl	80009a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000542:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000546:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2302      	movs	r3, #2
 8000552:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	4619      	mov	r1, r3
 800055a:	4805      	ldr	r0, [pc, #20]	@ (8000570 <MX_GPIO_Init+0xc0>)
 800055c:	f000 fa20 	bl	80009a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000560:	bf00      	nop
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	40010800 	.word	0x40010800
 8000570:	40010c00 	.word	0x40010c00

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <Error_Handler+0x8>

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <HAL_MspInit+0x5c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a14      	ldr	r2, [pc, #80]	@ (80005dc <HAL_MspInit+0x5c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <HAL_MspInit+0x5c>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <HAL_MspInit+0x5c>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <HAL_MspInit+0x5c>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <HAL_MspInit+0x5c>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005b6:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <HAL_MspInit+0x60>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <HAL_MspInit+0x60>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010000 	.word	0x40010000

080005e4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a16      	ldr	r2, [pc, #88]	@ (8000658 <HAL_I2C_MspInit+0x74>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d125      	bne.n	8000650 <HAL_I2C_MspInit+0x6c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b15      	ldr	r3, [pc, #84]	@ (800065c <HAL_I2C_MspInit+0x78>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a14      	ldr	r2, [pc, #80]	@ (800065c <HAL_I2C_MspInit+0x78>)
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <HAL_I2C_MspInit+0x78>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800061c:	23c0      	movs	r3, #192	@ 0xc0
 800061e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000620:	2312      	movs	r3, #18
 8000622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	480b      	ldr	r0, [pc, #44]	@ (8000660 <HAL_I2C_MspInit+0x7c>)
 8000634:	f000 f9b4 	bl	80009a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <HAL_I2C_MspInit+0x78>)
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <HAL_I2C_MspInit+0x78>)
 800063e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000642:	61d3      	str	r3, [r2, #28]
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_I2C_MspInit+0x78>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40005400 	.word	0x40005400
 800065c:	40021000 	.word	0x40021000
 8000660:	40010c00 	.word	0x40010c00

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <NMI_Handler+0x4>

0800066c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <MemManage_Handler+0x4>

0800067c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <UsageFault_Handler+0x4>

0800068c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 f874 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c8:	f7ff fff8 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480b      	ldr	r0, [pc, #44]	@ (80006fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006ce:	490c      	ldr	r1, [pc, #48]	@ (8000700 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000704 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a09      	ldr	r2, [pc, #36]	@ (8000708 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006e4:	4c09      	ldr	r4, [pc, #36]	@ (800070c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006f2:	f002 f881 	bl	80027f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fe1b 	bl	8000330 <main>
  bx lr
 80006fa:	4770      	bx	lr
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	2000048c 	.word	0x2000048c
  ldr r2, =_sidata
 8000704:	0800288c 	.word	0x0800288c
  ldr r2, =_sbss
 8000708:	2000048c 	.word	0x2000048c
  ldr r4, =_ebss
 800070c:	20000508 	.word	0x20000508

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HAL_Init+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a07      	ldr	r2, [pc, #28]	@ (800073c <HAL_Init+0x28>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f907 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072a:	200f      	movs	r0, #15
 800072c:	f000 f808 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000730:	f7ff ff26 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_InitTick+0x54>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_InitTick+0x58>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000756:	fbb3 f3f1 	udiv	r3, r3, r1
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f911 	bl	8000986 <HAL_SYSTICK_Config>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e00e      	b.n	800078c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d80a      	bhi.n	800078a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000774:	2200      	movs	r2, #0
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f000 f8e7 	bl	800094e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000780:	4a06      	ldr	r2, [pc, #24]	@ (800079c <HAL_InitTick+0x5c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e000      	b.n	800078c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000480 	.word	0x20000480
 8000798:	20000488 	.word	0x20000488
 800079c:	20000484 	.word	0x20000484

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <HAL_IncTick+0x1c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <HAL_IncTick+0x20>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a03      	ldr	r2, [pc, #12]	@ (80007c0 <HAL_IncTick+0x20>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000488 	.word	0x20000488
 80007c0:	20000504 	.word	0x20000504

080007c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b02      	ldr	r3, [pc, #8]	@ (80007d4 <HAL_GetTick+0x10>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	20000504 	.word	0x20000504

080007d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <__NVIC_SetPriorityGrouping+0x44>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000800:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080a:	4a04      	ldr	r2, [pc, #16]	@ (800081c <__NVIC_SetPriorityGrouping+0x44>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	60d3      	str	r3, [r2, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <__NVIC_GetPriorityGrouping+0x18>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	f003 0307 	and.w	r3, r3, #7
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	@ (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	@ (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	@ 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f1c3 0307 	rsb	r3, r3, #7
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	bf28      	it	cs
 80008ae:	2304      	movcs	r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d902      	bls.n	80008c0 <NVIC_EncodePriority+0x30>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3b03      	subs	r3, #3
 80008be:	e000      	b.n	80008c2 <NVIC_EncodePriority+0x32>
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43da      	mvns	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	401a      	ands	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43d9      	mvns	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	4313      	orrs	r3, r2
         );
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	@ 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000904:	d301      	bcc.n	800090a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <SysTick_Config+0x40>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000912:	210f      	movs	r1, #15
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f7ff ff90 	bl	800083c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <SysTick_Config+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <SysTick_Config+0x40>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010

08000938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff49 	bl	80007d8 <__NVIC_SetPriorityGrouping>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000960:	f7ff ff5e 	bl	8000820 <__NVIC_GetPriorityGrouping>
 8000964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f7ff ff90 	bl	8000890 <NVIC_EncodePriority>
 8000970:	4602      	mov	r2, r0
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff5f 	bl	800083c <__NVIC_SetPriority>
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ffb0 	bl	80008f4 <SysTick_Config>
 8000994:	4603      	mov	r3, r0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b08b      	sub	sp, #44	@ 0x2c
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b2:	e161      	b.n	8000c78 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009b4:	2201      	movs	r2, #1
 80009b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	4013      	ands	r3, r2
 80009c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	f040 8150 	bne.w	8000c72 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4a97      	ldr	r2, [pc, #604]	@ (8000c34 <HAL_GPIO_Init+0x294>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d05e      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
 80009dc:	4a95      	ldr	r2, [pc, #596]	@ (8000c34 <HAL_GPIO_Init+0x294>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d875      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 80009e2:	4a95      	ldr	r2, [pc, #596]	@ (8000c38 <HAL_GPIO_Init+0x298>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d058      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
 80009e8:	4a93      	ldr	r2, [pc, #588]	@ (8000c38 <HAL_GPIO_Init+0x298>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d86f      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 80009ee:	4a93      	ldr	r2, [pc, #588]	@ (8000c3c <HAL_GPIO_Init+0x29c>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d052      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
 80009f4:	4a91      	ldr	r2, [pc, #580]	@ (8000c3c <HAL_GPIO_Init+0x29c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d869      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 80009fa:	4a91      	ldr	r2, [pc, #580]	@ (8000c40 <HAL_GPIO_Init+0x2a0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d04c      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
 8000a00:	4a8f      	ldr	r2, [pc, #572]	@ (8000c40 <HAL_GPIO_Init+0x2a0>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d863      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 8000a06:	4a8f      	ldr	r2, [pc, #572]	@ (8000c44 <HAL_GPIO_Init+0x2a4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d046      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
 8000a0c:	4a8d      	ldr	r2, [pc, #564]	@ (8000c44 <HAL_GPIO_Init+0x2a4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d85d      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 8000a12:	2b12      	cmp	r3, #18
 8000a14:	d82a      	bhi.n	8000a6c <HAL_GPIO_Init+0xcc>
 8000a16:	2b12      	cmp	r3, #18
 8000a18:	d859      	bhi.n	8000ace <HAL_GPIO_Init+0x12e>
 8000a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a20 <HAL_GPIO_Init+0x80>)
 8000a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a20:	08000a9b 	.word	0x08000a9b
 8000a24:	08000a75 	.word	0x08000a75
 8000a28:	08000a87 	.word	0x08000a87
 8000a2c:	08000ac9 	.word	0x08000ac9
 8000a30:	08000acf 	.word	0x08000acf
 8000a34:	08000acf 	.word	0x08000acf
 8000a38:	08000acf 	.word	0x08000acf
 8000a3c:	08000acf 	.word	0x08000acf
 8000a40:	08000acf 	.word	0x08000acf
 8000a44:	08000acf 	.word	0x08000acf
 8000a48:	08000acf 	.word	0x08000acf
 8000a4c:	08000acf 	.word	0x08000acf
 8000a50:	08000acf 	.word	0x08000acf
 8000a54:	08000acf 	.word	0x08000acf
 8000a58:	08000acf 	.word	0x08000acf
 8000a5c:	08000acf 	.word	0x08000acf
 8000a60:	08000acf 	.word	0x08000acf
 8000a64:	08000a7d 	.word	0x08000a7d
 8000a68:	08000a91 	.word	0x08000a91
 8000a6c:	4a76      	ldr	r2, [pc, #472]	@ (8000c48 <HAL_GPIO_Init+0x2a8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a72:	e02c      	b.n	8000ace <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	623b      	str	r3, [r7, #32]
          break;
 8000a7a:	e029      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	3304      	adds	r3, #4
 8000a82:	623b      	str	r3, [r7, #32]
          break;
 8000a84:	e024      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	3308      	adds	r3, #8
 8000a8c:	623b      	str	r3, [r7, #32]
          break;
 8000a8e:	e01f      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	330c      	adds	r3, #12
 8000a96:	623b      	str	r3, [r7, #32]
          break;
 8000a98:	e01a      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e013      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d105      	bne.n	8000abc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	611a      	str	r2, [r3, #16]
          break;
 8000aba:	e009      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000abc:	2308      	movs	r3, #8
 8000abe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	69fa      	ldr	r2, [r7, #28]
 8000ac4:	615a      	str	r2, [r3, #20]
          break;
 8000ac6:	e003      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
          break;
 8000acc:	e000      	b.n	8000ad0 <HAL_GPIO_Init+0x130>
          break;
 8000ace:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	2bff      	cmp	r3, #255	@ 0xff
 8000ad4:	d801      	bhi.n	8000ada <HAL_GPIO_Init+0x13a>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	e001      	b.n	8000ade <HAL_GPIO_Init+0x13e>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3304      	adds	r3, #4
 8000ade:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	2bff      	cmp	r3, #255	@ 0xff
 8000ae4:	d802      	bhi.n	8000aec <HAL_GPIO_Init+0x14c>
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	e002      	b.n	8000af2 <HAL_GPIO_Init+0x152>
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	3b08      	subs	r3, #8
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	210f      	movs	r1, #15
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	fa01 f303 	lsl.w	r3, r1, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	401a      	ands	r2, r3
 8000b04:	6a39      	ldr	r1, [r7, #32]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 80a9 	beq.w	8000c72 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b20:	4b4a      	ldr	r3, [pc, #296]	@ (8000c4c <HAL_GPIO_Init+0x2ac>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a49      	ldr	r2, [pc, #292]	@ (8000c4c <HAL_GPIO_Init+0x2ac>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b47      	ldr	r3, [pc, #284]	@ (8000c4c <HAL_GPIO_Init+0x2ac>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b38:	4a45      	ldr	r2, [pc, #276]	@ (8000c50 <HAL_GPIO_Init+0x2b0>)
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3c:	089b      	lsrs	r3, r3, #2
 8000b3e:	3302      	adds	r3, #2
 8000b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b48:	f003 0303 	and.w	r3, r3, #3
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	220f      	movs	r2, #15
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c54 <HAL_GPIO_Init+0x2b4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d00d      	beq.n	8000b80 <HAL_GPIO_Init+0x1e0>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a3c      	ldr	r2, [pc, #240]	@ (8000c58 <HAL_GPIO_Init+0x2b8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d007      	beq.n	8000b7c <HAL_GPIO_Init+0x1dc>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8000c5c <HAL_GPIO_Init+0x2bc>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d101      	bne.n	8000b78 <HAL_GPIO_Init+0x1d8>
 8000b74:	2302      	movs	r3, #2
 8000b76:	e004      	b.n	8000b82 <HAL_GPIO_Init+0x1e2>
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e002      	b.n	8000b82 <HAL_GPIO_Init+0x1e2>
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e000      	b.n	8000b82 <HAL_GPIO_Init+0x1e2>
 8000b80:	2300      	movs	r3, #0
 8000b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b84:	f002 0203 	and.w	r2, r2, #3
 8000b88:	0092      	lsls	r2, r2, #2
 8000b8a:	4093      	lsls	r3, r2
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b92:	492f      	ldr	r1, [pc, #188]	@ (8000c50 <HAL_GPIO_Init+0x2b0>)
 8000b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	3302      	adds	r3, #2
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d006      	beq.n	8000bba <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bac:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	492b      	ldr	r1, [pc, #172]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	608b      	str	r3, [r1, #8]
 8000bb8:	e006      	b.n	8000bc8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bba:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	4927      	ldr	r1, [pc, #156]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd4:	4b22      	ldr	r3, [pc, #136]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	4921      	ldr	r1, [pc, #132]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	60cb      	str	r3, [r1, #12]
 8000be0:	e006      	b.n	8000bf0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000be2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	491d      	ldr	r1, [pc, #116]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bfc:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	4917      	ldr	r1, [pc, #92]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	604b      	str	r3, [r1, #4]
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	4913      	ldr	r1, [pc, #76]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d01f      	beq.n	8000c64 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	490d      	ldr	r1, [pc, #52]	@ (8000c60 <HAL_GPIO_Init+0x2c0>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	600b      	str	r3, [r1, #0]
 8000c30:	e01f      	b.n	8000c72 <HAL_GPIO_Init+0x2d2>
 8000c32:	bf00      	nop
 8000c34:	10320000 	.word	0x10320000
 8000c38:	10310000 	.word	0x10310000
 8000c3c:	10220000 	.word	0x10220000
 8000c40:	10210000 	.word	0x10210000
 8000c44:	10120000 	.word	0x10120000
 8000c48:	10110000 	.word	0x10110000
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000
 8000c54:	40010800 	.word	0x40010800
 8000c58:	40010c00 	.word	0x40010c00
 8000c5c:	40011000 	.word	0x40011000
 8000c60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <HAL_GPIO_Init+0x2f4>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	4909      	ldr	r1, [pc, #36]	@ (8000c94 <HAL_GPIO_Init+0x2f4>)
 8000c6e:	4013      	ands	r3, r2
 8000c70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	3301      	adds	r3, #1
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f47f ae96 	bne.w	80009b4 <HAL_GPIO_Init+0x14>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	372c      	adds	r7, #44	@ 0x2c
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40010400 	.word	0x40010400

08000c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cb4:	e003      	b.n	8000cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	041a      	lsls	r2, r3, #16
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	611a      	str	r2, [r3, #16]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e12b      	b.n	8000f32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d106      	bne.n	8000cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fc78 	bl	80005e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2224      	movs	r2, #36	@ 0x24
 8000cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 0201 	bic.w	r2, r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d2c:	f001 fd2a 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8000d30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	4a81      	ldr	r2, [pc, #516]	@ (8000f3c <HAL_I2C_Init+0x274>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d807      	bhi.n	8000d4c <HAL_I2C_Init+0x84>
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4a80      	ldr	r2, [pc, #512]	@ (8000f40 <HAL_I2C_Init+0x278>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	bf94      	ite	ls
 8000d44:	2301      	movls	r3, #1
 8000d46:	2300      	movhi	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	e006      	b.n	8000d5a <HAL_I2C_Init+0x92>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4a7d      	ldr	r2, [pc, #500]	@ (8000f44 <HAL_I2C_Init+0x27c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	bf94      	ite	ls
 8000d54:	2301      	movls	r3, #1
 8000d56:	2300      	movhi	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e0e7      	b.n	8000f32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4a78      	ldr	r2, [pc, #480]	@ (8000f48 <HAL_I2C_Init+0x280>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	0c9b      	lsrs	r3, r3, #18
 8000d6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4a6a      	ldr	r2, [pc, #424]	@ (8000f3c <HAL_I2C_Init+0x274>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d802      	bhi.n	8000d9c <HAL_I2C_Init+0xd4>
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	e009      	b.n	8000db0 <HAL_I2C_Init+0xe8>
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	4a69      	ldr	r2, [pc, #420]	@ (8000f4c <HAL_I2C_Init+0x284>)
 8000da8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dac:	099b      	lsrs	r3, r3, #6
 8000dae:	3301      	adds	r3, #1
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000dc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	495c      	ldr	r1, [pc, #368]	@ (8000f3c <HAL_I2C_Init+0x274>)
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d819      	bhi.n	8000e04 <HAL_I2C_Init+0x13c>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	1e59      	subs	r1, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dde:	1c59      	adds	r1, r3, #1
 8000de0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000de4:	400b      	ands	r3, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00a      	beq.n	8000e00 <HAL_I2C_Init+0x138>
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	1e59      	subs	r1, r3, #1
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dfe:	e051      	b.n	8000ea4 <HAL_I2C_Init+0x1dc>
 8000e00:	2304      	movs	r3, #4
 8000e02:	e04f      	b.n	8000ea4 <HAL_I2C_Init+0x1dc>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d111      	bne.n	8000e30 <HAL_I2C_Init+0x168>
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1e58      	subs	r0, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6859      	ldr	r1, [r3, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	440b      	add	r3, r1
 8000e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf0c      	ite	eq
 8000e28:	2301      	moveq	r3, #1
 8000e2a:	2300      	movne	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	e012      	b.n	8000e56 <HAL_I2C_Init+0x18e>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6859      	ldr	r1, [r3, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	0099      	lsls	r1, r3, #2
 8000e40:	440b      	add	r3, r1
 8000e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	bf0c      	ite	eq
 8000e50:	2301      	moveq	r3, #1
 8000e52:	2300      	movne	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_I2C_Init+0x196>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e022      	b.n	8000ea4 <HAL_I2C_Init+0x1dc>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10e      	bne.n	8000e84 <HAL_I2C_Init+0x1bc>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	1e58      	subs	r0, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6859      	ldr	r1, [r3, #4]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	440b      	add	r3, r1
 8000e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e78:	3301      	adds	r3, #1
 8000e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e82:	e00f      	b.n	8000ea4 <HAL_I2C_Init+0x1dc>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	1e58      	subs	r0, r3, #1
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6859      	ldr	r1, [r3, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	0099      	lsls	r1, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ea0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	6809      	ldr	r1, [r1, #0]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69da      	ldr	r2, [r3, #28]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000ed2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	6911      	ldr	r1, [r2, #16]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68d2      	ldr	r2, [r2, #12]
 8000ede:	4311      	orrs	r1, r2
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6812      	ldr	r2, [r2, #0]
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	000186a0 	.word	0x000186a0
 8000f40:	001e847f 	.word	0x001e847f
 8000f44:	003d08ff 	.word	0x003d08ff
 8000f48:	431bde83 	.word	0x431bde83
 8000f4c:	10624dd3 	.word	0x10624dd3

08000f50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	4608      	mov	r0, r1
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	817b      	strh	r3, [r7, #10]
 8000f62:	460b      	mov	r3, r1
 8000f64:	813b      	strh	r3, [r7, #8]
 8000f66:	4613      	mov	r3, r2
 8000f68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f6a:	f7ff fc2b 	bl	80007c4 <HAL_GetTick>
 8000f6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b20      	cmp	r3, #32
 8000f7a:	f040 80d9 	bne.w	8001130 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2319      	movs	r3, #25
 8000f84:	2201      	movs	r2, #1
 8000f86:	496d      	ldr	r1, [pc, #436]	@ (800113c <HAL_I2C_Mem_Write+0x1ec>)
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f000 fdfb 	bl	8001b84 <I2C_WaitOnFlagUntilTimeout>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000f94:	2302      	movs	r3, #2
 8000f96:	e0cc      	b.n	8001132 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <HAL_I2C_Mem_Write+0x56>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e0c5      	b.n	8001132 <HAL_I2C_Mem_Write+0x1e2>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d007      	beq.n	8000fcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0201 	orr.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2221      	movs	r2, #33	@ 0x21
 8000fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2240      	movs	r2, #64	@ 0x40
 8000fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6a3a      	ldr	r2, [r7, #32]
 8000ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001002:	b29a      	uxth	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4a4d      	ldr	r2, [pc, #308]	@ (8001140 <HAL_I2C_Mem_Write+0x1f0>)
 800100c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800100e:	88f8      	ldrh	r0, [r7, #6]
 8001010:	893a      	ldrh	r2, [r7, #8]
 8001012:	8979      	ldrh	r1, [r7, #10]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4603      	mov	r3, r0
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f000 fc32 	bl	8001888 <I2C_RequestMemoryWrite>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d052      	beq.n	80010d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e081      	b.n	8001132 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f000 fec0 	bl	8001db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00d      	beq.n	800105a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	2b04      	cmp	r3, #4
 8001044:	d107      	bne.n	8001056 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001054:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e06b      	b.n	8001132 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001074:	3b01      	subs	r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001080:	b29b      	uxth	r3, r3
 8001082:	3b01      	subs	r3, #1
 8001084:	b29a      	uxth	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b04      	cmp	r3, #4
 8001096:	d11b      	bne.n	80010d0 <HAL_I2C_Mem_Write+0x180>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800109c:	2b00      	cmp	r3, #0
 800109e:	d017      	beq.n	80010d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ba:	3b01      	subs	r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1aa      	bne.n	800102e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 feb3 	bl	8001e48 <I2C_WaitOnBTFFlagUntilTimeout>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00d      	beq.n	8001104 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d107      	bne.n	8001100 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e016      	b.n	8001132 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2220      	movs	r2, #32
 8001118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	e000      	b.n	8001132 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001130:	2302      	movs	r3, #2
  }
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	00100002 	.word	0x00100002
 8001140:	ffff0000 	.word	0xffff0000

08001144 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	@ 0x30
 8001148:	af02      	add	r7, sp, #8
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	4608      	mov	r0, r1
 800114e:	4611      	mov	r1, r2
 8001150:	461a      	mov	r2, r3
 8001152:	4603      	mov	r3, r0
 8001154:	817b      	strh	r3, [r7, #10]
 8001156:	460b      	mov	r3, r1
 8001158:	813b      	strh	r3, [r7, #8]
 800115a:	4613      	mov	r3, r2
 800115c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001162:	f7ff fb2f 	bl	80007c4 <HAL_GetTick>
 8001166:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b20      	cmp	r3, #32
 8001172:	f040 8250 	bne.w	8001616 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2319      	movs	r3, #25
 800117c:	2201      	movs	r2, #1
 800117e:	4982      	ldr	r1, [pc, #520]	@ (8001388 <HAL_I2C_Mem_Read+0x244>)
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f000 fcff 	bl	8001b84 <I2C_WaitOnFlagUntilTimeout>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800118c:	2302      	movs	r3, #2
 800118e:	e243      	b.n	8001618 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_I2C_Mem_Read+0x5a>
 800119a:	2302      	movs	r3, #2
 800119c:	e23c      	b.n	8001618 <HAL_I2C_Mem_Read+0x4d4>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d007      	beq.n	80011c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0201 	orr.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2222      	movs	r2, #34	@ 0x22
 80011d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2240      	movs	r2, #64	@ 0x40
 80011e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2200      	movs	r2, #0
 80011e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80011f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4a62      	ldr	r2, [pc, #392]	@ (800138c <HAL_I2C_Mem_Read+0x248>)
 8001204:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001206:	88f8      	ldrh	r0, [r7, #6]
 8001208:	893a      	ldrh	r2, [r7, #8]
 800120a:	8979      	ldrh	r1, [r7, #10]
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4603      	mov	r3, r0
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 fbcc 	bl	80019b4 <I2C_RequestMemoryRead>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e1f8      	b.n	8001618 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800122a:	2b00      	cmp	r3, #0
 800122c:	d113      	bne.n	8001256 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	e1cc      	b.n	80015f0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800125a:	2b01      	cmp	r3, #1
 800125c:	d11e      	bne.n	800129c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800126c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800126e:	b672      	cpsid	i
}
 8001270:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001296:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001298:	b662      	cpsie	i
}
 800129a:	e035      	b.n	8001308 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d11e      	bne.n	80012e2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012de:	b662      	cpsie	i
}
 80012e0:	e012      	b.n	8001308 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80012f0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001308:	e172      	b.n	80015f0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800130e:	2b03      	cmp	r3, #3
 8001310:	f200 811f 	bhi.w	8001552 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001318:	2b01      	cmp	r3, #1
 800131a:	d123      	bne.n	8001364 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800131c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800131e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 fdd9 	bl	8001ed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e173      	b.n	8001618 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	691a      	ldr	r2, [r3, #16]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800134c:	3b01      	subs	r3, #1
 800134e:	b29a      	uxth	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001358:	b29b      	uxth	r3, r3
 800135a:	3b01      	subs	r3, #1
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001362:	e145      	b.n	80015f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001368:	2b02      	cmp	r3, #2
 800136a:	d152      	bne.n	8001412 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001372:	2200      	movs	r2, #0
 8001374:	4906      	ldr	r1, [pc, #24]	@ (8001390 <HAL_I2C_Mem_Read+0x24c>)
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 fc04 	bl	8001b84 <I2C_WaitOnFlagUntilTimeout>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d008      	beq.n	8001394 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e148      	b.n	8001618 <HAL_I2C_Mem_Read+0x4d4>
 8001386:	bf00      	nop
 8001388:	00100002 	.word	0x00100002
 800138c:	ffff0000 	.word	0xffff0000
 8001390:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	691a      	ldr	r2, [r3, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80013da:	b662      	cpsie	i
}
 80013dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001406:	b29b      	uxth	r3, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001410:	e0ee      	b.n	80015f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001418:	2200      	movs	r2, #0
 800141a:	4981      	ldr	r1, [pc, #516]	@ (8001620 <HAL_I2C_Mem_Read+0x4dc>)
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 fbb1 	bl	8001b84 <I2C_WaitOnFlagUntilTimeout>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0f5      	b.n	8001618 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800143a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800145c:	3b01      	subs	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001468:	b29b      	uxth	r3, r3
 800146a:	3b01      	subs	r3, #1
 800146c:	b29a      	uxth	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001472:	4b6c      	ldr	r3, [pc, #432]	@ (8001624 <HAL_I2C_Mem_Read+0x4e0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	4a6b      	ldr	r2, [pc, #428]	@ (8001628 <HAL_I2C_Mem_Read+0x4e4>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0a1a      	lsrs	r2, r3, #8
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	00da      	lsls	r2, r3, #3
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	3b01      	subs	r3, #1
 8001490:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d118      	bne.n	80014ca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2220      	movs	r2, #32
 80014a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f043 0220 	orr.w	r2, r3, #32
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80014ba:	b662      	cpsie	i
}
 80014bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0a6      	b.n	8001618 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d1d9      	bne.n	800148c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001510:	b29b      	uxth	r3, r3
 8001512:	3b01      	subs	r3, #1
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800151a:	b662      	cpsie	i
}
 800151c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800153a:	3b01      	subs	r3, #1
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001546:	b29b      	uxth	r3, r3
 8001548:	3b01      	subs	r3, #1
 800154a:	b29a      	uxth	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001550:	e04e      	b.n	80015f0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001554:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 fcbe 	bl	8001ed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e058      	b.n	8001618 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001582:	3b01      	subs	r3, #1
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800158e:	b29b      	uxth	r3, r3
 8001590:	3b01      	subs	r3, #1
 8001592:	b29a      	uxth	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d124      	bne.n	80015f0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d107      	bne.n	80015be <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015da:	3b01      	subs	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	3b01      	subs	r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f47f ae88 	bne.w	800130a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001616:	2302      	movs	r3, #2
  }
}
 8001618:	4618      	mov	r0, r3
 800161a:	3728      	adds	r7, #40	@ 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	00010004 	.word	0x00010004
 8001624:	20000480 	.word	0x20000480
 8001628:	14f8b589 	.word	0x14f8b589

0800162c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af02      	add	r7, sp, #8
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	460b      	mov	r3, r1
 800163a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff f8c2 	bl	80007c4 <HAL_GetTick>
 8001640:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b20      	cmp	r3, #32
 8001650:	f040 8111 	bne.w	8001876 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2319      	movs	r3, #25
 800165a:	2201      	movs	r2, #1
 800165c:	4988      	ldr	r1, [pc, #544]	@ (8001880 <HAL_I2C_IsDeviceReady+0x254>)
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 fa90 	bl	8001b84 <I2C_WaitOnFlagUntilTimeout>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800166a:	2302      	movs	r3, #2
 800166c:	e104      	b.n	8001878 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_I2C_IsDeviceReady+0x50>
 8001678:	2302      	movs	r3, #2
 800167a:	e0fd      	b.n	8001878 <HAL_I2C_IsDeviceReady+0x24c>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b01      	cmp	r3, #1
 8001690:	d007      	beq.n	80016a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0201 	orr.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2224      	movs	r2, #36	@ 0x24
 80016b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4a70      	ldr	r2, [pc, #448]	@ (8001884 <HAL_I2C_IsDeviceReady+0x258>)
 80016c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2200      	movs	r2, #0
 80016de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fa4e 	bl	8001b84 <I2C_WaitOnFlagUntilTimeout>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00d      	beq.n	800170a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016fc:	d103      	bne.n	8001706 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001704:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e0b6      	b.n	8001878 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800170a:	897b      	ldrh	r3, [r7, #10]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001718:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800171a:	f7ff f853 	bl	80007c4 <HAL_GetTick>
 800171e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b02      	cmp	r3, #2
 800172c:	bf0c      	ite	eq
 800172e:	2301      	moveq	r3, #1
 8001730:	2300      	movne	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001744:	bf0c      	ite	eq
 8001746:	2301      	moveq	r3, #1
 8001748:	2300      	movne	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800174e:	e025      	b.n	800179c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001750:	f7ff f838 	bl	80007c4 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d302      	bcc.n	8001766 <HAL_I2C_IsDeviceReady+0x13a>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	22a0      	movs	r2, #160	@ 0xa0
 800176a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b02      	cmp	r3, #2
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800178e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001792:	bf0c      	ite	eq
 8001794:	2301      	moveq	r3, #1
 8001796:	2300      	movne	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80017a6:	d005      	beq.n	80017b4 <HAL_I2C_IsDeviceReady+0x188>
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <HAL_I2C_IsDeviceReady+0x188>
 80017ae:	7dbb      	ldrb	r3, [r7, #22]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0cd      	beq.n	8001750 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d129      	bne.n	800181e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2319      	movs	r3, #25
 80017f6:	2201      	movs	r2, #1
 80017f8:	4921      	ldr	r1, [pc, #132]	@ (8001880 <HAL_I2C_IsDeviceReady+0x254>)
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f9c2 	bl	8001b84 <I2C_WaitOnFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e036      	b.n	8001878 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2220      	movs	r2, #32
 800180e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e02c      	b.n	8001878 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800182c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001836:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2319      	movs	r3, #25
 800183e:	2201      	movs	r2, #1
 8001840:	490f      	ldr	r1, [pc, #60]	@ (8001880 <HAL_I2C_IsDeviceReady+0x254>)
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f99e 	bl	8001b84 <I2C_WaitOnFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e012      	b.n	8001878 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	3301      	adds	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	f4ff af32 	bcc.w	80016c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001876:	2302      	movs	r3, #2
  }
}
 8001878:	4618      	mov	r0, r3
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	00100002 	.word	0x00100002
 8001884:	ffff0000 	.word	0xffff0000

08001888 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4603      	mov	r3, r0
 8001898:	817b      	strh	r3, [r7, #10]
 800189a:	460b      	mov	r3, r1
 800189c:	813b      	strh	r3, [r7, #8]
 800189e:	4613      	mov	r3, r2
 80018a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f960 	bl	8001b84 <I2C_WaitOnFlagUntilTimeout>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00d      	beq.n	80018e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018d8:	d103      	bne.n	80018e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e05f      	b.n	80019a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018e6:	897b      	ldrh	r3, [r7, #10]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80018f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	6a3a      	ldr	r2, [r7, #32]
 80018fa:	492d      	ldr	r1, [pc, #180]	@ (80019b0 <I2C_RequestMemoryWrite+0x128>)
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f9bb 	bl	8001c78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e04c      	b.n	80019a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001924:	6a39      	ldr	r1, [r7, #32]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 fa46 	bl	8001db8 <I2C_WaitOnTXEFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00d      	beq.n	800194e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	2b04      	cmp	r3, #4
 8001938:	d107      	bne.n	800194a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001948:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e02b      	b.n	80019a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001954:	893b      	ldrh	r3, [r7, #8]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	e021      	b.n	80019a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001960:	893b      	ldrh	r3, [r7, #8]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	b29b      	uxth	r3, r3
 8001966:	b2da      	uxtb	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800196e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001970:	6a39      	ldr	r1, [r7, #32]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 fa20 	bl	8001db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00d      	beq.n	800199a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	2b04      	cmp	r3, #4
 8001984:	d107      	bne.n	8001996 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001994:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e005      	b.n	80019a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800199a:	893b      	ldrh	r3, [r7, #8]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	00010002 	.word	0x00010002

080019b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	817b      	strh	r3, [r7, #10]
 80019c6:	460b      	mov	r3, r1
 80019c8:	813b      	strh	r3, [r7, #8]
 80019ca:	4613      	mov	r3, r2
 80019cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f8c2 	bl	8001b84 <I2C_WaitOnFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00d      	beq.n	8001a22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a14:	d103      	bne.n	8001a1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0aa      	b.n	8001b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a22:	897b      	ldrh	r3, [r7, #10]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	6a3a      	ldr	r2, [r7, #32]
 8001a36:	4952      	ldr	r1, [pc, #328]	@ (8001b80 <I2C_RequestMemoryRead+0x1cc>)
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f91d 	bl	8001c78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e097      	b.n	8001b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a60:	6a39      	ldr	r1, [r7, #32]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f9a8 	bl	8001db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00d      	beq.n	8001a8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d107      	bne.n	8001a86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e076      	b.n	8001b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a90:	893b      	ldrh	r3, [r7, #8]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	611a      	str	r2, [r3, #16]
 8001a9a:	e021      	b.n	8001ae0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a9c:	893b      	ldrh	r3, [r7, #8]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aac:	6a39      	ldr	r1, [r7, #32]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f982 	bl	8001db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00d      	beq.n	8001ad6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d107      	bne.n	8001ad2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ad0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e050      	b.n	8001b78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ad6:	893b      	ldrh	r3, [r7, #8]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae2:	6a39      	ldr	r1, [r7, #32]
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f967 	bl	8001db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00d      	beq.n	8001b0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d107      	bne.n	8001b08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e035      	b.n	8001b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f82b 	bl	8001b84 <I2C_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00d      	beq.n	8001b50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b42:	d103      	bne.n	8001b4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e013      	b.n	8001b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b50:	897b      	ldrh	r3, [r7, #10]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	6a3a      	ldr	r2, [r7, #32]
 8001b64:	4906      	ldr	r1, [pc, #24]	@ (8001b80 <I2C_RequestMemoryRead+0x1cc>)
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f886 	bl	8001c78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	00010002 	.word	0x00010002

08001b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	4613      	mov	r3, r2
 8001b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b94:	e048      	b.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d044      	beq.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b9e:	f7fe fe11 	bl	80007c4 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d302      	bcc.n	8001bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d139      	bne.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	0c1b      	lsrs	r3, r3, #16
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d10d      	bne.n	8001bda <I2C_WaitOnFlagUntilTimeout+0x56>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf0c      	ite	eq
 8001bd0:	2301      	moveq	r3, #1
 8001bd2:	2300      	movne	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	e00c      	b.n	8001bf4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	43da      	mvns	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	4013      	ands	r3, r2
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d116      	bne.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f043 0220 	orr.w	r2, r3, #32
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e023      	b.n	8001c70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d10d      	bne.n	8001c4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	e00c      	b.n	8001c68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	43da      	mvns	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf0c      	ite	eq
 8001c60:	2301      	moveq	r3, #1
 8001c62:	2300      	movne	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d093      	beq.n	8001b96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c86:	e071      	b.n	8001d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c96:	d123      	bne.n	8001ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001cb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	f043 0204 	orr.w	r2, r3, #4
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e067      	b.n	8001db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce6:	d041      	beq.n	8001d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce8:	f7fe fd6c 	bl	80007c4 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d302      	bcc.n	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d136      	bne.n	8001d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d10c      	bne.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4013      	ands	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bf14      	ite	ne
 8001d1a:	2301      	movne	r3, #1
 8001d1c:	2300      	moveq	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	e00b      	b.n	8001d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf14      	ite	ne
 8001d34:	2301      	movne	r3, #1
 8001d36:	2300      	moveq	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d016      	beq.n	8001d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	f043 0220 	orr.w	r2, r3, #32
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e021      	b.n	8001db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	0c1b      	lsrs	r3, r3, #16
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10c      	bne.n	8001d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	4013      	ands	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf14      	ite	ne
 8001d88:	2301      	movne	r3, #1
 8001d8a:	2300      	moveq	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e00b      	b.n	8001da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f47f af6d 	bne.w	8001c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dc4:	e034      	b.n	8001e30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f8e3 	bl	8001f92 <I2C_IsAcknowledgeFailed>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e034      	b.n	8001e40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ddc:	d028      	beq.n	8001e30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dde:	f7fe fcf1 	bl	80007c4 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d302      	bcc.n	8001df4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d11d      	bne.n	8001e30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfe:	2b80      	cmp	r3, #128	@ 0x80
 8001e00:	d016      	beq.n	8001e30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e007      	b.n	8001e40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3a:	2b80      	cmp	r3, #128	@ 0x80
 8001e3c:	d1c3      	bne.n	8001dc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e54:	e034      	b.n	8001ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f89b 	bl	8001f92 <I2C_IsAcknowledgeFailed>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e034      	b.n	8001ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d028      	beq.n	8001ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6e:	f7fe fca9 	bl	80007c4 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d302      	bcc.n	8001e84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d11d      	bne.n	8001ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d016      	beq.n	8001ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	f043 0220 	orr.w	r2, r3, #32
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e007      	b.n	8001ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d1c3      	bne.n	8001e56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ee4:	e049      	b.n	8001f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b10      	cmp	r3, #16
 8001ef2:	d119      	bne.n	8001f28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0210 	mvn.w	r2, #16
 8001efc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e030      	b.n	8001f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f28:	f7fe fc4c 	bl	80007c4 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d302      	bcc.n	8001f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d11d      	bne.n	8001f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f48:	2b40      	cmp	r3, #64	@ 0x40
 8001f4a:	d016      	beq.n	8001f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f043 0220 	orr.w	r2, r3, #32
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e007      	b.n	8001f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f84:	2b40      	cmp	r3, #64	@ 0x40
 8001f86:	d1ae      	bne.n	8001ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa8:	d11b      	bne.n	8001fe2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fb2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f043 0204 	orr.w	r2, r3, #4
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e272      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8087 	beq.w	800211e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002010:	4b92      	ldr	r3, [pc, #584]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b04      	cmp	r3, #4
 800201a:	d00c      	beq.n	8002036 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800201c:	4b8f      	ldr	r3, [pc, #572]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b08      	cmp	r3, #8
 8002026:	d112      	bne.n	800204e <HAL_RCC_OscConfig+0x5e>
 8002028:	4b8c      	ldr	r3, [pc, #560]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002034:	d10b      	bne.n	800204e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002036:	4b89      	ldr	r3, [pc, #548]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d06c      	beq.n	800211c <HAL_RCC_OscConfig+0x12c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d168      	bne.n	800211c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e24c      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x76>
 8002058:	4b80      	ldr	r3, [pc, #512]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a7f      	ldr	r2, [pc, #508]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	e02e      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x98>
 800206e:	4b7b      	ldr	r3, [pc, #492]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7a      	ldr	r2, [pc, #488]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b78      	ldr	r3, [pc, #480]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a77      	ldr	r2, [pc, #476]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002080:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e01d      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0xbc>
 8002092:	4b72      	ldr	r3, [pc, #456]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a71      	ldr	r2, [pc, #452]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b6f      	ldr	r3, [pc, #444]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6e      	ldr	r2, [pc, #440]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 80020ac:	4b6b      	ldr	r3, [pc, #428]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a6a      	ldr	r2, [pc, #424]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 80020b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b68      	ldr	r3, [pc, #416]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a67      	ldr	r2, [pc, #412]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 80020be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe fb7a 	bl	80007c4 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe fb76 	bl	80007c4 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	@ 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e200      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b5d      	ldr	r3, [pc, #372]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0xe4>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe fb66 	bl	80007c4 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7fe fb62 	bl	80007c4 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	@ 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1ec      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	4b53      	ldr	r3, [pc, #332]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x10c>
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d063      	beq.n	80021f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212a:	4b4c      	ldr	r3, [pc, #304]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002136:	4b49      	ldr	r3, [pc, #292]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b08      	cmp	r3, #8
 8002140:	d11c      	bne.n	800217c <HAL_RCC_OscConfig+0x18c>
 8002142:	4b46      	ldr	r3, [pc, #280]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d116      	bne.n	800217c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	4b43      	ldr	r3, [pc, #268]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e1c0      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b3d      	ldr	r3, [pc, #244]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4939      	ldr	r1, [pc, #228]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	e03a      	b.n	80021f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002184:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7fe fb1b 	bl	80007c4 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7fe fb17 	bl	80007c4 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1a1      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b2a      	ldr	r3, [pc, #168]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4927      	ldr	r1, [pc, #156]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b26      	ldr	r3, [pc, #152]	@ (8002260 <HAL_RCC_OscConfig+0x270>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fafa 	bl	80007c4 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d4:	f7fe faf6 	bl	80007c4 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e180      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d03a      	beq.n	8002274 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d019      	beq.n	800223a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002206:	4b17      	ldr	r3, [pc, #92]	@ (8002264 <HAL_RCC_OscConfig+0x274>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220c:	f7fe fada 	bl	80007c4 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002214:	f7fe fad6 	bl	80007c4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e160      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <HAL_RCC_OscConfig+0x26c>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f000 faba 	bl	80027ac <RCC_Delay>
 8002238:	e01c      	b.n	8002274 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223a:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <HAL_RCC_OscConfig+0x274>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7fe fac0 	bl	80007c4 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002246:	e00f      	b.n	8002268 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002248:	f7fe fabc 	bl	80007c4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d908      	bls.n	8002268 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e146      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	42420000 	.word	0x42420000
 8002264:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	4b92      	ldr	r3, [pc, #584]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e9      	bne.n	8002248 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a6 	beq.w	80023ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b8b      	ldr	r3, [pc, #556]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b88      	ldr	r3, [pc, #544]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a87      	ldr	r2, [pc, #540]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229c:	61d3      	str	r3, [r2, #28]
 800229e:	4b85      	ldr	r3, [pc, #532]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b82      	ldr	r3, [pc, #520]	@ (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b7f      	ldr	r3, [pc, #508]	@ (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a7e      	ldr	r2, [pc, #504]	@ (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fa7d 	bl	80007c4 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7fe fa79 	bl	80007c4 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	@ 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e103      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b75      	ldr	r3, [pc, #468]	@ (80024b8 <HAL_RCC_OscConfig+0x4c8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x312>
 80022f4:	4b6f      	ldr	r3, [pc, #444]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a6e      	ldr	r2, [pc, #440]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	e02d      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x334>
 800230a:	4b6a      	ldr	r3, [pc, #424]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a69      	ldr	r2, [pc, #420]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	4b67      	ldr	r3, [pc, #412]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a66      	ldr	r2, [pc, #408]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6213      	str	r3, [r2, #32]
 8002322:	e01c      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d10c      	bne.n	8002346 <HAL_RCC_OscConfig+0x356>
 800232c:	4b61      	ldr	r3, [pc, #388]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a60      	ldr	r2, [pc, #384]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	4b5e      	ldr	r3, [pc, #376]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4a5d      	ldr	r2, [pc, #372]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6213      	str	r3, [r2, #32]
 8002344:	e00b      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002346:	4b5b      	ldr	r3, [pc, #364]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a5a      	ldr	r2, [pc, #360]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	4b58      	ldr	r3, [pc, #352]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a57      	ldr	r2, [pc, #348]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d015      	beq.n	8002392 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe fa2d 	bl	80007c4 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fa29 	bl	80007c4 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0b1      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	4b4b      	ldr	r3, [pc, #300]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ee      	beq.n	800236e <HAL_RCC_OscConfig+0x37e>
 8002390:	e014      	b.n	80023bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002392:	f7fe fa17 	bl	80007c4 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe fa13 	bl	80007c4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e09b      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	4b40      	ldr	r3, [pc, #256]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ee      	bne.n	800239a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b3c      	ldr	r3, [pc, #240]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4a3b      	ldr	r2, [pc, #236]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8087 	beq.w	80024e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d8:	4b36      	ldr	r3, [pc, #216]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d061      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d146      	bne.n	800247a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b33      	ldr	r3, [pc, #204]	@ (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe f9e7 	bl	80007c4 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe f9e3 	bl	80007c4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e06d      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240c:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002420:	d108      	bne.n	8002434 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002422:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4921      	ldr	r1, [pc, #132]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002434:	4b1f      	ldr	r3, [pc, #124]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a19      	ldr	r1, [r3, #32]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	430b      	orrs	r3, r1
 8002446:	491b      	ldr	r1, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800244c:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7fe f9b7 	bl	80007c4 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe f9b3 	bl	80007c4 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e03d      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x46a>
 8002478:	e035      	b.n	80024e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe f9a0 	bl	80007c4 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe f99c 	bl	80007c4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e026      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x498>
 80024a6:	e01e      	b.n	80024e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e019      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40007000 	.word	0x40007000
 80024bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_RCC_OscConfig+0x500>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0d0      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002508:	4b6a      	ldr	r3, [pc, #424]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d910      	bls.n	8002538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b67      	ldr	r3, [pc, #412]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 0207 	bic.w	r2, r3, #7
 800251e:	4965      	ldr	r1, [pc, #404]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b63      	ldr	r3, [pc, #396]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0b8      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002550:	4b59      	ldr	r3, [pc, #356]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a58      	ldr	r2, [pc, #352]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800255a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002568:	4b53      	ldr	r3, [pc, #332]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a52      	ldr	r2, [pc, #328]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002572:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002574:	4b50      	ldr	r3, [pc, #320]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	494d      	ldr	r1, [pc, #308]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d040      	beq.n	8002614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b47      	ldr	r3, [pc, #284]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d115      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e07f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b2:	4b41      	ldr	r3, [pc, #260]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e073      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c2:	4b3d      	ldr	r3, [pc, #244]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06b      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	4b39      	ldr	r3, [pc, #228]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4936      	ldr	r1, [pc, #216]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e4:	f7fe f8ee 	bl	80007c4 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7fe f8ea 	bl	80007c4 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e053      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	4b2d      	ldr	r3, [pc, #180]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 020c 	and.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	429a      	cmp	r2, r3
 8002612:	d1eb      	bne.n	80025ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002614:	4b27      	ldr	r3, [pc, #156]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d210      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b24      	ldr	r3, [pc, #144]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4922      	ldr	r1, [pc, #136]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e032      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4916      	ldr	r1, [pc, #88]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800266e:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	490e      	ldr	r1, [pc, #56]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002682:	f000 f821 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002686:	4602      	mov	r2, r0
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	490a      	ldr	r1, [pc, #40]	@ (80026bc <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	5ccb      	ldrb	r3, [r1, r3]
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	4a09      	ldr	r2, [pc, #36]	@ (80026c0 <HAL_RCC_ClockConfig+0x1cc>)
 800269c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800269e:	4b09      	ldr	r3, [pc, #36]	@ (80026c4 <HAL_RCC_ClockConfig+0x1d0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe f84c 	bl	8000740 <HAL_InitTick>

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08002858 	.word	0x08002858
 80026c0:	20000480 	.word	0x20000480
 80026c4:	20000484 	.word	0x20000484

080026c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026e2:	4b1e      	ldr	r3, [pc, #120]	@ (800275c <HAL_RCC_GetSysClockFreq+0x94>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x30>
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x36>
 80026f6:	e027      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f8:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fa:	613b      	str	r3, [r7, #16]
      break;
 80026fc:	e027      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	0c9b      	lsrs	r3, r3, #18
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	4a17      	ldr	r2, [pc, #92]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002708:	5cd3      	ldrb	r3, [r2, r3]
 800270a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d010      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002716:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_RCC_GetSysClockFreq+0x94>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	0c5b      	lsrs	r3, r3, #17
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	4a11      	ldr	r2, [pc, #68]	@ (8002768 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002722:	5cd3      	ldrb	r3, [r2, r3]
 8002724:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a0d      	ldr	r2, [pc, #52]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x98>)
 800272a:	fb03 f202 	mul.w	r2, r3, r2
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e004      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a0c      	ldr	r2, [pc, #48]	@ (800276c <HAL_RCC_GetSysClockFreq+0xa4>)
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	613b      	str	r3, [r7, #16]
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x98>)
 800274a:	613b      	str	r3, [r7, #16]
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	693b      	ldr	r3, [r7, #16]
}
 8002750:	4618      	mov	r0, r3
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	007a1200 	.word	0x007a1200
 8002764:	08002870 	.word	0x08002870
 8002768:	08002880 	.word	0x08002880
 800276c:	003d0900 	.word	0x003d0900

08002770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b02      	ldr	r3, [pc, #8]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x10>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	20000480 	.word	0x20000480

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002788:	f7ff fff2 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4903      	ldr	r1, [pc, #12]	@ (80027a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08002868 	.word	0x08002868

080027ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027b4:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <RCC_Delay+0x34>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <RCC_Delay+0x38>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0a5b      	lsrs	r3, r3, #9
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027c8:	bf00      	nop
  }
  while (Delay --);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	60fa      	str	r2, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f9      	bne.n	80027c8 <RCC_Delay+0x1c>
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000480 	.word	0x20000480
 80027e4:	10624dd3 	.word	0x10624dd3

080027e8 <memset>:
 80027e8:	4603      	mov	r3, r0
 80027ea:	4402      	add	r2, r0
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d100      	bne.n	80027f2 <memset+0xa>
 80027f0:	4770      	bx	lr
 80027f2:	f803 1b01 	strb.w	r1, [r3], #1
 80027f6:	e7f9      	b.n	80027ec <memset+0x4>

080027f8 <__libc_init_array>:
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	2600      	movs	r6, #0
 80027fc:	4d0c      	ldr	r5, [pc, #48]	@ (8002830 <__libc_init_array+0x38>)
 80027fe:	4c0d      	ldr	r4, [pc, #52]	@ (8002834 <__libc_init_array+0x3c>)
 8002800:	1b64      	subs	r4, r4, r5
 8002802:	10a4      	asrs	r4, r4, #2
 8002804:	42a6      	cmp	r6, r4
 8002806:	d109      	bne.n	800281c <__libc_init_array+0x24>
 8002808:	f000 f81a 	bl	8002840 <_init>
 800280c:	2600      	movs	r6, #0
 800280e:	4d0a      	ldr	r5, [pc, #40]	@ (8002838 <__libc_init_array+0x40>)
 8002810:	4c0a      	ldr	r4, [pc, #40]	@ (800283c <__libc_init_array+0x44>)
 8002812:	1b64      	subs	r4, r4, r5
 8002814:	10a4      	asrs	r4, r4, #2
 8002816:	42a6      	cmp	r6, r4
 8002818:	d105      	bne.n	8002826 <__libc_init_array+0x2e>
 800281a:	bd70      	pop	{r4, r5, r6, pc}
 800281c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002820:	4798      	blx	r3
 8002822:	3601      	adds	r6, #1
 8002824:	e7ee      	b.n	8002804 <__libc_init_array+0xc>
 8002826:	f855 3b04 	ldr.w	r3, [r5], #4
 800282a:	4798      	blx	r3
 800282c:	3601      	adds	r6, #1
 800282e:	e7f2      	b.n	8002816 <__libc_init_array+0x1e>
 8002830:	08002884 	.word	0x08002884
 8002834:	08002884 	.word	0x08002884
 8002838:	08002884 	.word	0x08002884
 800283c:	08002888 	.word	0x08002888

08002840 <_init>:
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002842:	bf00      	nop
 8002844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002846:	bc08      	pop	{r3}
 8002848:	469e      	mov	lr, r3
 800284a:	4770      	bx	lr

0800284c <_fini>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	bf00      	nop
 8002850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002852:	bc08      	pop	{r3}
 8002854:	469e      	mov	lr, r3
 8002856:	4770      	bx	lr
