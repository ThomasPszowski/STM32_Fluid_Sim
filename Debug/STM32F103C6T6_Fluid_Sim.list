
STM32F103C6T6_Fluid_Sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003380  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800348c  0800348c  0000448c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003594  08003594  00005268  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003594  08003594  00005268  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003594  08003594  00005268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003594  08003594  00004594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003598  08003598  00004598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  0800359c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000268  08003804  00005268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  08003804  00005610  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000791e  00000000  00000000  00005291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019cc  00000000  00000000  0000cbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0000e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000656  00000000  00000000  0000edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001791a  00000000  00000000  0000f426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae59  00000000  00000000  00026d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826ee  00000000  00000000  00031b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4287  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae0  00000000  00000000  000b42cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000b6dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000268 	.word	0x20000268
 8000128:	00000000 	.word	0x00000000
 800012c:	08003474 	.word	0x08003474

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000026c 	.word	0x2000026c
 8000148:	08003474 	.word	0x08003474

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <init_particles_middle>:
        particles[i].vel.x = 0.0f;
        particles[i].vel.y = 0.0f;
    }
}

void init_particles_middle() {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	e05b      	b.n	80006cc <init_particles_middle+0xc4>
        particles[i].pos.x = (float)rand() / RAND_MAX * GRID_SIZE / 3 + GRID_SIZE / 3;
 8000614:	f001 ff48 	bl	80024a8 <rand>
 8000618:	4603      	mov	r3, r0
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff fe50 	bl	80002c0 <__aeabi_i2f>
 8000620:	4603      	mov	r3, r0
 8000622:	f04f 419e 	mov.w	r1, #1325400064	@ 0x4f000000
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff52 	bl	80004d0 <__aeabi_fdiv>
 800062c:	4603      	mov	r3, r0
 800062e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fe98 	bl	8000368 <__aeabi_fmul>
 8000638:	4603      	mov	r3, r0
 800063a:	4928      	ldr	r1, [pc, #160]	@ (80006dc <init_particles_middle+0xd4>)
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff47 	bl	80004d0 <__aeabi_fdiv>
 8000642:	4603      	mov	r3, r0
 8000644:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fd85 	bl	8000158 <__addsf3>
 800064e:	4603      	mov	r3, r0
 8000650:	4619      	mov	r1, r3
 8000652:	4a23      	ldr	r2, [pc, #140]	@ (80006e0 <init_particles_middle+0xd8>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	4413      	add	r3, r2
 800065a:	6019      	str	r1, [r3, #0]
        particles[i].pos.y = (float)rand() / RAND_MAX * GRID_SIZE / 3 + GRID_SIZE / 3;
 800065c:	f001 ff24 	bl	80024a8 <rand>
 8000660:	4603      	mov	r3, r0
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fe2c 	bl	80002c0 <__aeabi_i2f>
 8000668:	4603      	mov	r3, r0
 800066a:	f04f 419e 	mov.w	r1, #1325400064	@ 0x4f000000
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff2e 	bl	80004d0 <__aeabi_fdiv>
 8000674:	4603      	mov	r3, r0
 8000676:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fe74 	bl	8000368 <__aeabi_fmul>
 8000680:	4603      	mov	r3, r0
 8000682:	4916      	ldr	r1, [pc, #88]	@ (80006dc <init_particles_middle+0xd4>)
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff23 	bl	80004d0 <__aeabi_fdiv>
 800068a:	4603      	mov	r3, r0
 800068c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fd61 	bl	8000158 <__addsf3>
 8000696:	4603      	mov	r3, r0
 8000698:	4619      	mov	r1, r3
 800069a:	4a11      	ldr	r2, [pc, #68]	@ (80006e0 <init_particles_middle+0xd8>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	4413      	add	r3, r2
 80006a2:	3304      	adds	r3, #4
 80006a4:	6019      	str	r1, [r3, #0]
        particles[i].vel.x = 0.0f;
 80006a6:	4a0e      	ldr	r2, [pc, #56]	@ (80006e0 <init_particles_middle+0xd8>)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	4413      	add	r3, r2
 80006ae:	3308      	adds	r3, #8
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
        particles[i].vel.y = 0.0f;
 80006b6:	4a0a      	ldr	r2, [pc, #40]	@ (80006e0 <init_particles_middle+0xd8>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	011b      	lsls	r3, r3, #4
 80006bc:	4413      	add	r3, r2
 80006be:	330c      	adds	r3, #12
 80006c0:	f04f 0200 	mov.w	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < PARTICLE_COUNT; i++) {
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3301      	adds	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b1d      	cmp	r3, #29
 80006d0:	dda0      	ble.n	8000614 <init_particles_middle+0xc>
    }
}
 80006d2:	bf00      	nop
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40400000 	.word	0x40400000
 80006e0:	20000284 	.word	0x20000284

080006e4 <FillScreen>:
			}
		}
	}
}

void FillScreen() {
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
	for (int i = 0; i < FRAME_DIM; i++) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	e020      	b.n	8000732 <FillScreen+0x4e>
		for (int j = 0; j < FRAME_DIM; j++) {
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	e017      	b.n	8000726 <FillScreen+0x42>
			frame[i * FRAME_DIM + j] &= ~0x200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <FillScreen+0x60>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	0119      	lsls	r1, r3, #4
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	440b      	add	r3, r1
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	4413      	add	r3, r2
 8000706:	881a      	ldrh	r2, [r3, #0]
 8000708:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <FillScreen+0x60>)
 800070a:	6819      	ldr	r1, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	0118      	lsls	r0, r3, #4
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	4403      	add	r3, r0
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	440b      	add	r3, r1
 8000718:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800071c:	b292      	uxth	r2, r2
 800071e:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < FRAME_DIM; j++) {
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2b0f      	cmp	r3, #15
 800072a:	dde4      	ble.n	80006f6 <FillScreen+0x12>
	for (int i = 0; i < FRAME_DIM; i++) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3301      	adds	r3, #1
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b0f      	cmp	r3, #15
 8000736:	dddb      	ble.n	80006f0 <FillScreen+0xc>
		}
	}
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	200004b8 	.word	0x200004b8

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074e:	f000 fb05 	bl	8000d5c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 f85f 	bl	8000814 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f000 f8d1 	bl	80008fc <MX_GPIO_Init>
  MX_I2C1_Init();
 800075a:	f000 f8a1 	bl	80008a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (FRAME_DIM == 8){
  	frame = frame8x8;
  }
  else if (FRAME_DIM == 16){
  	frame = frame16x16;
 800075e:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <main+0xb4>)
 8000760:	4a27      	ldr	r2, [pc, #156]	@ (8000800 <main+0xb8>)
 8000762:	601a      	str	r2, [r3, #0]
  }
  // Włącz DMA i Timer
  	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000764:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <main+0xbc>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	4a26      	ldr	r2, [pc, #152]	@ (8000804 <main+0xbc>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6153      	str	r3, [r2, #20]
  	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <main+0xbc>)
 8000772:	69db      	ldr	r3, [r3, #28]
 8000774:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <main+0xbc>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	61d3      	str	r3, [r2, #28]

  	// DMA1_Channel2 ← wyzwalany przez TIM2_UP
  	DMA1_Channel2->CCR &= ~DMA_CCR_EN;  // wyłącz DMA przed konfiguracją
 800077c:	4b22      	ldr	r3, [pc, #136]	@ (8000808 <main+0xc0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <main+0xc0>)
 8000782:	f023 0301 	bic.w	r3, r3, #1
 8000786:	6013      	str	r3, [r2, #0]

  	DMA1_Channel2->CPAR = (uint32_t)&GPIOA->ODR;
 8000788:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <main+0xc0>)
 800078a:	4a20      	ldr	r2, [pc, #128]	@ (800080c <main+0xc4>)
 800078c:	609a      	str	r2, [r3, #8]
  	DMA1_Channel2->CMAR = (uint32_t)frame;
 800078e:	4b1b      	ldr	r3, [pc, #108]	@ (80007fc <main+0xb4>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <main+0xc0>)
 8000794:	60da      	str	r2, [r3, #12]
  	DMA1_Channel2->CNDTR = FRAME_SIZE;
 8000796:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <main+0xc0>)
 8000798:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800079c:	605a      	str	r2, [r3, #4]

  	DMA1_Channel2->CCR =
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <main+0xc0>)
 80007a0:	f44f 62b6 	mov.w	r2, #1456	@ 0x5b0
 80007a4:	601a      	str	r2, [r3, #0]
  	    DMA_CCR_DIR  |         // Mem → Periph
  	    DMA_CCR_CIRC |         // Cyklicznie
  	    DMA_CCR_MSIZE_0 |      // MSIZE = 16-bit
  	    DMA_CCR_PSIZE_0;       // PSIZE = 16-bit

  	DMA1_Channel2->CCR |= DMA_CCR_EN;   // włącz DMA
 80007a6:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <main+0xc0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <main+0xc0>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6013      	str	r3, [r2, #0]

  	// Timer 2 – co 1 ms
  	TIM2->PSC = 72 - 1;  // (72MHz / 7200 = 10kHz)
 80007b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007b6:	2247      	movs	r2, #71	@ 0x47
 80007b8:	629a      	str	r2, [r3, #40]	@ 0x28
  	TIM2->ARR = 10 - 1;    // co 1 ms
 80007ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007be:	2209      	movs	r2, #9
 80007c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  	TIM2->DIER |= TIM_DIER_UDE; // update event triggers DMA
 80007c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007d0:	60d3      	str	r3, [r2, #12]
  	TIM2->CR1 |= TIM_CR1_CEN;   // start
 80007d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6013      	str	r3, [r2, #0]

  	init_particles_middle();
 80007e2:	f7ff ff11 	bl	8000608 <init_particles_middle>
    // init mpu
  	MPU6050_Data mpu;
  	HAL_Delay(10);
 80007e6:	200a      	movs	r0, #10
 80007e8:	f000 fb1a 	bl	8000e20 <HAL_Delay>
  	MPU6050_Init(&hi2c1);
 80007ec:	4808      	ldr	r0, [pc, #32]	@ (8000810 <main+0xc8>)
 80007ee:	f000 f8f9 	bl	80009e4 <MPU6050_Init>

  	FillScreen();
 80007f2:	f7ff ff77 	bl	80006e4 <FillScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	while (1)
 80007f6:	bf00      	nop
 80007f8:	e7fd      	b.n	80007f6 <main+0xae>
 80007fa:	bf00      	nop
 80007fc:	200004b8 	.word	0x200004b8
 8000800:	20000000 	.word	0x20000000
 8000804:	40021000 	.word	0x40021000
 8000808:	4002001c 	.word	0x4002001c
 800080c:	4001080c 	.word	0x4001080c
 8000810:	20000464 	.word	0x20000464

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b090      	sub	sp, #64	@ 0x40
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2228      	movs	r2, #40	@ 0x28
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f001 ff83 	bl	800272e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800083e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	2301      	movs	r3, #1
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000848:	2302      	movs	r3, #2
 800084a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000850:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000852:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0318 	add.w	r3, r7, #24
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fa27 	bl	8001cb0 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000868:	f000 f8b6 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000878:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000882:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2102      	movs	r1, #2
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fc93 	bl	80021b4 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000894:	f000 f8a0 	bl	80009d8 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3740      	adds	r7, #64	@ 0x40
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <MX_I2C1_Init+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008ac:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <MX_I2C1_Init+0x58>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008de:	f000 fd3b 	bl	8001358 <HAL_I2C_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e8:	f000 f876 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000464 	.word	0x20000464
 80008f4:	40005400 	.word	0x40005400
 80008f8:	000186a0 	.word	0x000186a0

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	4b2e      	ldr	r3, [pc, #184]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a2d      	ldr	r2, [pc, #180]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b2b      	ldr	r3, [pc, #172]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000928:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a27      	ldr	r2, [pc, #156]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800092e:	f043 0320 	orr.w	r3, r3, #32
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b25      	ldr	r3, [pc, #148]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0320 	and.w	r3, r3, #32
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b22      	ldr	r3, [pc, #136]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a21      	ldr	r2, [pc, #132]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a1b      	ldr	r2, [pc, #108]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0308 	and.w	r3, r3, #8
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000976:	4816      	ldr	r0, [pc, #88]	@ (80009d0 <MX_GPIO_Init+0xd4>)
 8000978:	f000 fcd6 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800097c:	2200      	movs	r2, #0
 800097e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8000982:	4814      	ldr	r0, [pc, #80]	@ (80009d4 <MX_GPIO_Init+0xd8>)
 8000984:	f000 fcd0 	bl	8001328 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800098c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2302      	movs	r3, #2
 8000998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	4619      	mov	r1, r3
 80009a0:	480b      	ldr	r0, [pc, #44]	@ (80009d0 <MX_GPIO_Init+0xd4>)
 80009a2:	f000 fb45 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009a6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80009aa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_GPIO_Init+0xd8>)
 80009c0:	f000 fb36 	bl	8001030 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c4:	bf00      	nop
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40011000 	.word	0x40011000
 80009d4:	40010800 	.word	0x40010800

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <MPU6050_Init>:
#include "mpu6050.h"

#define MPU6050_PWR_MGMT_1   0x6B
#define MPU6050_ACCEL_XOUT_H 0x3B

HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af04      	add	r7, sp, #16
 80009ea:	6078      	str	r0, [r7, #4]
    uint8_t data = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]
    return HAL_I2C_Mem_Write(hi2c, MPU6050_I2C_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	2301      	movs	r3, #1
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	f107 030f 	add.w	r3, r7, #15
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2301      	movs	r3, #1
 8000a02:	226b      	movs	r2, #107	@ 0x6b
 8000a04:	21d0      	movs	r1, #208	@ 0xd0
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 fdea 	bl	80015e0 <HAL_I2C_Mem_Write>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <HAL_MspInit+0x5c>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <HAL_MspInit+0x5c>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_MspInit+0x5c>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <HAL_MspInit+0x5c>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a74 <HAL_MspInit+0x5c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <HAL_MspInit+0x5c>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_MspInit+0x60>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <HAL_MspInit+0x60>)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010000 	.word	0x40010000

08000a7c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a16      	ldr	r2, [pc, #88]	@ (8000af0 <HAL_I2C_MspInit+0x74>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d125      	bne.n	8000ae8 <HAL_I2C_MspInit+0x6c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <HAL_I2C_MspInit+0x78>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a14      	ldr	r2, [pc, #80]	@ (8000af4 <HAL_I2C_MspInit+0x78>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_I2C_MspInit+0x78>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ab4:	23c0      	movs	r3, #192	@ 0xc0
 8000ab6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab8:	2312      	movs	r3, #18
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <HAL_I2C_MspInit+0x7c>)
 8000acc:	f000 fab0 	bl	8001030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_I2C_MspInit+0x78>)
 8000ad2:	69db      	ldr	r3, [r3, #28]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <HAL_I2C_MspInit+0x78>)
 8000ad6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ada:	61d3      	str	r3, [r2, #28]
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <HAL_I2C_MspInit+0x78>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010c00 	.word	0x40010c00

08000afc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b00:	f3bf 8f4f 	dsb	sy
}
 8000b04:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <__NVIC_SystemReset+0x24>)
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b0e:	4904      	ldr	r1, [pc, #16]	@ (8000b20 <__NVIC_SystemReset+0x24>)
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <__NVIC_SystemReset+0x28>)
 8000b12:	4313      	orrs	r3, r2
 8000b14:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b16:	f3bf 8f4f 	dsb	sy
}
 8000b1a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <__NVIC_SystemReset+0x20>
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	05fa0004 	.word	0x05fa0004

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <NMI_Handler+0x4>

08000b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8000b34:	f7ff ffe2 	bl	8000afc <__NVIC_SystemReset>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <MemManage_Handler+0x4>

08000b40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f936 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return 1;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <_kill>:

int _kill(int pid, int sig)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b98:	f001 fe18 	bl	80027cc <__errno>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2216      	movs	r2, #22
 8000ba0:	601a      	str	r2, [r3, #0]
  return -1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_exit>:

void _exit (int status)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bb6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffe7 	bl	8000b8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <_exit+0x12>

08000bc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e00a      	b.n	8000bec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd6:	f3af 8000 	nop.w
 8000bda:	4601      	mov	r1, r0
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	b2ca      	uxtb	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dbf0      	blt.n	8000bd6 <_read+0x12>
  }

  return len;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	e009      	b.n	8000c24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	dbf1      	blt.n	8000c10 <_write+0x12>
  }
  return len;
 8000c2c:	687b      	ldr	r3, [r7, #4]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_close>:

int _close(int file)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <_isatty>:

int _isatty(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b085      	sub	sp, #20
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
	...

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	@ (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f001 fd80 	bl	80027cc <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <_sbrk+0x64>)
 8000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20002800 	.word	0x20002800
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	200004bc 	.word	0x200004bc
 8000d00:	20000610 	.word	0x20000610

08000d04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d10:	f7ff fff8 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480b      	ldr	r0, [pc, #44]	@ (8000d44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d16:	490c      	ldr	r1, [pc, #48]	@ (8000d48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d18:	4a0c      	ldr	r2, [pc, #48]	@ (8000d4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a09      	ldr	r2, [pc, #36]	@ (8000d50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d2c:	4c09      	ldr	r4, [pc, #36]	@ (8000d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f001 fd4d 	bl	80027d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3e:	f7ff fd03 	bl	8000748 <main>
  bx lr
 8000d42:	4770      	bx	lr
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8000d4c:	0800359c 	.word	0x0800359c
  ldr r2, =_sbss
 8000d50:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8000d54:	20000610 	.word	0x20000610

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <HAL_Init+0x28>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	@ (8000d84 <HAL_Init+0x28>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f92b 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	200f      	movs	r0, #15
 8000d74:	f000 f808 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff fe4e 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40022000 	.word	0x40022000

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_InitTick+0x54>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_InitTick+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f935 	bl	8001016 <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d80a      	bhi.n	8000dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f000 f90b 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	@ (8000de4 <HAL_InitTick+0x5c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000200 	.word	0x20000200
 8000de0:	20000208 	.word	0x20000208
 8000de4:	20000204 	.word	0x20000204

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_IncTick+0x1c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <HAL_IncTick+0x20>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a03      	ldr	r2, [pc, #12]	@ (8000e08 <HAL_IncTick+0x20>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	20000208 	.word	0x20000208
 8000e08:	200004c0 	.word	0x200004c0

08000e0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b02      	ldr	r3, [pc, #8]	@ (8000e1c <HAL_GetTick+0x10>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	200004c0 	.word	0x200004c0

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff fff0 	bl	8000e0c <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffe0 	bl	8000e0c <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000208 	.word	0x20000208

08000e68 <__NVIC_SetPriorityGrouping>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_SetPriority>:
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	@ (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	@ (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	@ 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff90 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff49 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff5e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff90 	bl	8000f20 <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5f 	bl	8000ecc <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffb0 	bl	8000f84 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b08b      	sub	sp, #44	@ 0x2c
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001042:	e161      	b.n	8001308 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001044:	2201      	movs	r2, #1
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 8150 	bne.w	8001302 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4a97      	ldr	r2, [pc, #604]	@ (80012c4 <HAL_GPIO_Init+0x294>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d05e      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 800106c:	4a95      	ldr	r2, [pc, #596]	@ (80012c4 <HAL_GPIO_Init+0x294>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d875      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 8001072:	4a95      	ldr	r2, [pc, #596]	@ (80012c8 <HAL_GPIO_Init+0x298>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d058      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 8001078:	4a93      	ldr	r2, [pc, #588]	@ (80012c8 <HAL_GPIO_Init+0x298>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d86f      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 800107e:	4a93      	ldr	r2, [pc, #588]	@ (80012cc <HAL_GPIO_Init+0x29c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d052      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 8001084:	4a91      	ldr	r2, [pc, #580]	@ (80012cc <HAL_GPIO_Init+0x29c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d869      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 800108a:	4a91      	ldr	r2, [pc, #580]	@ (80012d0 <HAL_GPIO_Init+0x2a0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d04c      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 8001090:	4a8f      	ldr	r2, [pc, #572]	@ (80012d0 <HAL_GPIO_Init+0x2a0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d863      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 8001096:	4a8f      	ldr	r2, [pc, #572]	@ (80012d4 <HAL_GPIO_Init+0x2a4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d046      	beq.n	800112a <HAL_GPIO_Init+0xfa>
 800109c:	4a8d      	ldr	r2, [pc, #564]	@ (80012d4 <HAL_GPIO_Init+0x2a4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d85d      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	d82a      	bhi.n	80010fc <HAL_GPIO_Init+0xcc>
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d859      	bhi.n	800115e <HAL_GPIO_Init+0x12e>
 80010aa:	a201      	add	r2, pc, #4	@ (adr r2, 80010b0 <HAL_GPIO_Init+0x80>)
 80010ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b0:	0800112b 	.word	0x0800112b
 80010b4:	08001105 	.word	0x08001105
 80010b8:	08001117 	.word	0x08001117
 80010bc:	08001159 	.word	0x08001159
 80010c0:	0800115f 	.word	0x0800115f
 80010c4:	0800115f 	.word	0x0800115f
 80010c8:	0800115f 	.word	0x0800115f
 80010cc:	0800115f 	.word	0x0800115f
 80010d0:	0800115f 	.word	0x0800115f
 80010d4:	0800115f 	.word	0x0800115f
 80010d8:	0800115f 	.word	0x0800115f
 80010dc:	0800115f 	.word	0x0800115f
 80010e0:	0800115f 	.word	0x0800115f
 80010e4:	0800115f 	.word	0x0800115f
 80010e8:	0800115f 	.word	0x0800115f
 80010ec:	0800115f 	.word	0x0800115f
 80010f0:	0800115f 	.word	0x0800115f
 80010f4:	0800110d 	.word	0x0800110d
 80010f8:	08001121 	.word	0x08001121
 80010fc:	4a76      	ldr	r2, [pc, #472]	@ (80012d8 <HAL_GPIO_Init+0x2a8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001102:	e02c      	b.n	800115e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	623b      	str	r3, [r7, #32]
          break;
 800110a:	e029      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	3304      	adds	r3, #4
 8001112:	623b      	str	r3, [r7, #32]
          break;
 8001114:	e024      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	3308      	adds	r3, #8
 800111c:	623b      	str	r3, [r7, #32]
          break;
 800111e:	e01f      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	330c      	adds	r3, #12
 8001126:	623b      	str	r3, [r7, #32]
          break;
 8001128:	e01a      	b.n	8001160 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001132:	2304      	movs	r3, #4
 8001134:	623b      	str	r3, [r7, #32]
          break;
 8001136:	e013      	b.n	8001160 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d105      	bne.n	800114c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001140:	2308      	movs	r3, #8
 8001142:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	611a      	str	r2, [r3, #16]
          break;
 800114a:	e009      	b.n	8001160 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800114c:	2308      	movs	r3, #8
 800114e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	615a      	str	r2, [r3, #20]
          break;
 8001156:	e003      	b.n	8001160 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
          break;
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x130>
          break;
 800115e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2bff      	cmp	r3, #255	@ 0xff
 8001164:	d801      	bhi.n	800116a <HAL_GPIO_Init+0x13a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	e001      	b.n	800116e <HAL_GPIO_Init+0x13e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3304      	adds	r3, #4
 800116e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2bff      	cmp	r3, #255	@ 0xff
 8001174:	d802      	bhi.n	800117c <HAL_GPIO_Init+0x14c>
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0x152>
 800117c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117e:	3b08      	subs	r3, #8
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	210f      	movs	r1, #15
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	6a39      	ldr	r1, [r7, #32]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	431a      	orrs	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80a9 	beq.w	8001302 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011b0:	4b4a      	ldr	r3, [pc, #296]	@ (80012dc <HAL_GPIO_Init+0x2ac>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a49      	ldr	r2, [pc, #292]	@ (80012dc <HAL_GPIO_Init+0x2ac>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b47      	ldr	r3, [pc, #284]	@ (80012dc <HAL_GPIO_Init+0x2ac>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011c8:	4a45      	ldr	r2, [pc, #276]	@ (80012e0 <HAL_GPIO_Init+0x2b0>)
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a3d      	ldr	r2, [pc, #244]	@ (80012e4 <HAL_GPIO_Init+0x2b4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d00d      	beq.n	8001210 <HAL_GPIO_Init+0x1e0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a3c      	ldr	r2, [pc, #240]	@ (80012e8 <HAL_GPIO_Init+0x2b8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d007      	beq.n	800120c <HAL_GPIO_Init+0x1dc>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a3b      	ldr	r2, [pc, #236]	@ (80012ec <HAL_GPIO_Init+0x2bc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d101      	bne.n	8001208 <HAL_GPIO_Init+0x1d8>
 8001204:	2302      	movs	r3, #2
 8001206:	e004      	b.n	8001212 <HAL_GPIO_Init+0x1e2>
 8001208:	2303      	movs	r3, #3
 800120a:	e002      	b.n	8001212 <HAL_GPIO_Init+0x1e2>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <HAL_GPIO_Init+0x1e2>
 8001210:	2300      	movs	r3, #0
 8001212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001214:	f002 0203 	and.w	r2, r2, #3
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4093      	lsls	r3, r2
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001222:	492f      	ldr	r1, [pc, #188]	@ (80012e0 <HAL_GPIO_Init+0x2b0>)
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800123c:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	492b      	ldr	r1, [pc, #172]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800124a:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	43db      	mvns	r3, r3
 8001252:	4927      	ldr	r1, [pc, #156]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 8001254:	4013      	ands	r3, r2
 8001256:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	4921      	ldr	r1, [pc, #132]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	60cb      	str	r3, [r1, #12]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	491d      	ldr	r1, [pc, #116]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800127c:	4013      	ands	r3, r2
 800127e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4917      	ldr	r1, [pc, #92]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4913      	ldr	r1, [pc, #76]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01f      	beq.n	80012f4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	490d      	ldr	r1, [pc, #52]	@ (80012f0 <HAL_GPIO_Init+0x2c0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
 80012c0:	e01f      	b.n	8001302 <HAL_GPIO_Init+0x2d2>
 80012c2:	bf00      	nop
 80012c4:	10320000 	.word	0x10320000
 80012c8:	10310000 	.word	0x10310000
 80012cc:	10220000 	.word	0x10220000
 80012d0:	10210000 	.word	0x10210000
 80012d4:	10120000 	.word	0x10120000
 80012d8:	10110000 	.word	0x10110000
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	40010800 	.word	0x40010800
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40011000 	.word	0x40011000
 80012f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_GPIO_Init+0x2f4>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	4909      	ldr	r1, [pc, #36]	@ (8001324 <HAL_GPIO_Init+0x2f4>)
 80012fe:	4013      	ands	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	3301      	adds	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	f47f ae96 	bne.w	8001044 <HAL_GPIO_Init+0x14>
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	372c      	adds	r7, #44	@ 0x2c
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	40010400 	.word	0x40010400

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001344:	e003      	b.n	800134e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	041a      	lsls	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e12b      	b.n	80015c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d106      	bne.n	8001384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fb7c 	bl	8000a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2224      	movs	r2, #36	@ 0x24
 8001388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0201 	bic.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013bc:	f001 f842 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 80013c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4a81      	ldr	r2, [pc, #516]	@ (80015cc <HAL_I2C_Init+0x274>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d807      	bhi.n	80013dc <HAL_I2C_Init+0x84>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a80      	ldr	r2, [pc, #512]	@ (80015d0 <HAL_I2C_Init+0x278>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	bf94      	ite	ls
 80013d4:	2301      	movls	r3, #1
 80013d6:	2300      	movhi	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	e006      	b.n	80013ea <HAL_I2C_Init+0x92>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4a7d      	ldr	r2, [pc, #500]	@ (80015d4 <HAL_I2C_Init+0x27c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	bf94      	ite	ls
 80013e4:	2301      	movls	r3, #1
 80013e6:	2300      	movhi	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0e7      	b.n	80015c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4a78      	ldr	r2, [pc, #480]	@ (80015d8 <HAL_I2C_Init+0x280>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	0c9b      	lsrs	r3, r3, #18
 80013fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	430a      	orrs	r2, r1
 8001410:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a6a      	ldr	r2, [pc, #424]	@ (80015cc <HAL_I2C_Init+0x274>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d802      	bhi.n	800142c <HAL_I2C_Init+0xd4>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3301      	adds	r3, #1
 800142a:	e009      	b.n	8001440 <HAL_I2C_Init+0xe8>
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	4a69      	ldr	r2, [pc, #420]	@ (80015dc <HAL_I2C_Init+0x284>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	3301      	adds	r3, #1
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	430b      	orrs	r3, r1
 8001446:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001452:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	495c      	ldr	r1, [pc, #368]	@ (80015cc <HAL_I2C_Init+0x274>)
 800145c:	428b      	cmp	r3, r1
 800145e:	d819      	bhi.n	8001494 <HAL_I2C_Init+0x13c>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1e59      	subs	r1, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fbb1 f3f3 	udiv	r3, r1, r3
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001474:	400b      	ands	r3, r1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00a      	beq.n	8001490 <HAL_I2C_Init+0x138>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1e59      	subs	r1, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fbb1 f3f3 	udiv	r3, r1, r3
 8001488:	3301      	adds	r3, #1
 800148a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148e:	e051      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 8001490:	2304      	movs	r3, #4
 8001492:	e04f      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d111      	bne.n	80014c0 <HAL_I2C_Init+0x168>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1e58      	subs	r0, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	440b      	add	r3, r1
 80014aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	e012      	b.n	80014e6 <HAL_I2C_Init+0x18e>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1e58      	subs	r0, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	0099      	lsls	r1, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Init+0x196>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e022      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10e      	bne.n	8001514 <HAL_I2C_Init+0x1bc>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1e58      	subs	r0, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6859      	ldr	r1, [r3, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	440b      	add	r3, r1
 8001504:	fbb0 f3f3 	udiv	r3, r0, r3
 8001508:	3301      	adds	r3, #1
 800150a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001512:	e00f      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e58      	subs	r0, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	0099      	lsls	r1, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	fbb0 f3f3 	udiv	r3, r0, r3
 800152a:	3301      	adds	r3, #1
 800152c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001530:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	6809      	ldr	r1, [r1, #0]
 8001538:	4313      	orrs	r3, r2
 800153a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69da      	ldr	r2, [r3, #28]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001562:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6911      	ldr	r1, [r2, #16]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68d2      	ldr	r2, [r2, #12]
 800156e:	4311      	orrs	r1, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	430b      	orrs	r3, r1
 8001576:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2220      	movs	r2, #32
 80015ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	000186a0 	.word	0x000186a0
 80015d0:	001e847f 	.word	0x001e847f
 80015d4:	003d08ff 	.word	0x003d08ff
 80015d8:	431bde83 	.word	0x431bde83
 80015dc:	10624dd3 	.word	0x10624dd3

080015e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	817b      	strh	r3, [r7, #10]
 80015f2:	460b      	mov	r3, r1
 80015f4:	813b      	strh	r3, [r7, #8]
 80015f6:	4613      	mov	r3, r2
 80015f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015fa:	f7ff fc07 	bl	8000e0c <HAL_GetTick>
 80015fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b20      	cmp	r3, #32
 800160a:	f040 80d9 	bne.w	80017c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2319      	movs	r3, #25
 8001614:	2201      	movs	r2, #1
 8001616:	496d      	ldr	r1, [pc, #436]	@ (80017cc <HAL_I2C_Mem_Write+0x1ec>)
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f971 	bl	8001900 <I2C_WaitOnFlagUntilTimeout>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001624:	2302      	movs	r3, #2
 8001626:	e0cc      	b.n	80017c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_I2C_Mem_Write+0x56>
 8001632:	2302      	movs	r3, #2
 8001634:	e0c5      	b.n	80017c2 <HAL_I2C_Mem_Write+0x1e2>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d007      	beq.n	800165c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800166a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2221      	movs	r2, #33	@ 0x21
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2240      	movs	r2, #64	@ 0x40
 8001678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a3a      	ldr	r2, [r7, #32]
 8001686:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800168c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001692:	b29a      	uxth	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4a4d      	ldr	r2, [pc, #308]	@ (80017d0 <HAL_I2C_Mem_Write+0x1f0>)
 800169c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800169e:	88f8      	ldrh	r0, [r7, #6]
 80016a0:	893a      	ldrh	r2, [r7, #8]
 80016a2:	8979      	ldrh	r1, [r7, #10]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	4603      	mov	r3, r0
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f890 	bl	80017d4 <I2C_RequestMemoryWrite>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d052      	beq.n	8001760 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e081      	b.n	80017c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 fa36 	bl	8001b34 <I2C_WaitOnTXEFlagUntilTimeout>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00d      	beq.n	80016ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d107      	bne.n	80016e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e06b      	b.n	80017c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b04      	cmp	r3, #4
 8001726:	d11b      	bne.n	8001760 <HAL_I2C_Mem_Write+0x180>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800172c:	2b00      	cmp	r3, #0
 800172e:	d017      	beq.n	8001760 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1aa      	bne.n	80016be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 fa29 	bl	8001bc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00d      	beq.n	8001794 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	2b04      	cmp	r3, #4
 800177e:	d107      	bne.n	8001790 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800178e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e016      	b.n	80017c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2220      	movs	r2, #32
 80017a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
  }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	00100002 	.word	0x00100002
 80017d0:	ffff0000 	.word	0xffff0000

080017d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af02      	add	r7, sp, #8
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4603      	mov	r3, r0
 80017e4:	817b      	strh	r3, [r7, #10]
 80017e6:	460b      	mov	r3, r1
 80017e8:	813b      	strh	r3, [r7, #8]
 80017ea:	4613      	mov	r3, r2
 80017ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	2200      	movs	r2, #0
 8001806:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f878 	bl	8001900 <I2C_WaitOnFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00d      	beq.n	8001832 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001824:	d103      	bne.n	800182e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800182c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e05f      	b.n	80018f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001832:	897b      	ldrh	r3, [r7, #10]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001840:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	6a3a      	ldr	r2, [r7, #32]
 8001846:	492d      	ldr	r1, [pc, #180]	@ (80018fc <I2C_RequestMemoryWrite+0x128>)
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f8d3 	bl	80019f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e04c      	b.n	80018f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800186e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001870:	6a39      	ldr	r1, [r7, #32]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f95e 	bl	8001b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00d      	beq.n	800189a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	2b04      	cmp	r3, #4
 8001884:	d107      	bne.n	8001896 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001894:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e02b      	b.n	80018f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018a0:	893b      	ldrh	r3, [r7, #8]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	e021      	b.n	80018f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018ac:	893b      	ldrh	r3, [r7, #8]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018bc:	6a39      	ldr	r1, [r7, #32]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f938 	bl	8001b34 <I2C_WaitOnTXEFlagUntilTimeout>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00d      	beq.n	80018e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d107      	bne.n	80018e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e005      	b.n	80018f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018e6:	893b      	ldrh	r3, [r7, #8]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	00010002 	.word	0x00010002

08001900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001910:	e048      	b.n	80019a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d044      	beq.n	80019a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800191a:	f7ff fa77 	bl	8000e0c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d302      	bcc.n	8001930 <I2C_WaitOnFlagUntilTimeout+0x30>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d139      	bne.n	80019a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	0c1b      	lsrs	r3, r3, #16
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d10d      	bne.n	8001956 <I2C_WaitOnFlagUntilTimeout+0x56>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	43da      	mvns	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	4013      	ands	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	e00c      	b.n	8001970 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	43da      	mvns	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	4013      	ands	r3, r2
 8001962:	b29b      	uxth	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	429a      	cmp	r2, r3
 8001974:	d116      	bne.n	80019a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f043 0220 	orr.w	r2, r3, #32
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e023      	b.n	80019ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	0c1b      	lsrs	r3, r3, #16
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d10d      	bne.n	80019ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	43da      	mvns	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	4013      	ands	r3, r2
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	e00c      	b.n	80019e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	43da      	mvns	r2, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	4013      	ands	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d093      	beq.n	8001912 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a02:	e071      	b.n	8001ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a12:	d123      	bne.n	8001a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2220      	movs	r2, #32
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	f043 0204 	orr.w	r2, r3, #4
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e067      	b.n	8001b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a62:	d041      	beq.n	8001ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a64:	f7ff f9d2 	bl	8000e0c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d302      	bcc.n	8001a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d136      	bne.n	8001ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	0c1b      	lsrs	r3, r3, #16
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10c      	bne.n	8001a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	2300      	moveq	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	e00b      	b.n	8001ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf14      	ite	ne
 8001ab0:	2301      	movne	r3, #1
 8001ab2:	2300      	moveq	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d016      	beq.n	8001ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	f043 0220 	orr.w	r2, r3, #32
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e021      	b.n	8001b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	0c1b      	lsrs	r3, r3, #16
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d10c      	bne.n	8001b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	43da      	mvns	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	4013      	ands	r3, r2
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	e00b      	b.n	8001b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4013      	ands	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	bf14      	ite	ne
 8001b1e:	2301      	movne	r3, #1
 8001b20:	2300      	moveq	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f47f af6d 	bne.w	8001a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b40:	e034      	b.n	8001bac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f886 	bl	8001c54 <I2C_IsAcknowledgeFailed>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e034      	b.n	8001bbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d028      	beq.n	8001bac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7ff f957 	bl	8000e0c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11d      	bne.n	8001bac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b7a:	2b80      	cmp	r3, #128	@ 0x80
 8001b7c:	d016      	beq.n	8001bac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	f043 0220 	orr.w	r2, r3, #32
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e007      	b.n	8001bbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb6:	2b80      	cmp	r3, #128	@ 0x80
 8001bb8:	d1c3      	bne.n	8001b42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bd0:	e034      	b.n	8001c3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f83e 	bl	8001c54 <I2C_IsAcknowledgeFailed>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e034      	b.n	8001c4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d028      	beq.n	8001c3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bea:	f7ff f90f 	bl	8000e0c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d302      	bcc.n	8001c00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d11d      	bne.n	8001c3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d016      	beq.n	8001c3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	f043 0220 	orr.w	r2, r3, #32
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e007      	b.n	8001c4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d1c3      	bne.n	8001bd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c6a:	d11b      	bne.n	8001ca4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	f043 0204 	orr.w	r2, r3, #4
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e272      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8087 	beq.w	8001dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd0:	4b92      	ldr	r3, [pc, #584]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d00c      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cdc:	4b8f      	ldr	r3, [pc, #572]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d112      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
 8001ce8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf4:	d10b      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf6:	4b89      	ldr	r3, [pc, #548]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d06c      	beq.n	8001ddc <HAL_RCC_OscConfig+0x12c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d168      	bne.n	8001ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e24c      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x76>
 8001d18:	4b80      	ldr	r3, [pc, #512]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e02e      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x98>
 8001d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7a      	ldr	r2, [pc, #488]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b78      	ldr	r3, [pc, #480]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a77      	ldr	r2, [pc, #476]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e01d      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0xbc>
 8001d52:	4b72      	ldr	r3, [pc, #456]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a71      	ldr	r2, [pc, #452]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a6e      	ldr	r2, [pc, #440]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d6c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a6a      	ldr	r2, [pc, #424]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b68      	ldr	r3, [pc, #416]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a67      	ldr	r2, [pc, #412]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f83e 	bl	8000e0c <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff f83a 	bl	8000e0c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	@ 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e200      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0xe4>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff f82a 	bl	8000e0c <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff f826 	bl	8000e0c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	@ 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e1ec      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	4b53      	ldr	r3, [pc, #332]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x10c>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d063      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dea:	4b4c      	ldr	r3, [pc, #304]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001df6:	4b49      	ldr	r3, [pc, #292]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x18c>
 8001e02:	4b46      	ldr	r3, [pc, #280]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d116      	bne.n	8001e3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	4b43      	ldr	r3, [pc, #268]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_RCC_OscConfig+0x176>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e1c0      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	4b3d      	ldr	r3, [pc, #244]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4939      	ldr	r1, [pc, #228]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	e03a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d020      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e44:	4b36      	ldr	r3, [pc, #216]	@ (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7fe ffdf 	bl	8000e0c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e52:	f7fe ffdb 	bl	8000e0c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e1a1      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	4b2d      	ldr	r3, [pc, #180]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b2a      	ldr	r3, [pc, #168]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4927      	ldr	r1, [pc, #156]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e015      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7fe ffbe 	bl	8000e0c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e94:	f7fe ffba 	bl	8000e0c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e180      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d03a      	beq.n	8001f34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d019      	beq.n	8001efa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec6:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7fe ff9e 	bl	8000e0c <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7fe ff9a 	bl	8000e0c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e160      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 faba 	bl	800246c <RCC_Delay>
 8001ef8:	e01c      	b.n	8001f34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <HAL_RCC_OscConfig+0x274>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f00:	f7fe ff84 	bl	8000e0c <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f06:	e00f      	b.n	8001f28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7fe ff80 	bl	8000e0c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d908      	bls.n	8001f28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e146      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	42420000 	.word	0x42420000
 8001f24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	4b92      	ldr	r3, [pc, #584]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e9      	bne.n	8001f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80a6 	beq.w	800208e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b8b      	ldr	r3, [pc, #556]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b88      	ldr	r3, [pc, #544]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a87      	ldr	r2, [pc, #540]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	61d3      	str	r3, [r2, #28]
 8001f5e:	4b85      	ldr	r3, [pc, #532]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b82      	ldr	r3, [pc, #520]	@ (8002178 <HAL_RCC_OscConfig+0x4c8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002178 <HAL_RCC_OscConfig+0x4c8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002178 <HAL_RCC_OscConfig+0x4c8>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7fe ff41 	bl	8000e0c <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7fe ff3d 	bl	8000e0c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	@ 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e103      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b75      	ldr	r3, [pc, #468]	@ (8002178 <HAL_RCC_OscConfig+0x4c8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x312>
 8001fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a6e      	ldr	r2, [pc, #440]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e02d      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x334>
 8001fca:	4b6a      	ldr	r3, [pc, #424]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a69      	ldr	r2, [pc, #420]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b67      	ldr	r3, [pc, #412]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a66      	ldr	r2, [pc, #408]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	e01c      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x356>
 8001fec:	4b61      	ldr	r3, [pc, #388]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a60      	ldr	r2, [pc, #384]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6213      	str	r3, [r2, #32]
 8001ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8002006:	4b5b      	ldr	r3, [pc, #364]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a5a      	ldr	r2, [pc, #360]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	4b58      	ldr	r3, [pc, #352]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a57      	ldr	r2, [pc, #348]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7fe fef1 	bl	8000e0c <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe feed 	bl	8000e0c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0b1      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	4b4b      	ldr	r3, [pc, #300]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ee      	beq.n	800202e <HAL_RCC_OscConfig+0x37e>
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7fe fedb 	bl	8000e0c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fed7 	bl	8000e0c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e09b      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	4b40      	ldr	r3, [pc, #256]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b3c      	ldr	r3, [pc, #240]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a3b      	ldr	r2, [pc, #236]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8087 	beq.w	80021a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002098:	4b36      	ldr	r3, [pc, #216]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d061      	beq.n	8002168 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d146      	bne.n	800213a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4b33      	ldr	r3, [pc, #204]	@ (800217c <HAL_RCC_OscConfig+0x4cc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7fe feab 	bl	8000e0c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7fe fea7 	bl	8000e0c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e06d      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e0:	d108      	bne.n	80020f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020e2:	4b24      	ldr	r3, [pc, #144]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	4921      	ldr	r1, [pc, #132]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a19      	ldr	r1, [r3, #32]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	430b      	orrs	r3, r1
 8002106:	491b      	ldr	r1, [pc, #108]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210c:	4b1b      	ldr	r3, [pc, #108]	@ (800217c <HAL_RCC_OscConfig+0x4cc>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7fe fe7b 	bl	8000e0c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe fe77 	bl	8000e0c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e03d      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x46a>
 8002138:	e035      	b.n	80021a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <HAL_RCC_OscConfig+0x4cc>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe fe64 	bl	8000e0c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002148:	f7fe fe60 	bl	8000e0c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e026      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x498>
 8002166:	e01e      	b.n	80021a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d107      	bne.n	8002180 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e019      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
 8002174:	40021000 	.word	0x40021000
 8002178:	40007000 	.word	0x40007000
 800217c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_RCC_OscConfig+0x500>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	429a      	cmp	r2, r3
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000

080021b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0d0      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d910      	bls.n	80021f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b67      	ldr	r3, [pc, #412]	@ (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 0207 	bic.w	r2, r3, #7
 80021de:	4965      	ldr	r1, [pc, #404]	@ (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b63      	ldr	r3, [pc, #396]	@ (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0b8      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002210:	4b59      	ldr	r3, [pc, #356]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a58      	ldr	r2, [pc, #352]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800221a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002228:	4b53      	ldr	r3, [pc, #332]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a52      	ldr	r2, [pc, #328]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002232:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002234:	4b50      	ldr	r3, [pc, #320]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	494d      	ldr	r1, [pc, #308]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d040      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b47      	ldr	r3, [pc, #284]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d115      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e07f      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002272:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e073      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002282:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e06b      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b39      	ldr	r3, [pc, #228]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4936      	ldr	r1, [pc, #216]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a4:	f7fe fdb2 	bl	8000e0c <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7fe fdae 	bl	8000e0c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e053      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d4:	4b27      	ldr	r3, [pc, #156]	@ (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d210      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	4922      	ldr	r1, [pc, #136]	@ (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e032      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002310:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4916      	ldr	r1, [pc, #88]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800232e:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	490e      	ldr	r1, [pc, #56]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002342:	f000 f821 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 8002346:	4602      	mov	r2, r0
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	490a      	ldr	r1, [pc, #40]	@ (800237c <HAL_RCC_ClockConfig+0x1c8>)
 8002354:	5ccb      	ldrb	r3, [r1, r3]
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	4a09      	ldr	r2, [pc, #36]	@ (8002380 <HAL_RCC_ClockConfig+0x1cc>)
 800235c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800235e:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <HAL_RCC_ClockConfig+0x1d0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fd10 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40022000 	.word	0x40022000
 8002378:	40021000 	.word	0x40021000
 800237c:	0800348c 	.word	0x0800348c
 8002380:	20000200 	.word	0x20000200
 8002384:	20000204 	.word	0x20000204

08002388 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023a2:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <HAL_RCC_GetSysClockFreq+0x94>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d002      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x30>
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d003      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0x36>
 80023b6:	e027      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b8:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ba:	613b      	str	r3, [r7, #16]
      break;
 80023bc:	e027      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0c9b      	lsrs	r3, r3, #18
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	4a17      	ldr	r2, [pc, #92]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023c8:	5cd3      	ldrb	r3, [r2, r3]
 80023ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d010      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <HAL_RCC_GetSysClockFreq+0x94>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	0c5b      	lsrs	r3, r3, #17
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	4a11      	ldr	r2, [pc, #68]	@ (8002428 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ea:	fb03 f202 	mul.w	r2, r3, r2
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e004      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a0c      	ldr	r2, [pc, #48]	@ (800242c <HAL_RCC_GetSysClockFreq+0xa4>)
 80023fc:	fb02 f303 	mul.w	r3, r2, r3
 8002400:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	613b      	str	r3, [r7, #16]
      break;
 8002406:	e002      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x98>)
 800240a:	613b      	str	r3, [r7, #16]
      break;
 800240c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240e:	693b      	ldr	r3, [r7, #16]
}
 8002410:	4618      	mov	r0, r3
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	007a1200 	.word	0x007a1200
 8002424:	080034a4 	.word	0x080034a4
 8002428:	080034b4 	.word	0x080034b4
 800242c:	003d0900 	.word	0x003d0900

08002430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002434:	4b02      	ldr	r3, [pc, #8]	@ (8002440 <HAL_RCC_GetHCLKFreq+0x10>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000200 	.word	0x20000200

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002448:	f7ff fff2 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4903      	ldr	r1, [pc, #12]	@ (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	0800349c 	.word	0x0800349c

0800246c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002474:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <RCC_Delay+0x34>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <RCC_Delay+0x38>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	0a5b      	lsrs	r3, r3, #9
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002488:	bf00      	nop
  }
  while (Delay --);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1e5a      	subs	r2, r3, #1
 800248e:	60fa      	str	r2, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f9      	bne.n	8002488 <RCC_Delay+0x1c>
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	20000200 	.word	0x20000200
 80024a4:	10624dd3 	.word	0x10624dd3

080024a8 <rand>:
 80024a8:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <rand+0x5c>)
 80024aa:	b510      	push	{r4, lr}
 80024ac:	681c      	ldr	r4, [r3, #0]
 80024ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80024b0:	b9b3      	cbnz	r3, 80024e0 <rand+0x38>
 80024b2:	2018      	movs	r0, #24
 80024b4:	f000 fa1e 	bl	80028f4 <malloc>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6320      	str	r0, [r4, #48]	@ 0x30
 80024bc:	b920      	cbnz	r0, 80024c8 <rand+0x20>
 80024be:	2152      	movs	r1, #82	@ 0x52
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <rand+0x60>)
 80024c2:	4812      	ldr	r0, [pc, #72]	@ (800250c <rand+0x64>)
 80024c4:	f000 f9b0 	bl	8002828 <__assert_func>
 80024c8:	4911      	ldr	r1, [pc, #68]	@ (8002510 <rand+0x68>)
 80024ca:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <rand+0x6c>)
 80024cc:	e9c0 1300 	strd	r1, r3, [r0]
 80024d0:	4b11      	ldr	r3, [pc, #68]	@ (8002518 <rand+0x70>)
 80024d2:	2100      	movs	r1, #0
 80024d4:	6083      	str	r3, [r0, #8]
 80024d6:	230b      	movs	r3, #11
 80024d8:	8183      	strh	r3, [r0, #12]
 80024da:	2001      	movs	r0, #1
 80024dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80024e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80024e2:	480e      	ldr	r0, [pc, #56]	@ (800251c <rand+0x74>)
 80024e4:	690b      	ldr	r3, [r1, #16]
 80024e6:	694c      	ldr	r4, [r1, #20]
 80024e8:	4358      	muls	r0, r3
 80024ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <rand+0x78>)
 80024ec:	fb02 0004 	mla	r0, r2, r4, r0
 80024f0:	fba3 3202 	umull	r3, r2, r3, r2
 80024f4:	3301      	adds	r3, #1
 80024f6:	eb40 0002 	adc.w	r0, r0, r2
 80024fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80024fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002502:	bd10      	pop	{r4, pc}
 8002504:	20000218 	.word	0x20000218
 8002508:	080034b6 	.word	0x080034b6
 800250c:	080034cd 	.word	0x080034cd
 8002510:	abcd330e 	.word	0xabcd330e
 8002514:	e66d1234 	.word	0xe66d1234
 8002518:	0005deec 	.word	0x0005deec
 800251c:	5851f42d 	.word	0x5851f42d
 8002520:	4c957f2d 	.word	0x4c957f2d

08002524 <std>:
 8002524:	2300      	movs	r3, #0
 8002526:	b510      	push	{r4, lr}
 8002528:	4604      	mov	r4, r0
 800252a:	e9c0 3300 	strd	r3, r3, [r0]
 800252e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002532:	6083      	str	r3, [r0, #8]
 8002534:	8181      	strh	r1, [r0, #12]
 8002536:	6643      	str	r3, [r0, #100]	@ 0x64
 8002538:	81c2      	strh	r2, [r0, #14]
 800253a:	6183      	str	r3, [r0, #24]
 800253c:	4619      	mov	r1, r3
 800253e:	2208      	movs	r2, #8
 8002540:	305c      	adds	r0, #92	@ 0x5c
 8002542:	f000 f8f4 	bl	800272e <memset>
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <std+0x58>)
 8002548:	6224      	str	r4, [r4, #32]
 800254a:	6263      	str	r3, [r4, #36]	@ 0x24
 800254c:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <std+0x5c>)
 800254e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002550:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <std+0x60>)
 8002552:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002554:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <std+0x64>)
 8002556:	6323      	str	r3, [r4, #48]	@ 0x30
 8002558:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <std+0x68>)
 800255a:	429c      	cmp	r4, r3
 800255c:	d006      	beq.n	800256c <std+0x48>
 800255e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002562:	4294      	cmp	r4, r2
 8002564:	d002      	beq.n	800256c <std+0x48>
 8002566:	33d0      	adds	r3, #208	@ 0xd0
 8002568:	429c      	cmp	r4, r3
 800256a:	d105      	bne.n	8002578 <std+0x54>
 800256c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002574:	f000 b954 	b.w	8002820 <__retarget_lock_init_recursive>
 8002578:	bd10      	pop	{r4, pc}
 800257a:	bf00      	nop
 800257c:	080026a9 	.word	0x080026a9
 8002580:	080026cb 	.word	0x080026cb
 8002584:	08002703 	.word	0x08002703
 8002588:	08002727 	.word	0x08002727
 800258c:	200004c4 	.word	0x200004c4

08002590 <stdio_exit_handler>:
 8002590:	4a02      	ldr	r2, [pc, #8]	@ (800259c <stdio_exit_handler+0xc>)
 8002592:	4903      	ldr	r1, [pc, #12]	@ (80025a0 <stdio_exit_handler+0x10>)
 8002594:	4803      	ldr	r0, [pc, #12]	@ (80025a4 <stdio_exit_handler+0x14>)
 8002596:	f000 b869 	b.w	800266c <_fwalk_sglue>
 800259a:	bf00      	nop
 800259c:	2000020c 	.word	0x2000020c
 80025a0:	08002b61 	.word	0x08002b61
 80025a4:	2000021c 	.word	0x2000021c

080025a8 <cleanup_stdio>:
 80025a8:	6841      	ldr	r1, [r0, #4]
 80025aa:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <cleanup_stdio+0x34>)
 80025ac:	b510      	push	{r4, lr}
 80025ae:	4299      	cmp	r1, r3
 80025b0:	4604      	mov	r4, r0
 80025b2:	d001      	beq.n	80025b8 <cleanup_stdio+0x10>
 80025b4:	f000 fad4 	bl	8002b60 <_fflush_r>
 80025b8:	68a1      	ldr	r1, [r4, #8]
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <cleanup_stdio+0x38>)
 80025bc:	4299      	cmp	r1, r3
 80025be:	d002      	beq.n	80025c6 <cleanup_stdio+0x1e>
 80025c0:	4620      	mov	r0, r4
 80025c2:	f000 facd 	bl	8002b60 <_fflush_r>
 80025c6:	68e1      	ldr	r1, [r4, #12]
 80025c8:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <cleanup_stdio+0x3c>)
 80025ca:	4299      	cmp	r1, r3
 80025cc:	d004      	beq.n	80025d8 <cleanup_stdio+0x30>
 80025ce:	4620      	mov	r0, r4
 80025d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025d4:	f000 bac4 	b.w	8002b60 <_fflush_r>
 80025d8:	bd10      	pop	{r4, pc}
 80025da:	bf00      	nop
 80025dc:	200004c4 	.word	0x200004c4
 80025e0:	2000052c 	.word	0x2000052c
 80025e4:	20000594 	.word	0x20000594

080025e8 <global_stdio_init.part.0>:
 80025e8:	b510      	push	{r4, lr}
 80025ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <global_stdio_init.part.0+0x30>)
 80025ec:	4c0b      	ldr	r4, [pc, #44]	@ (800261c <global_stdio_init.part.0+0x34>)
 80025ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002620 <global_stdio_init.part.0+0x38>)
 80025f0:	4620      	mov	r0, r4
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	2104      	movs	r1, #4
 80025f6:	2200      	movs	r2, #0
 80025f8:	f7ff ff94 	bl	8002524 <std>
 80025fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002600:	2201      	movs	r2, #1
 8002602:	2109      	movs	r1, #9
 8002604:	f7ff ff8e 	bl	8002524 <std>
 8002608:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800260c:	2202      	movs	r2, #2
 800260e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002612:	2112      	movs	r1, #18
 8002614:	f7ff bf86 	b.w	8002524 <std>
 8002618:	200005fc 	.word	0x200005fc
 800261c:	200004c4 	.word	0x200004c4
 8002620:	08002591 	.word	0x08002591

08002624 <__sfp_lock_acquire>:
 8002624:	4801      	ldr	r0, [pc, #4]	@ (800262c <__sfp_lock_acquire+0x8>)
 8002626:	f000 b8fc 	b.w	8002822 <__retarget_lock_acquire_recursive>
 800262a:	bf00      	nop
 800262c:	20000605 	.word	0x20000605

08002630 <__sfp_lock_release>:
 8002630:	4801      	ldr	r0, [pc, #4]	@ (8002638 <__sfp_lock_release+0x8>)
 8002632:	f000 b8f7 	b.w	8002824 <__retarget_lock_release_recursive>
 8002636:	bf00      	nop
 8002638:	20000605 	.word	0x20000605

0800263c <__sinit>:
 800263c:	b510      	push	{r4, lr}
 800263e:	4604      	mov	r4, r0
 8002640:	f7ff fff0 	bl	8002624 <__sfp_lock_acquire>
 8002644:	6a23      	ldr	r3, [r4, #32]
 8002646:	b11b      	cbz	r3, 8002650 <__sinit+0x14>
 8002648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800264c:	f7ff bff0 	b.w	8002630 <__sfp_lock_release>
 8002650:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <__sinit+0x28>)
 8002652:	6223      	str	r3, [r4, #32]
 8002654:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <__sinit+0x2c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f5      	bne.n	8002648 <__sinit+0xc>
 800265c:	f7ff ffc4 	bl	80025e8 <global_stdio_init.part.0>
 8002660:	e7f2      	b.n	8002648 <__sinit+0xc>
 8002662:	bf00      	nop
 8002664:	080025a9 	.word	0x080025a9
 8002668:	200005fc 	.word	0x200005fc

0800266c <_fwalk_sglue>:
 800266c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002670:	4607      	mov	r7, r0
 8002672:	4688      	mov	r8, r1
 8002674:	4614      	mov	r4, r2
 8002676:	2600      	movs	r6, #0
 8002678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800267c:	f1b9 0901 	subs.w	r9, r9, #1
 8002680:	d505      	bpl.n	800268e <_fwalk_sglue+0x22>
 8002682:	6824      	ldr	r4, [r4, #0]
 8002684:	2c00      	cmp	r4, #0
 8002686:	d1f7      	bne.n	8002678 <_fwalk_sglue+0xc>
 8002688:	4630      	mov	r0, r6
 800268a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800268e:	89ab      	ldrh	r3, [r5, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d907      	bls.n	80026a4 <_fwalk_sglue+0x38>
 8002694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002698:	3301      	adds	r3, #1
 800269a:	d003      	beq.n	80026a4 <_fwalk_sglue+0x38>
 800269c:	4629      	mov	r1, r5
 800269e:	4638      	mov	r0, r7
 80026a0:	47c0      	blx	r8
 80026a2:	4306      	orrs	r6, r0
 80026a4:	3568      	adds	r5, #104	@ 0x68
 80026a6:	e7e9      	b.n	800267c <_fwalk_sglue+0x10>

080026a8 <__sread>:
 80026a8:	b510      	push	{r4, lr}
 80026aa:	460c      	mov	r4, r1
 80026ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b0:	f000 f868 	bl	8002784 <_read_r>
 80026b4:	2800      	cmp	r0, #0
 80026b6:	bfab      	itete	ge
 80026b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80026ba:	89a3      	ldrhlt	r3, [r4, #12]
 80026bc:	181b      	addge	r3, r3, r0
 80026be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80026c2:	bfac      	ite	ge
 80026c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80026c6:	81a3      	strhlt	r3, [r4, #12]
 80026c8:	bd10      	pop	{r4, pc}

080026ca <__swrite>:
 80026ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ce:	461f      	mov	r7, r3
 80026d0:	898b      	ldrh	r3, [r1, #12]
 80026d2:	4605      	mov	r5, r0
 80026d4:	05db      	lsls	r3, r3, #23
 80026d6:	460c      	mov	r4, r1
 80026d8:	4616      	mov	r6, r2
 80026da:	d505      	bpl.n	80026e8 <__swrite+0x1e>
 80026dc:	2302      	movs	r3, #2
 80026de:	2200      	movs	r2, #0
 80026e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e4:	f000 f83c 	bl	8002760 <_lseek_r>
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	4632      	mov	r2, r6
 80026ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026f0:	81a3      	strh	r3, [r4, #12]
 80026f2:	4628      	mov	r0, r5
 80026f4:	463b      	mov	r3, r7
 80026f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026fe:	f000 b853 	b.w	80027a8 <_write_r>

08002702 <__sseek>:
 8002702:	b510      	push	{r4, lr}
 8002704:	460c      	mov	r4, r1
 8002706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800270a:	f000 f829 	bl	8002760 <_lseek_r>
 800270e:	1c43      	adds	r3, r0, #1
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	bf15      	itete	ne
 8002714:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800271a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800271e:	81a3      	strheq	r3, [r4, #12]
 8002720:	bf18      	it	ne
 8002722:	81a3      	strhne	r3, [r4, #12]
 8002724:	bd10      	pop	{r4, pc}

08002726 <__sclose>:
 8002726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800272a:	f000 b809 	b.w	8002740 <_close_r>

0800272e <memset>:
 800272e:	4603      	mov	r3, r0
 8002730:	4402      	add	r2, r0
 8002732:	4293      	cmp	r3, r2
 8002734:	d100      	bne.n	8002738 <memset+0xa>
 8002736:	4770      	bx	lr
 8002738:	f803 1b01 	strb.w	r1, [r3], #1
 800273c:	e7f9      	b.n	8002732 <memset+0x4>
	...

08002740 <_close_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	2300      	movs	r3, #0
 8002744:	4d05      	ldr	r5, [pc, #20]	@ (800275c <_close_r+0x1c>)
 8002746:	4604      	mov	r4, r0
 8002748:	4608      	mov	r0, r1
 800274a:	602b      	str	r3, [r5, #0]
 800274c:	f7fe fa73 	bl	8000c36 <_close>
 8002750:	1c43      	adds	r3, r0, #1
 8002752:	d102      	bne.n	800275a <_close_r+0x1a>
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	b103      	cbz	r3, 800275a <_close_r+0x1a>
 8002758:	6023      	str	r3, [r4, #0]
 800275a:	bd38      	pop	{r3, r4, r5, pc}
 800275c:	20000600 	.word	0x20000600

08002760 <_lseek_r>:
 8002760:	b538      	push	{r3, r4, r5, lr}
 8002762:	4604      	mov	r4, r0
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	2200      	movs	r2, #0
 800276a:	4d05      	ldr	r5, [pc, #20]	@ (8002780 <_lseek_r+0x20>)
 800276c:	602a      	str	r2, [r5, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	f7fe fa85 	bl	8000c7e <_lseek>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	d102      	bne.n	800277e <_lseek_r+0x1e>
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	b103      	cbz	r3, 800277e <_lseek_r+0x1e>
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	bd38      	pop	{r3, r4, r5, pc}
 8002780:	20000600 	.word	0x20000600

08002784 <_read_r>:
 8002784:	b538      	push	{r3, r4, r5, lr}
 8002786:	4604      	mov	r4, r0
 8002788:	4608      	mov	r0, r1
 800278a:	4611      	mov	r1, r2
 800278c:	2200      	movs	r2, #0
 800278e:	4d05      	ldr	r5, [pc, #20]	@ (80027a4 <_read_r+0x20>)
 8002790:	602a      	str	r2, [r5, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	f7fe fa16 	bl	8000bc4 <_read>
 8002798:	1c43      	adds	r3, r0, #1
 800279a:	d102      	bne.n	80027a2 <_read_r+0x1e>
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	b103      	cbz	r3, 80027a2 <_read_r+0x1e>
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	bd38      	pop	{r3, r4, r5, pc}
 80027a4:	20000600 	.word	0x20000600

080027a8 <_write_r>:
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4604      	mov	r4, r0
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	2200      	movs	r2, #0
 80027b2:	4d05      	ldr	r5, [pc, #20]	@ (80027c8 <_write_r+0x20>)
 80027b4:	602a      	str	r2, [r5, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f7fe fa21 	bl	8000bfe <_write>
 80027bc:	1c43      	adds	r3, r0, #1
 80027be:	d102      	bne.n	80027c6 <_write_r+0x1e>
 80027c0:	682b      	ldr	r3, [r5, #0]
 80027c2:	b103      	cbz	r3, 80027c6 <_write_r+0x1e>
 80027c4:	6023      	str	r3, [r4, #0]
 80027c6:	bd38      	pop	{r3, r4, r5, pc}
 80027c8:	20000600 	.word	0x20000600

080027cc <__errno>:
 80027cc:	4b01      	ldr	r3, [pc, #4]	@ (80027d4 <__errno+0x8>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000218 	.word	0x20000218

080027d8 <__libc_init_array>:
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	2600      	movs	r6, #0
 80027dc:	4d0c      	ldr	r5, [pc, #48]	@ (8002810 <__libc_init_array+0x38>)
 80027de:	4c0d      	ldr	r4, [pc, #52]	@ (8002814 <__libc_init_array+0x3c>)
 80027e0:	1b64      	subs	r4, r4, r5
 80027e2:	10a4      	asrs	r4, r4, #2
 80027e4:	42a6      	cmp	r6, r4
 80027e6:	d109      	bne.n	80027fc <__libc_init_array+0x24>
 80027e8:	f000 fe44 	bl	8003474 <_init>
 80027ec:	2600      	movs	r6, #0
 80027ee:	4d0a      	ldr	r5, [pc, #40]	@ (8002818 <__libc_init_array+0x40>)
 80027f0:	4c0a      	ldr	r4, [pc, #40]	@ (800281c <__libc_init_array+0x44>)
 80027f2:	1b64      	subs	r4, r4, r5
 80027f4:	10a4      	asrs	r4, r4, #2
 80027f6:	42a6      	cmp	r6, r4
 80027f8:	d105      	bne.n	8002806 <__libc_init_array+0x2e>
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
 80027fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002800:	4798      	blx	r3
 8002802:	3601      	adds	r6, #1
 8002804:	e7ee      	b.n	80027e4 <__libc_init_array+0xc>
 8002806:	f855 3b04 	ldr.w	r3, [r5], #4
 800280a:	4798      	blx	r3
 800280c:	3601      	adds	r6, #1
 800280e:	e7f2      	b.n	80027f6 <__libc_init_array+0x1e>
 8002810:	08003594 	.word	0x08003594
 8002814:	08003594 	.word	0x08003594
 8002818:	08003594 	.word	0x08003594
 800281c:	08003598 	.word	0x08003598

08002820 <__retarget_lock_init_recursive>:
 8002820:	4770      	bx	lr

08002822 <__retarget_lock_acquire_recursive>:
 8002822:	4770      	bx	lr

08002824 <__retarget_lock_release_recursive>:
 8002824:	4770      	bx	lr
	...

08002828 <__assert_func>:
 8002828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800282a:	4614      	mov	r4, r2
 800282c:	461a      	mov	r2, r3
 800282e:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <__assert_func+0x2c>)
 8002830:	4605      	mov	r5, r0
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68d8      	ldr	r0, [r3, #12]
 8002836:	b14c      	cbz	r4, 800284c <__assert_func+0x24>
 8002838:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <__assert_func+0x30>)
 800283a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800283e:	9100      	str	r1, [sp, #0]
 8002840:	462b      	mov	r3, r5
 8002842:	4906      	ldr	r1, [pc, #24]	@ (800285c <__assert_func+0x34>)
 8002844:	f000 f9b4 	bl	8002bb0 <fiprintf>
 8002848:	f000 f9d4 	bl	8002bf4 <abort>
 800284c:	4b04      	ldr	r3, [pc, #16]	@ (8002860 <__assert_func+0x38>)
 800284e:	461c      	mov	r4, r3
 8002850:	e7f3      	b.n	800283a <__assert_func+0x12>
 8002852:	bf00      	nop
 8002854:	20000218 	.word	0x20000218
 8002858:	08003525 	.word	0x08003525
 800285c:	08003532 	.word	0x08003532
 8002860:	08003560 	.word	0x08003560

08002864 <_free_r>:
 8002864:	b538      	push	{r3, r4, r5, lr}
 8002866:	4605      	mov	r5, r0
 8002868:	2900      	cmp	r1, #0
 800286a:	d040      	beq.n	80028ee <_free_r+0x8a>
 800286c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002870:	1f0c      	subs	r4, r1, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	bfb8      	it	lt
 8002876:	18e4      	addlt	r4, r4, r3
 8002878:	f000 f8e6 	bl	8002a48 <__malloc_lock>
 800287c:	4a1c      	ldr	r2, [pc, #112]	@ (80028f0 <_free_r+0x8c>)
 800287e:	6813      	ldr	r3, [r2, #0]
 8002880:	b933      	cbnz	r3, 8002890 <_free_r+0x2c>
 8002882:	6063      	str	r3, [r4, #4]
 8002884:	6014      	str	r4, [r2, #0]
 8002886:	4628      	mov	r0, r5
 8002888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800288c:	f000 b8e2 	b.w	8002a54 <__malloc_unlock>
 8002890:	42a3      	cmp	r3, r4
 8002892:	d908      	bls.n	80028a6 <_free_r+0x42>
 8002894:	6820      	ldr	r0, [r4, #0]
 8002896:	1821      	adds	r1, r4, r0
 8002898:	428b      	cmp	r3, r1
 800289a:	bf01      	itttt	eq
 800289c:	6819      	ldreq	r1, [r3, #0]
 800289e:	685b      	ldreq	r3, [r3, #4]
 80028a0:	1809      	addeq	r1, r1, r0
 80028a2:	6021      	streq	r1, [r4, #0]
 80028a4:	e7ed      	b.n	8002882 <_free_r+0x1e>
 80028a6:	461a      	mov	r2, r3
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	b10b      	cbz	r3, 80028b0 <_free_r+0x4c>
 80028ac:	42a3      	cmp	r3, r4
 80028ae:	d9fa      	bls.n	80028a6 <_free_r+0x42>
 80028b0:	6811      	ldr	r1, [r2, #0]
 80028b2:	1850      	adds	r0, r2, r1
 80028b4:	42a0      	cmp	r0, r4
 80028b6:	d10b      	bne.n	80028d0 <_free_r+0x6c>
 80028b8:	6820      	ldr	r0, [r4, #0]
 80028ba:	4401      	add	r1, r0
 80028bc:	1850      	adds	r0, r2, r1
 80028be:	4283      	cmp	r3, r0
 80028c0:	6011      	str	r1, [r2, #0]
 80028c2:	d1e0      	bne.n	8002886 <_free_r+0x22>
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4408      	add	r0, r1
 80028ca:	6010      	str	r0, [r2, #0]
 80028cc:	6053      	str	r3, [r2, #4]
 80028ce:	e7da      	b.n	8002886 <_free_r+0x22>
 80028d0:	d902      	bls.n	80028d8 <_free_r+0x74>
 80028d2:	230c      	movs	r3, #12
 80028d4:	602b      	str	r3, [r5, #0]
 80028d6:	e7d6      	b.n	8002886 <_free_r+0x22>
 80028d8:	6820      	ldr	r0, [r4, #0]
 80028da:	1821      	adds	r1, r4, r0
 80028dc:	428b      	cmp	r3, r1
 80028de:	bf01      	itttt	eq
 80028e0:	6819      	ldreq	r1, [r3, #0]
 80028e2:	685b      	ldreq	r3, [r3, #4]
 80028e4:	1809      	addeq	r1, r1, r0
 80028e6:	6021      	streq	r1, [r4, #0]
 80028e8:	6063      	str	r3, [r4, #4]
 80028ea:	6054      	str	r4, [r2, #4]
 80028ec:	e7cb      	b.n	8002886 <_free_r+0x22>
 80028ee:	bd38      	pop	{r3, r4, r5, pc}
 80028f0:	2000060c 	.word	0x2000060c

080028f4 <malloc>:
 80028f4:	4b02      	ldr	r3, [pc, #8]	@ (8002900 <malloc+0xc>)
 80028f6:	4601      	mov	r1, r0
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	f000 b825 	b.w	8002948 <_malloc_r>
 80028fe:	bf00      	nop
 8002900:	20000218 	.word	0x20000218

08002904 <sbrk_aligned>:
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	4e0f      	ldr	r6, [pc, #60]	@ (8002944 <sbrk_aligned+0x40>)
 8002908:	460c      	mov	r4, r1
 800290a:	6831      	ldr	r1, [r6, #0]
 800290c:	4605      	mov	r5, r0
 800290e:	b911      	cbnz	r1, 8002916 <sbrk_aligned+0x12>
 8002910:	f000 f960 	bl	8002bd4 <_sbrk_r>
 8002914:	6030      	str	r0, [r6, #0]
 8002916:	4621      	mov	r1, r4
 8002918:	4628      	mov	r0, r5
 800291a:	f000 f95b 	bl	8002bd4 <_sbrk_r>
 800291e:	1c43      	adds	r3, r0, #1
 8002920:	d103      	bne.n	800292a <sbrk_aligned+0x26>
 8002922:	f04f 34ff 	mov.w	r4, #4294967295
 8002926:	4620      	mov	r0, r4
 8002928:	bd70      	pop	{r4, r5, r6, pc}
 800292a:	1cc4      	adds	r4, r0, #3
 800292c:	f024 0403 	bic.w	r4, r4, #3
 8002930:	42a0      	cmp	r0, r4
 8002932:	d0f8      	beq.n	8002926 <sbrk_aligned+0x22>
 8002934:	1a21      	subs	r1, r4, r0
 8002936:	4628      	mov	r0, r5
 8002938:	f000 f94c 	bl	8002bd4 <_sbrk_r>
 800293c:	3001      	adds	r0, #1
 800293e:	d1f2      	bne.n	8002926 <sbrk_aligned+0x22>
 8002940:	e7ef      	b.n	8002922 <sbrk_aligned+0x1e>
 8002942:	bf00      	nop
 8002944:	20000608 	.word	0x20000608

08002948 <_malloc_r>:
 8002948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800294c:	1ccd      	adds	r5, r1, #3
 800294e:	f025 0503 	bic.w	r5, r5, #3
 8002952:	3508      	adds	r5, #8
 8002954:	2d0c      	cmp	r5, #12
 8002956:	bf38      	it	cc
 8002958:	250c      	movcc	r5, #12
 800295a:	2d00      	cmp	r5, #0
 800295c:	4606      	mov	r6, r0
 800295e:	db01      	blt.n	8002964 <_malloc_r+0x1c>
 8002960:	42a9      	cmp	r1, r5
 8002962:	d904      	bls.n	800296e <_malloc_r+0x26>
 8002964:	230c      	movs	r3, #12
 8002966:	6033      	str	r3, [r6, #0]
 8002968:	2000      	movs	r0, #0
 800296a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800296e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a44 <_malloc_r+0xfc>
 8002972:	f000 f869 	bl	8002a48 <__malloc_lock>
 8002976:	f8d8 3000 	ldr.w	r3, [r8]
 800297a:	461c      	mov	r4, r3
 800297c:	bb44      	cbnz	r4, 80029d0 <_malloc_r+0x88>
 800297e:	4629      	mov	r1, r5
 8002980:	4630      	mov	r0, r6
 8002982:	f7ff ffbf 	bl	8002904 <sbrk_aligned>
 8002986:	1c43      	adds	r3, r0, #1
 8002988:	4604      	mov	r4, r0
 800298a:	d158      	bne.n	8002a3e <_malloc_r+0xf6>
 800298c:	f8d8 4000 	ldr.w	r4, [r8]
 8002990:	4627      	mov	r7, r4
 8002992:	2f00      	cmp	r7, #0
 8002994:	d143      	bne.n	8002a1e <_malloc_r+0xd6>
 8002996:	2c00      	cmp	r4, #0
 8002998:	d04b      	beq.n	8002a32 <_malloc_r+0xea>
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	4639      	mov	r1, r7
 800299e:	4630      	mov	r0, r6
 80029a0:	eb04 0903 	add.w	r9, r4, r3
 80029a4:	f000 f916 	bl	8002bd4 <_sbrk_r>
 80029a8:	4581      	cmp	r9, r0
 80029aa:	d142      	bne.n	8002a32 <_malloc_r+0xea>
 80029ac:	6821      	ldr	r1, [r4, #0]
 80029ae:	4630      	mov	r0, r6
 80029b0:	1a6d      	subs	r5, r5, r1
 80029b2:	4629      	mov	r1, r5
 80029b4:	f7ff ffa6 	bl	8002904 <sbrk_aligned>
 80029b8:	3001      	adds	r0, #1
 80029ba:	d03a      	beq.n	8002a32 <_malloc_r+0xea>
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	442b      	add	r3, r5
 80029c0:	6023      	str	r3, [r4, #0]
 80029c2:	f8d8 3000 	ldr.w	r3, [r8]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	bb62      	cbnz	r2, 8002a24 <_malloc_r+0xdc>
 80029ca:	f8c8 7000 	str.w	r7, [r8]
 80029ce:	e00f      	b.n	80029f0 <_malloc_r+0xa8>
 80029d0:	6822      	ldr	r2, [r4, #0]
 80029d2:	1b52      	subs	r2, r2, r5
 80029d4:	d420      	bmi.n	8002a18 <_malloc_r+0xd0>
 80029d6:	2a0b      	cmp	r2, #11
 80029d8:	d917      	bls.n	8002a0a <_malloc_r+0xc2>
 80029da:	1961      	adds	r1, r4, r5
 80029dc:	42a3      	cmp	r3, r4
 80029de:	6025      	str	r5, [r4, #0]
 80029e0:	bf18      	it	ne
 80029e2:	6059      	strne	r1, [r3, #4]
 80029e4:	6863      	ldr	r3, [r4, #4]
 80029e6:	bf08      	it	eq
 80029e8:	f8c8 1000 	streq.w	r1, [r8]
 80029ec:	5162      	str	r2, [r4, r5]
 80029ee:	604b      	str	r3, [r1, #4]
 80029f0:	4630      	mov	r0, r6
 80029f2:	f000 f82f 	bl	8002a54 <__malloc_unlock>
 80029f6:	f104 000b 	add.w	r0, r4, #11
 80029fa:	1d23      	adds	r3, r4, #4
 80029fc:	f020 0007 	bic.w	r0, r0, #7
 8002a00:	1ac2      	subs	r2, r0, r3
 8002a02:	bf1c      	itt	ne
 8002a04:	1a1b      	subne	r3, r3, r0
 8002a06:	50a3      	strne	r3, [r4, r2]
 8002a08:	e7af      	b.n	800296a <_malloc_r+0x22>
 8002a0a:	6862      	ldr	r2, [r4, #4]
 8002a0c:	42a3      	cmp	r3, r4
 8002a0e:	bf0c      	ite	eq
 8002a10:	f8c8 2000 	streq.w	r2, [r8]
 8002a14:	605a      	strne	r2, [r3, #4]
 8002a16:	e7eb      	b.n	80029f0 <_malloc_r+0xa8>
 8002a18:	4623      	mov	r3, r4
 8002a1a:	6864      	ldr	r4, [r4, #4]
 8002a1c:	e7ae      	b.n	800297c <_malloc_r+0x34>
 8002a1e:	463c      	mov	r4, r7
 8002a20:	687f      	ldr	r7, [r7, #4]
 8002a22:	e7b6      	b.n	8002992 <_malloc_r+0x4a>
 8002a24:	461a      	mov	r2, r3
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	42a3      	cmp	r3, r4
 8002a2a:	d1fb      	bne.n	8002a24 <_malloc_r+0xdc>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6053      	str	r3, [r2, #4]
 8002a30:	e7de      	b.n	80029f0 <_malloc_r+0xa8>
 8002a32:	230c      	movs	r3, #12
 8002a34:	4630      	mov	r0, r6
 8002a36:	6033      	str	r3, [r6, #0]
 8002a38:	f000 f80c 	bl	8002a54 <__malloc_unlock>
 8002a3c:	e794      	b.n	8002968 <_malloc_r+0x20>
 8002a3e:	6005      	str	r5, [r0, #0]
 8002a40:	e7d6      	b.n	80029f0 <_malloc_r+0xa8>
 8002a42:	bf00      	nop
 8002a44:	2000060c 	.word	0x2000060c

08002a48 <__malloc_lock>:
 8002a48:	4801      	ldr	r0, [pc, #4]	@ (8002a50 <__malloc_lock+0x8>)
 8002a4a:	f7ff beea 	b.w	8002822 <__retarget_lock_acquire_recursive>
 8002a4e:	bf00      	nop
 8002a50:	20000604 	.word	0x20000604

08002a54 <__malloc_unlock>:
 8002a54:	4801      	ldr	r0, [pc, #4]	@ (8002a5c <__malloc_unlock+0x8>)
 8002a56:	f7ff bee5 	b.w	8002824 <__retarget_lock_release_recursive>
 8002a5a:	bf00      	nop
 8002a5c:	20000604 	.word	0x20000604

08002a60 <__sflush_r>:
 8002a60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	0716      	lsls	r6, r2, #28
 8002a68:	4605      	mov	r5, r0
 8002a6a:	460c      	mov	r4, r1
 8002a6c:	d454      	bmi.n	8002b18 <__sflush_r+0xb8>
 8002a6e:	684b      	ldr	r3, [r1, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	dc02      	bgt.n	8002a7a <__sflush_r+0x1a>
 8002a74:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	dd48      	ble.n	8002b0c <__sflush_r+0xac>
 8002a7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a7c:	2e00      	cmp	r6, #0
 8002a7e:	d045      	beq.n	8002b0c <__sflush_r+0xac>
 8002a80:	2300      	movs	r3, #0
 8002a82:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002a86:	682f      	ldr	r7, [r5, #0]
 8002a88:	6a21      	ldr	r1, [r4, #32]
 8002a8a:	602b      	str	r3, [r5, #0]
 8002a8c:	d030      	beq.n	8002af0 <__sflush_r+0x90>
 8002a8e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a90:	89a3      	ldrh	r3, [r4, #12]
 8002a92:	0759      	lsls	r1, r3, #29
 8002a94:	d505      	bpl.n	8002aa2 <__sflush_r+0x42>
 8002a96:	6863      	ldr	r3, [r4, #4]
 8002a98:	1ad2      	subs	r2, r2, r3
 8002a9a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a9c:	b10b      	cbz	r3, 8002aa2 <__sflush_r+0x42>
 8002a9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002aa0:	1ad2      	subs	r2, r2, r3
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002aa8:	6a21      	ldr	r1, [r4, #32]
 8002aaa:	47b0      	blx	r6
 8002aac:	1c43      	adds	r3, r0, #1
 8002aae:	89a3      	ldrh	r3, [r4, #12]
 8002ab0:	d106      	bne.n	8002ac0 <__sflush_r+0x60>
 8002ab2:	6829      	ldr	r1, [r5, #0]
 8002ab4:	291d      	cmp	r1, #29
 8002ab6:	d82b      	bhi.n	8002b10 <__sflush_r+0xb0>
 8002ab8:	4a28      	ldr	r2, [pc, #160]	@ (8002b5c <__sflush_r+0xfc>)
 8002aba:	40ca      	lsrs	r2, r1
 8002abc:	07d6      	lsls	r6, r2, #31
 8002abe:	d527      	bpl.n	8002b10 <__sflush_r+0xb0>
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6062      	str	r2, [r4, #4]
 8002ac4:	6922      	ldr	r2, [r4, #16]
 8002ac6:	04d9      	lsls	r1, r3, #19
 8002ac8:	6022      	str	r2, [r4, #0]
 8002aca:	d504      	bpl.n	8002ad6 <__sflush_r+0x76>
 8002acc:	1c42      	adds	r2, r0, #1
 8002ace:	d101      	bne.n	8002ad4 <__sflush_r+0x74>
 8002ad0:	682b      	ldr	r3, [r5, #0]
 8002ad2:	b903      	cbnz	r3, 8002ad6 <__sflush_r+0x76>
 8002ad4:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ad6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ad8:	602f      	str	r7, [r5, #0]
 8002ada:	b1b9      	cbz	r1, 8002b0c <__sflush_r+0xac>
 8002adc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ae0:	4299      	cmp	r1, r3
 8002ae2:	d002      	beq.n	8002aea <__sflush_r+0x8a>
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	f7ff febd 	bl	8002864 <_free_r>
 8002aea:	2300      	movs	r3, #0
 8002aec:	6363      	str	r3, [r4, #52]	@ 0x34
 8002aee:	e00d      	b.n	8002b0c <__sflush_r+0xac>
 8002af0:	2301      	movs	r3, #1
 8002af2:	4628      	mov	r0, r5
 8002af4:	47b0      	blx	r6
 8002af6:	4602      	mov	r2, r0
 8002af8:	1c50      	adds	r0, r2, #1
 8002afa:	d1c9      	bne.n	8002a90 <__sflush_r+0x30>
 8002afc:	682b      	ldr	r3, [r5, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0c6      	beq.n	8002a90 <__sflush_r+0x30>
 8002b02:	2b1d      	cmp	r3, #29
 8002b04:	d001      	beq.n	8002b0a <__sflush_r+0xaa>
 8002b06:	2b16      	cmp	r3, #22
 8002b08:	d11d      	bne.n	8002b46 <__sflush_r+0xe6>
 8002b0a:	602f      	str	r7, [r5, #0]
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	e021      	b.n	8002b54 <__sflush_r+0xf4>
 8002b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b14:	b21b      	sxth	r3, r3
 8002b16:	e01a      	b.n	8002b4e <__sflush_r+0xee>
 8002b18:	690f      	ldr	r7, [r1, #16]
 8002b1a:	2f00      	cmp	r7, #0
 8002b1c:	d0f6      	beq.n	8002b0c <__sflush_r+0xac>
 8002b1e:	0793      	lsls	r3, r2, #30
 8002b20:	bf18      	it	ne
 8002b22:	2300      	movne	r3, #0
 8002b24:	680e      	ldr	r6, [r1, #0]
 8002b26:	bf08      	it	eq
 8002b28:	694b      	ldreq	r3, [r1, #20]
 8002b2a:	1bf6      	subs	r6, r6, r7
 8002b2c:	600f      	str	r7, [r1, #0]
 8002b2e:	608b      	str	r3, [r1, #8]
 8002b30:	2e00      	cmp	r6, #0
 8002b32:	ddeb      	ble.n	8002b0c <__sflush_r+0xac>
 8002b34:	4633      	mov	r3, r6
 8002b36:	463a      	mov	r2, r7
 8002b38:	4628      	mov	r0, r5
 8002b3a:	6a21      	ldr	r1, [r4, #32]
 8002b3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002b40:	47e0      	blx	ip
 8002b42:	2800      	cmp	r0, #0
 8002b44:	dc07      	bgt.n	8002b56 <__sflush_r+0xf6>
 8002b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b52:	81a3      	strh	r3, [r4, #12]
 8002b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b56:	4407      	add	r7, r0
 8002b58:	1a36      	subs	r6, r6, r0
 8002b5a:	e7e9      	b.n	8002b30 <__sflush_r+0xd0>
 8002b5c:	20400001 	.word	0x20400001

08002b60 <_fflush_r>:
 8002b60:	b538      	push	{r3, r4, r5, lr}
 8002b62:	690b      	ldr	r3, [r1, #16]
 8002b64:	4605      	mov	r5, r0
 8002b66:	460c      	mov	r4, r1
 8002b68:	b913      	cbnz	r3, 8002b70 <_fflush_r+0x10>
 8002b6a:	2500      	movs	r5, #0
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	bd38      	pop	{r3, r4, r5, pc}
 8002b70:	b118      	cbz	r0, 8002b7a <_fflush_r+0x1a>
 8002b72:	6a03      	ldr	r3, [r0, #32]
 8002b74:	b90b      	cbnz	r3, 8002b7a <_fflush_r+0x1a>
 8002b76:	f7ff fd61 	bl	800263c <__sinit>
 8002b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f3      	beq.n	8002b6a <_fflush_r+0xa>
 8002b82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b84:	07d0      	lsls	r0, r2, #31
 8002b86:	d404      	bmi.n	8002b92 <_fflush_r+0x32>
 8002b88:	0599      	lsls	r1, r3, #22
 8002b8a:	d402      	bmi.n	8002b92 <_fflush_r+0x32>
 8002b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b8e:	f7ff fe48 	bl	8002822 <__retarget_lock_acquire_recursive>
 8002b92:	4628      	mov	r0, r5
 8002b94:	4621      	mov	r1, r4
 8002b96:	f7ff ff63 	bl	8002a60 <__sflush_r>
 8002b9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b9c:	4605      	mov	r5, r0
 8002b9e:	07da      	lsls	r2, r3, #31
 8002ba0:	d4e4      	bmi.n	8002b6c <_fflush_r+0xc>
 8002ba2:	89a3      	ldrh	r3, [r4, #12]
 8002ba4:	059b      	lsls	r3, r3, #22
 8002ba6:	d4e1      	bmi.n	8002b6c <_fflush_r+0xc>
 8002ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002baa:	f7ff fe3b 	bl	8002824 <__retarget_lock_release_recursive>
 8002bae:	e7dd      	b.n	8002b6c <_fflush_r+0xc>

08002bb0 <fiprintf>:
 8002bb0:	b40e      	push	{r1, r2, r3}
 8002bb2:	b503      	push	{r0, r1, lr}
 8002bb4:	4601      	mov	r1, r0
 8002bb6:	ab03      	add	r3, sp, #12
 8002bb8:	4805      	ldr	r0, [pc, #20]	@ (8002bd0 <fiprintf+0x20>)
 8002bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bbe:	6800      	ldr	r0, [r0, #0]
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	f000 f845 	bl	8002c50 <_vfiprintf_r>
 8002bc6:	b002      	add	sp, #8
 8002bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bcc:	b003      	add	sp, #12
 8002bce:	4770      	bx	lr
 8002bd0:	20000218 	.word	0x20000218

08002bd4 <_sbrk_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	4d05      	ldr	r5, [pc, #20]	@ (8002bf0 <_sbrk_r+0x1c>)
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4608      	mov	r0, r1
 8002bde:	602b      	str	r3, [r5, #0]
 8002be0:	f7fe f85a 	bl	8000c98 <_sbrk>
 8002be4:	1c43      	adds	r3, r0, #1
 8002be6:	d102      	bne.n	8002bee <_sbrk_r+0x1a>
 8002be8:	682b      	ldr	r3, [r5, #0]
 8002bea:	b103      	cbz	r3, 8002bee <_sbrk_r+0x1a>
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	bd38      	pop	{r3, r4, r5, pc}
 8002bf0:	20000600 	.word	0x20000600

08002bf4 <abort>:
 8002bf4:	2006      	movs	r0, #6
 8002bf6:	b508      	push	{r3, lr}
 8002bf8:	f000 fb8e 	bl	8003318 <raise>
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	f7fd ffd6 	bl	8000bae <_exit>

08002c02 <__sfputc_r>:
 8002c02:	6893      	ldr	r3, [r2, #8]
 8002c04:	b410      	push	{r4}
 8002c06:	3b01      	subs	r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	6093      	str	r3, [r2, #8]
 8002c0c:	da07      	bge.n	8002c1e <__sfputc_r+0x1c>
 8002c0e:	6994      	ldr	r4, [r2, #24]
 8002c10:	42a3      	cmp	r3, r4
 8002c12:	db01      	blt.n	8002c18 <__sfputc_r+0x16>
 8002c14:	290a      	cmp	r1, #10
 8002c16:	d102      	bne.n	8002c1e <__sfputc_r+0x1c>
 8002c18:	bc10      	pop	{r4}
 8002c1a:	f000 bac1 	b.w	80031a0 <__swbuf_r>
 8002c1e:	6813      	ldr	r3, [r2, #0]
 8002c20:	1c58      	adds	r0, r3, #1
 8002c22:	6010      	str	r0, [r2, #0]
 8002c24:	7019      	strb	r1, [r3, #0]
 8002c26:	4608      	mov	r0, r1
 8002c28:	bc10      	pop	{r4}
 8002c2a:	4770      	bx	lr

08002c2c <__sfputs_r>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	4606      	mov	r6, r0
 8002c30:	460f      	mov	r7, r1
 8002c32:	4614      	mov	r4, r2
 8002c34:	18d5      	adds	r5, r2, r3
 8002c36:	42ac      	cmp	r4, r5
 8002c38:	d101      	bne.n	8002c3e <__sfputs_r+0x12>
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	e007      	b.n	8002c4e <__sfputs_r+0x22>
 8002c3e:	463a      	mov	r2, r7
 8002c40:	4630      	mov	r0, r6
 8002c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c46:	f7ff ffdc 	bl	8002c02 <__sfputc_r>
 8002c4a:	1c43      	adds	r3, r0, #1
 8002c4c:	d1f3      	bne.n	8002c36 <__sfputs_r+0xa>
 8002c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c50 <_vfiprintf_r>:
 8002c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c54:	460d      	mov	r5, r1
 8002c56:	4614      	mov	r4, r2
 8002c58:	4698      	mov	r8, r3
 8002c5a:	4606      	mov	r6, r0
 8002c5c:	b09d      	sub	sp, #116	@ 0x74
 8002c5e:	b118      	cbz	r0, 8002c68 <_vfiprintf_r+0x18>
 8002c60:	6a03      	ldr	r3, [r0, #32]
 8002c62:	b90b      	cbnz	r3, 8002c68 <_vfiprintf_r+0x18>
 8002c64:	f7ff fcea 	bl	800263c <__sinit>
 8002c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c6a:	07d9      	lsls	r1, r3, #31
 8002c6c:	d405      	bmi.n	8002c7a <_vfiprintf_r+0x2a>
 8002c6e:	89ab      	ldrh	r3, [r5, #12]
 8002c70:	059a      	lsls	r2, r3, #22
 8002c72:	d402      	bmi.n	8002c7a <_vfiprintf_r+0x2a>
 8002c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c76:	f7ff fdd4 	bl	8002822 <__retarget_lock_acquire_recursive>
 8002c7a:	89ab      	ldrh	r3, [r5, #12]
 8002c7c:	071b      	lsls	r3, r3, #28
 8002c7e:	d501      	bpl.n	8002c84 <_vfiprintf_r+0x34>
 8002c80:	692b      	ldr	r3, [r5, #16]
 8002c82:	b99b      	cbnz	r3, 8002cac <_vfiprintf_r+0x5c>
 8002c84:	4629      	mov	r1, r5
 8002c86:	4630      	mov	r0, r6
 8002c88:	f000 fac8 	bl	800321c <__swsetup_r>
 8002c8c:	b170      	cbz	r0, 8002cac <_vfiprintf_r+0x5c>
 8002c8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c90:	07dc      	lsls	r4, r3, #31
 8002c92:	d504      	bpl.n	8002c9e <_vfiprintf_r+0x4e>
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	b01d      	add	sp, #116	@ 0x74
 8002c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c9e:	89ab      	ldrh	r3, [r5, #12]
 8002ca0:	0598      	lsls	r0, r3, #22
 8002ca2:	d4f7      	bmi.n	8002c94 <_vfiprintf_r+0x44>
 8002ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ca6:	f7ff fdbd 	bl	8002824 <__retarget_lock_release_recursive>
 8002caa:	e7f3      	b.n	8002c94 <_vfiprintf_r+0x44>
 8002cac:	2300      	movs	r3, #0
 8002cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002cb6:	2330      	movs	r3, #48	@ 0x30
 8002cb8:	f04f 0901 	mov.w	r9, #1
 8002cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cc0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002e6c <_vfiprintf_r+0x21c>
 8002cc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002cc8:	4623      	mov	r3, r4
 8002cca:	469a      	mov	sl, r3
 8002ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cd0:	b10a      	cbz	r2, 8002cd6 <_vfiprintf_r+0x86>
 8002cd2:	2a25      	cmp	r2, #37	@ 0x25
 8002cd4:	d1f9      	bne.n	8002cca <_vfiprintf_r+0x7a>
 8002cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8002cda:	d00b      	beq.n	8002cf4 <_vfiprintf_r+0xa4>
 8002cdc:	465b      	mov	r3, fp
 8002cde:	4622      	mov	r2, r4
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	f7ff ffa2 	bl	8002c2c <__sfputs_r>
 8002ce8:	3001      	adds	r0, #1
 8002cea:	f000 80a7 	beq.w	8002e3c <_vfiprintf_r+0x1ec>
 8002cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cf0:	445a      	add	r2, fp
 8002cf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 809f 	beq.w	8002e3c <_vfiprintf_r+0x1ec>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295
 8002d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d08:	f10a 0a01 	add.w	sl, sl, #1
 8002d0c:	9304      	str	r3, [sp, #16]
 8002d0e:	9307      	str	r3, [sp, #28]
 8002d10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d16:	4654      	mov	r4, sl
 8002d18:	2205      	movs	r2, #5
 8002d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d1e:	4853      	ldr	r0, [pc, #332]	@ (8002e6c <_vfiprintf_r+0x21c>)
 8002d20:	f000 fb16 	bl	8003350 <memchr>
 8002d24:	9a04      	ldr	r2, [sp, #16]
 8002d26:	b9d8      	cbnz	r0, 8002d60 <_vfiprintf_r+0x110>
 8002d28:	06d1      	lsls	r1, r2, #27
 8002d2a:	bf44      	itt	mi
 8002d2c:	2320      	movmi	r3, #32
 8002d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d32:	0713      	lsls	r3, r2, #28
 8002d34:	bf44      	itt	mi
 8002d36:	232b      	movmi	r3, #43	@ 0x2b
 8002d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d42:	d015      	beq.n	8002d70 <_vfiprintf_r+0x120>
 8002d44:	4654      	mov	r4, sl
 8002d46:	2000      	movs	r0, #0
 8002d48:	f04f 0c0a 	mov.w	ip, #10
 8002d4c:	9a07      	ldr	r2, [sp, #28]
 8002d4e:	4621      	mov	r1, r4
 8002d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d54:	3b30      	subs	r3, #48	@ 0x30
 8002d56:	2b09      	cmp	r3, #9
 8002d58:	d94b      	bls.n	8002df2 <_vfiprintf_r+0x1a2>
 8002d5a:	b1b0      	cbz	r0, 8002d8a <_vfiprintf_r+0x13a>
 8002d5c:	9207      	str	r2, [sp, #28]
 8002d5e:	e014      	b.n	8002d8a <_vfiprintf_r+0x13a>
 8002d60:	eba0 0308 	sub.w	r3, r0, r8
 8002d64:	fa09 f303 	lsl.w	r3, r9, r3
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	46a2      	mov	sl, r4
 8002d6c:	9304      	str	r3, [sp, #16]
 8002d6e:	e7d2      	b.n	8002d16 <_vfiprintf_r+0xc6>
 8002d70:	9b03      	ldr	r3, [sp, #12]
 8002d72:	1d19      	adds	r1, r3, #4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	9103      	str	r1, [sp, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bfbb      	ittet	lt
 8002d7c:	425b      	neglt	r3, r3
 8002d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8002d82:	9307      	strge	r3, [sp, #28]
 8002d84:	9307      	strlt	r3, [sp, #28]
 8002d86:	bfb8      	it	lt
 8002d88:	9204      	strlt	r2, [sp, #16]
 8002d8a:	7823      	ldrb	r3, [r4, #0]
 8002d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d8e:	d10a      	bne.n	8002da6 <_vfiprintf_r+0x156>
 8002d90:	7863      	ldrb	r3, [r4, #1]
 8002d92:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d94:	d132      	bne.n	8002dfc <_vfiprintf_r+0x1ac>
 8002d96:	9b03      	ldr	r3, [sp, #12]
 8002d98:	3402      	adds	r4, #2
 8002d9a:	1d1a      	adds	r2, r3, #4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	9203      	str	r2, [sp, #12]
 8002da0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002da4:	9305      	str	r3, [sp, #20]
 8002da6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002e70 <_vfiprintf_r+0x220>
 8002daa:	2203      	movs	r2, #3
 8002dac:	4650      	mov	r0, sl
 8002dae:	7821      	ldrb	r1, [r4, #0]
 8002db0:	f000 face 	bl	8003350 <memchr>
 8002db4:	b138      	cbz	r0, 8002dc6 <_vfiprintf_r+0x176>
 8002db6:	2240      	movs	r2, #64	@ 0x40
 8002db8:	9b04      	ldr	r3, [sp, #16]
 8002dba:	eba0 000a 	sub.w	r0, r0, sl
 8002dbe:	4082      	lsls	r2, r0
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	3401      	adds	r4, #1
 8002dc4:	9304      	str	r3, [sp, #16]
 8002dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dca:	2206      	movs	r2, #6
 8002dcc:	4829      	ldr	r0, [pc, #164]	@ (8002e74 <_vfiprintf_r+0x224>)
 8002dce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002dd2:	f000 fabd 	bl	8003350 <memchr>
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	d03f      	beq.n	8002e5a <_vfiprintf_r+0x20a>
 8002dda:	4b27      	ldr	r3, [pc, #156]	@ (8002e78 <_vfiprintf_r+0x228>)
 8002ddc:	bb1b      	cbnz	r3, 8002e26 <_vfiprintf_r+0x1d6>
 8002dde:	9b03      	ldr	r3, [sp, #12]
 8002de0:	3307      	adds	r3, #7
 8002de2:	f023 0307 	bic.w	r3, r3, #7
 8002de6:	3308      	adds	r3, #8
 8002de8:	9303      	str	r3, [sp, #12]
 8002dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dec:	443b      	add	r3, r7
 8002dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8002df0:	e76a      	b.n	8002cc8 <_vfiprintf_r+0x78>
 8002df2:	460c      	mov	r4, r1
 8002df4:	2001      	movs	r0, #1
 8002df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dfa:	e7a8      	b.n	8002d4e <_vfiprintf_r+0xfe>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f04f 0c0a 	mov.w	ip, #10
 8002e02:	4619      	mov	r1, r3
 8002e04:	3401      	adds	r4, #1
 8002e06:	9305      	str	r3, [sp, #20]
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e0e:	3a30      	subs	r2, #48	@ 0x30
 8002e10:	2a09      	cmp	r2, #9
 8002e12:	d903      	bls.n	8002e1c <_vfiprintf_r+0x1cc>
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0c6      	beq.n	8002da6 <_vfiprintf_r+0x156>
 8002e18:	9105      	str	r1, [sp, #20]
 8002e1a:	e7c4      	b.n	8002da6 <_vfiprintf_r+0x156>
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	2301      	movs	r3, #1
 8002e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e24:	e7f0      	b.n	8002e08 <_vfiprintf_r+0x1b8>
 8002e26:	ab03      	add	r3, sp, #12
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	462a      	mov	r2, r5
 8002e2c:	4630      	mov	r0, r6
 8002e2e:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <_vfiprintf_r+0x22c>)
 8002e30:	a904      	add	r1, sp, #16
 8002e32:	f3af 8000 	nop.w
 8002e36:	4607      	mov	r7, r0
 8002e38:	1c78      	adds	r0, r7, #1
 8002e3a:	d1d6      	bne.n	8002dea <_vfiprintf_r+0x19a>
 8002e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e3e:	07d9      	lsls	r1, r3, #31
 8002e40:	d405      	bmi.n	8002e4e <_vfiprintf_r+0x1fe>
 8002e42:	89ab      	ldrh	r3, [r5, #12]
 8002e44:	059a      	lsls	r2, r3, #22
 8002e46:	d402      	bmi.n	8002e4e <_vfiprintf_r+0x1fe>
 8002e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e4a:	f7ff fceb 	bl	8002824 <__retarget_lock_release_recursive>
 8002e4e:	89ab      	ldrh	r3, [r5, #12]
 8002e50:	065b      	lsls	r3, r3, #25
 8002e52:	f53f af1f 	bmi.w	8002c94 <_vfiprintf_r+0x44>
 8002e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e58:	e71e      	b.n	8002c98 <_vfiprintf_r+0x48>
 8002e5a:	ab03      	add	r3, sp, #12
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	462a      	mov	r2, r5
 8002e60:	4630      	mov	r0, r6
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <_vfiprintf_r+0x22c>)
 8002e64:	a904      	add	r1, sp, #16
 8002e66:	f000 f87d 	bl	8002f64 <_printf_i>
 8002e6a:	e7e4      	b.n	8002e36 <_vfiprintf_r+0x1e6>
 8002e6c:	08003561 	.word	0x08003561
 8002e70:	08003567 	.word	0x08003567
 8002e74:	0800356b 	.word	0x0800356b
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	08002c2d 	.word	0x08002c2d

08002e80 <_printf_common>:
 8002e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e84:	4616      	mov	r6, r2
 8002e86:	4698      	mov	r8, r3
 8002e88:	688a      	ldr	r2, [r1, #8]
 8002e8a:	690b      	ldr	r3, [r1, #16]
 8002e8c:	4607      	mov	r7, r0
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	bfb8      	it	lt
 8002e92:	4613      	movlt	r3, r2
 8002e94:	6033      	str	r3, [r6, #0]
 8002e96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ea0:	b10a      	cbz	r2, 8002ea6 <_printf_common+0x26>
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	6033      	str	r3, [r6, #0]
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	0699      	lsls	r1, r3, #26
 8002eaa:	bf42      	ittt	mi
 8002eac:	6833      	ldrmi	r3, [r6, #0]
 8002eae:	3302      	addmi	r3, #2
 8002eb0:	6033      	strmi	r3, [r6, #0]
 8002eb2:	6825      	ldr	r5, [r4, #0]
 8002eb4:	f015 0506 	ands.w	r5, r5, #6
 8002eb8:	d106      	bne.n	8002ec8 <_printf_common+0x48>
 8002eba:	f104 0a19 	add.w	sl, r4, #25
 8002ebe:	68e3      	ldr	r3, [r4, #12]
 8002ec0:	6832      	ldr	r2, [r6, #0]
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	42ab      	cmp	r3, r5
 8002ec6:	dc2b      	bgt.n	8002f20 <_printf_common+0xa0>
 8002ec8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ecc:	6822      	ldr	r2, [r4, #0]
 8002ece:	3b00      	subs	r3, #0
 8002ed0:	bf18      	it	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	0692      	lsls	r2, r2, #26
 8002ed6:	d430      	bmi.n	8002f3a <_printf_common+0xba>
 8002ed8:	4641      	mov	r1, r8
 8002eda:	4638      	mov	r0, r7
 8002edc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ee0:	47c8      	blx	r9
 8002ee2:	3001      	adds	r0, #1
 8002ee4:	d023      	beq.n	8002f2e <_printf_common+0xae>
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	6922      	ldr	r2, [r4, #16]
 8002eea:	f003 0306 	and.w	r3, r3, #6
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	bf14      	ite	ne
 8002ef2:	2500      	movne	r5, #0
 8002ef4:	6833      	ldreq	r3, [r6, #0]
 8002ef6:	f04f 0600 	mov.w	r6, #0
 8002efa:	bf08      	it	eq
 8002efc:	68e5      	ldreq	r5, [r4, #12]
 8002efe:	f104 041a 	add.w	r4, r4, #26
 8002f02:	bf08      	it	eq
 8002f04:	1aed      	subeq	r5, r5, r3
 8002f06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f0a:	bf08      	it	eq
 8002f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bfc4      	itt	gt
 8002f14:	1a9b      	subgt	r3, r3, r2
 8002f16:	18ed      	addgt	r5, r5, r3
 8002f18:	42b5      	cmp	r5, r6
 8002f1a:	d11a      	bne.n	8002f52 <_printf_common+0xd2>
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	e008      	b.n	8002f32 <_printf_common+0xb2>
 8002f20:	2301      	movs	r3, #1
 8002f22:	4652      	mov	r2, sl
 8002f24:	4641      	mov	r1, r8
 8002f26:	4638      	mov	r0, r7
 8002f28:	47c8      	blx	r9
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d103      	bne.n	8002f36 <_printf_common+0xb6>
 8002f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f36:	3501      	adds	r5, #1
 8002f38:	e7c1      	b.n	8002ebe <_printf_common+0x3e>
 8002f3a:	2030      	movs	r0, #48	@ 0x30
 8002f3c:	18e1      	adds	r1, r4, r3
 8002f3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f48:	4422      	add	r2, r4
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f50:	e7c2      	b.n	8002ed8 <_printf_common+0x58>
 8002f52:	2301      	movs	r3, #1
 8002f54:	4622      	mov	r2, r4
 8002f56:	4641      	mov	r1, r8
 8002f58:	4638      	mov	r0, r7
 8002f5a:	47c8      	blx	r9
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	d0e6      	beq.n	8002f2e <_printf_common+0xae>
 8002f60:	3601      	adds	r6, #1
 8002f62:	e7d9      	b.n	8002f18 <_printf_common+0x98>

08002f64 <_printf_i>:
 8002f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f68:	7e0f      	ldrb	r7, [r1, #24]
 8002f6a:	4691      	mov	r9, r2
 8002f6c:	2f78      	cmp	r7, #120	@ 0x78
 8002f6e:	4680      	mov	r8, r0
 8002f70:	460c      	mov	r4, r1
 8002f72:	469a      	mov	sl, r3
 8002f74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f7a:	d807      	bhi.n	8002f8c <_printf_i+0x28>
 8002f7c:	2f62      	cmp	r7, #98	@ 0x62
 8002f7e:	d80a      	bhi.n	8002f96 <_printf_i+0x32>
 8002f80:	2f00      	cmp	r7, #0
 8002f82:	f000 80d1 	beq.w	8003128 <_printf_i+0x1c4>
 8002f86:	2f58      	cmp	r7, #88	@ 0x58
 8002f88:	f000 80b8 	beq.w	80030fc <_printf_i+0x198>
 8002f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f94:	e03a      	b.n	800300c <_printf_i+0xa8>
 8002f96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f9a:	2b15      	cmp	r3, #21
 8002f9c:	d8f6      	bhi.n	8002f8c <_printf_i+0x28>
 8002f9e:	a101      	add	r1, pc, #4	@ (adr r1, 8002fa4 <_printf_i+0x40>)
 8002fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fa4:	08002ffd 	.word	0x08002ffd
 8002fa8:	08003011 	.word	0x08003011
 8002fac:	08002f8d 	.word	0x08002f8d
 8002fb0:	08002f8d 	.word	0x08002f8d
 8002fb4:	08002f8d 	.word	0x08002f8d
 8002fb8:	08002f8d 	.word	0x08002f8d
 8002fbc:	08003011 	.word	0x08003011
 8002fc0:	08002f8d 	.word	0x08002f8d
 8002fc4:	08002f8d 	.word	0x08002f8d
 8002fc8:	08002f8d 	.word	0x08002f8d
 8002fcc:	08002f8d 	.word	0x08002f8d
 8002fd0:	0800310f 	.word	0x0800310f
 8002fd4:	0800303b 	.word	0x0800303b
 8002fd8:	080030c9 	.word	0x080030c9
 8002fdc:	08002f8d 	.word	0x08002f8d
 8002fe0:	08002f8d 	.word	0x08002f8d
 8002fe4:	08003131 	.word	0x08003131
 8002fe8:	08002f8d 	.word	0x08002f8d
 8002fec:	0800303b 	.word	0x0800303b
 8002ff0:	08002f8d 	.word	0x08002f8d
 8002ff4:	08002f8d 	.word	0x08002f8d
 8002ff8:	080030d1 	.word	0x080030d1
 8002ffc:	6833      	ldr	r3, [r6, #0]
 8002ffe:	1d1a      	adds	r2, r3, #4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6032      	str	r2, [r6, #0]
 8003004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003008:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800300c:	2301      	movs	r3, #1
 800300e:	e09c      	b.n	800314a <_printf_i+0x1e6>
 8003010:	6833      	ldr	r3, [r6, #0]
 8003012:	6820      	ldr	r0, [r4, #0]
 8003014:	1d19      	adds	r1, r3, #4
 8003016:	6031      	str	r1, [r6, #0]
 8003018:	0606      	lsls	r6, r0, #24
 800301a:	d501      	bpl.n	8003020 <_printf_i+0xbc>
 800301c:	681d      	ldr	r5, [r3, #0]
 800301e:	e003      	b.n	8003028 <_printf_i+0xc4>
 8003020:	0645      	lsls	r5, r0, #25
 8003022:	d5fb      	bpl.n	800301c <_printf_i+0xb8>
 8003024:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003028:	2d00      	cmp	r5, #0
 800302a:	da03      	bge.n	8003034 <_printf_i+0xd0>
 800302c:	232d      	movs	r3, #45	@ 0x2d
 800302e:	426d      	negs	r5, r5
 8003030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003034:	230a      	movs	r3, #10
 8003036:	4858      	ldr	r0, [pc, #352]	@ (8003198 <_printf_i+0x234>)
 8003038:	e011      	b.n	800305e <_printf_i+0xfa>
 800303a:	6821      	ldr	r1, [r4, #0]
 800303c:	6833      	ldr	r3, [r6, #0]
 800303e:	0608      	lsls	r0, r1, #24
 8003040:	f853 5b04 	ldr.w	r5, [r3], #4
 8003044:	d402      	bmi.n	800304c <_printf_i+0xe8>
 8003046:	0649      	lsls	r1, r1, #25
 8003048:	bf48      	it	mi
 800304a:	b2ad      	uxthmi	r5, r5
 800304c:	2f6f      	cmp	r7, #111	@ 0x6f
 800304e:	6033      	str	r3, [r6, #0]
 8003050:	bf14      	ite	ne
 8003052:	230a      	movne	r3, #10
 8003054:	2308      	moveq	r3, #8
 8003056:	4850      	ldr	r0, [pc, #320]	@ (8003198 <_printf_i+0x234>)
 8003058:	2100      	movs	r1, #0
 800305a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800305e:	6866      	ldr	r6, [r4, #4]
 8003060:	2e00      	cmp	r6, #0
 8003062:	60a6      	str	r6, [r4, #8]
 8003064:	db05      	blt.n	8003072 <_printf_i+0x10e>
 8003066:	6821      	ldr	r1, [r4, #0]
 8003068:	432e      	orrs	r6, r5
 800306a:	f021 0104 	bic.w	r1, r1, #4
 800306e:	6021      	str	r1, [r4, #0]
 8003070:	d04b      	beq.n	800310a <_printf_i+0x1a6>
 8003072:	4616      	mov	r6, r2
 8003074:	fbb5 f1f3 	udiv	r1, r5, r3
 8003078:	fb03 5711 	mls	r7, r3, r1, r5
 800307c:	5dc7      	ldrb	r7, [r0, r7]
 800307e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003082:	462f      	mov	r7, r5
 8003084:	42bb      	cmp	r3, r7
 8003086:	460d      	mov	r5, r1
 8003088:	d9f4      	bls.n	8003074 <_printf_i+0x110>
 800308a:	2b08      	cmp	r3, #8
 800308c:	d10b      	bne.n	80030a6 <_printf_i+0x142>
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	07df      	lsls	r7, r3, #31
 8003092:	d508      	bpl.n	80030a6 <_printf_i+0x142>
 8003094:	6923      	ldr	r3, [r4, #16]
 8003096:	6861      	ldr	r1, [r4, #4]
 8003098:	4299      	cmp	r1, r3
 800309a:	bfde      	ittt	le
 800309c:	2330      	movle	r3, #48	@ 0x30
 800309e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030a6:	1b92      	subs	r2, r2, r6
 80030a8:	6122      	str	r2, [r4, #16]
 80030aa:	464b      	mov	r3, r9
 80030ac:	4621      	mov	r1, r4
 80030ae:	4640      	mov	r0, r8
 80030b0:	f8cd a000 	str.w	sl, [sp]
 80030b4:	aa03      	add	r2, sp, #12
 80030b6:	f7ff fee3 	bl	8002e80 <_printf_common>
 80030ba:	3001      	adds	r0, #1
 80030bc:	d14a      	bne.n	8003154 <_printf_i+0x1f0>
 80030be:	f04f 30ff 	mov.w	r0, #4294967295
 80030c2:	b004      	add	sp, #16
 80030c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	f043 0320 	orr.w	r3, r3, #32
 80030ce:	6023      	str	r3, [r4, #0]
 80030d0:	2778      	movs	r7, #120	@ 0x78
 80030d2:	4832      	ldr	r0, [pc, #200]	@ (800319c <_printf_i+0x238>)
 80030d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	6831      	ldr	r1, [r6, #0]
 80030dc:	061f      	lsls	r7, r3, #24
 80030de:	f851 5b04 	ldr.w	r5, [r1], #4
 80030e2:	d402      	bmi.n	80030ea <_printf_i+0x186>
 80030e4:	065f      	lsls	r7, r3, #25
 80030e6:	bf48      	it	mi
 80030e8:	b2ad      	uxthmi	r5, r5
 80030ea:	6031      	str	r1, [r6, #0]
 80030ec:	07d9      	lsls	r1, r3, #31
 80030ee:	bf44      	itt	mi
 80030f0:	f043 0320 	orrmi.w	r3, r3, #32
 80030f4:	6023      	strmi	r3, [r4, #0]
 80030f6:	b11d      	cbz	r5, 8003100 <_printf_i+0x19c>
 80030f8:	2310      	movs	r3, #16
 80030fa:	e7ad      	b.n	8003058 <_printf_i+0xf4>
 80030fc:	4826      	ldr	r0, [pc, #152]	@ (8003198 <_printf_i+0x234>)
 80030fe:	e7e9      	b.n	80030d4 <_printf_i+0x170>
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	f023 0320 	bic.w	r3, r3, #32
 8003106:	6023      	str	r3, [r4, #0]
 8003108:	e7f6      	b.n	80030f8 <_printf_i+0x194>
 800310a:	4616      	mov	r6, r2
 800310c:	e7bd      	b.n	800308a <_printf_i+0x126>
 800310e:	6833      	ldr	r3, [r6, #0]
 8003110:	6825      	ldr	r5, [r4, #0]
 8003112:	1d18      	adds	r0, r3, #4
 8003114:	6961      	ldr	r1, [r4, #20]
 8003116:	6030      	str	r0, [r6, #0]
 8003118:	062e      	lsls	r6, r5, #24
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	d501      	bpl.n	8003122 <_printf_i+0x1be>
 800311e:	6019      	str	r1, [r3, #0]
 8003120:	e002      	b.n	8003128 <_printf_i+0x1c4>
 8003122:	0668      	lsls	r0, r5, #25
 8003124:	d5fb      	bpl.n	800311e <_printf_i+0x1ba>
 8003126:	8019      	strh	r1, [r3, #0]
 8003128:	2300      	movs	r3, #0
 800312a:	4616      	mov	r6, r2
 800312c:	6123      	str	r3, [r4, #16]
 800312e:	e7bc      	b.n	80030aa <_printf_i+0x146>
 8003130:	6833      	ldr	r3, [r6, #0]
 8003132:	2100      	movs	r1, #0
 8003134:	1d1a      	adds	r2, r3, #4
 8003136:	6032      	str	r2, [r6, #0]
 8003138:	681e      	ldr	r6, [r3, #0]
 800313a:	6862      	ldr	r2, [r4, #4]
 800313c:	4630      	mov	r0, r6
 800313e:	f000 f907 	bl	8003350 <memchr>
 8003142:	b108      	cbz	r0, 8003148 <_printf_i+0x1e4>
 8003144:	1b80      	subs	r0, r0, r6
 8003146:	6060      	str	r0, [r4, #4]
 8003148:	6863      	ldr	r3, [r4, #4]
 800314a:	6123      	str	r3, [r4, #16]
 800314c:	2300      	movs	r3, #0
 800314e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003152:	e7aa      	b.n	80030aa <_printf_i+0x146>
 8003154:	4632      	mov	r2, r6
 8003156:	4649      	mov	r1, r9
 8003158:	4640      	mov	r0, r8
 800315a:	6923      	ldr	r3, [r4, #16]
 800315c:	47d0      	blx	sl
 800315e:	3001      	adds	r0, #1
 8003160:	d0ad      	beq.n	80030be <_printf_i+0x15a>
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	079b      	lsls	r3, r3, #30
 8003166:	d413      	bmi.n	8003190 <_printf_i+0x22c>
 8003168:	68e0      	ldr	r0, [r4, #12]
 800316a:	9b03      	ldr	r3, [sp, #12]
 800316c:	4298      	cmp	r0, r3
 800316e:	bfb8      	it	lt
 8003170:	4618      	movlt	r0, r3
 8003172:	e7a6      	b.n	80030c2 <_printf_i+0x15e>
 8003174:	2301      	movs	r3, #1
 8003176:	4632      	mov	r2, r6
 8003178:	4649      	mov	r1, r9
 800317a:	4640      	mov	r0, r8
 800317c:	47d0      	blx	sl
 800317e:	3001      	adds	r0, #1
 8003180:	d09d      	beq.n	80030be <_printf_i+0x15a>
 8003182:	3501      	adds	r5, #1
 8003184:	68e3      	ldr	r3, [r4, #12]
 8003186:	9903      	ldr	r1, [sp, #12]
 8003188:	1a5b      	subs	r3, r3, r1
 800318a:	42ab      	cmp	r3, r5
 800318c:	dcf2      	bgt.n	8003174 <_printf_i+0x210>
 800318e:	e7eb      	b.n	8003168 <_printf_i+0x204>
 8003190:	2500      	movs	r5, #0
 8003192:	f104 0619 	add.w	r6, r4, #25
 8003196:	e7f5      	b.n	8003184 <_printf_i+0x220>
 8003198:	08003572 	.word	0x08003572
 800319c:	08003583 	.word	0x08003583

080031a0 <__swbuf_r>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	460e      	mov	r6, r1
 80031a4:	4614      	mov	r4, r2
 80031a6:	4605      	mov	r5, r0
 80031a8:	b118      	cbz	r0, 80031b2 <__swbuf_r+0x12>
 80031aa:	6a03      	ldr	r3, [r0, #32]
 80031ac:	b90b      	cbnz	r3, 80031b2 <__swbuf_r+0x12>
 80031ae:	f7ff fa45 	bl	800263c <__sinit>
 80031b2:	69a3      	ldr	r3, [r4, #24]
 80031b4:	60a3      	str	r3, [r4, #8]
 80031b6:	89a3      	ldrh	r3, [r4, #12]
 80031b8:	071a      	lsls	r2, r3, #28
 80031ba:	d501      	bpl.n	80031c0 <__swbuf_r+0x20>
 80031bc:	6923      	ldr	r3, [r4, #16]
 80031be:	b943      	cbnz	r3, 80031d2 <__swbuf_r+0x32>
 80031c0:	4621      	mov	r1, r4
 80031c2:	4628      	mov	r0, r5
 80031c4:	f000 f82a 	bl	800321c <__swsetup_r>
 80031c8:	b118      	cbz	r0, 80031d2 <__swbuf_r+0x32>
 80031ca:	f04f 37ff 	mov.w	r7, #4294967295
 80031ce:	4638      	mov	r0, r7
 80031d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	6922      	ldr	r2, [r4, #16]
 80031d6:	b2f6      	uxtb	r6, r6
 80031d8:	1a98      	subs	r0, r3, r2
 80031da:	6963      	ldr	r3, [r4, #20]
 80031dc:	4637      	mov	r7, r6
 80031de:	4283      	cmp	r3, r0
 80031e0:	dc05      	bgt.n	80031ee <__swbuf_r+0x4e>
 80031e2:	4621      	mov	r1, r4
 80031e4:	4628      	mov	r0, r5
 80031e6:	f7ff fcbb 	bl	8002b60 <_fflush_r>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d1ed      	bne.n	80031ca <__swbuf_r+0x2a>
 80031ee:	68a3      	ldr	r3, [r4, #8]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	60a3      	str	r3, [r4, #8]
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	6022      	str	r2, [r4, #0]
 80031fa:	701e      	strb	r6, [r3, #0]
 80031fc:	6962      	ldr	r2, [r4, #20]
 80031fe:	1c43      	adds	r3, r0, #1
 8003200:	429a      	cmp	r2, r3
 8003202:	d004      	beq.n	800320e <__swbuf_r+0x6e>
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	07db      	lsls	r3, r3, #31
 8003208:	d5e1      	bpl.n	80031ce <__swbuf_r+0x2e>
 800320a:	2e0a      	cmp	r6, #10
 800320c:	d1df      	bne.n	80031ce <__swbuf_r+0x2e>
 800320e:	4621      	mov	r1, r4
 8003210:	4628      	mov	r0, r5
 8003212:	f7ff fca5 	bl	8002b60 <_fflush_r>
 8003216:	2800      	cmp	r0, #0
 8003218:	d0d9      	beq.n	80031ce <__swbuf_r+0x2e>
 800321a:	e7d6      	b.n	80031ca <__swbuf_r+0x2a>

0800321c <__swsetup_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4b29      	ldr	r3, [pc, #164]	@ (80032c4 <__swsetup_r+0xa8>)
 8003220:	4605      	mov	r5, r0
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	460c      	mov	r4, r1
 8003226:	b118      	cbz	r0, 8003230 <__swsetup_r+0x14>
 8003228:	6a03      	ldr	r3, [r0, #32]
 800322a:	b90b      	cbnz	r3, 8003230 <__swsetup_r+0x14>
 800322c:	f7ff fa06 	bl	800263c <__sinit>
 8003230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003234:	0719      	lsls	r1, r3, #28
 8003236:	d422      	bmi.n	800327e <__swsetup_r+0x62>
 8003238:	06da      	lsls	r2, r3, #27
 800323a:	d407      	bmi.n	800324c <__swsetup_r+0x30>
 800323c:	2209      	movs	r2, #9
 800323e:	602a      	str	r2, [r5, #0]
 8003240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	81a3      	strh	r3, [r4, #12]
 800324a:	e033      	b.n	80032b4 <__swsetup_r+0x98>
 800324c:	0758      	lsls	r0, r3, #29
 800324e:	d512      	bpl.n	8003276 <__swsetup_r+0x5a>
 8003250:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003252:	b141      	cbz	r1, 8003266 <__swsetup_r+0x4a>
 8003254:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003258:	4299      	cmp	r1, r3
 800325a:	d002      	beq.n	8003262 <__swsetup_r+0x46>
 800325c:	4628      	mov	r0, r5
 800325e:	f7ff fb01 	bl	8002864 <_free_r>
 8003262:	2300      	movs	r3, #0
 8003264:	6363      	str	r3, [r4, #52]	@ 0x34
 8003266:	89a3      	ldrh	r3, [r4, #12]
 8003268:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800326c:	81a3      	strh	r3, [r4, #12]
 800326e:	2300      	movs	r3, #0
 8003270:	6063      	str	r3, [r4, #4]
 8003272:	6923      	ldr	r3, [r4, #16]
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	81a3      	strh	r3, [r4, #12]
 800327e:	6923      	ldr	r3, [r4, #16]
 8003280:	b94b      	cbnz	r3, 8003296 <__swsetup_r+0x7a>
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800328c:	d003      	beq.n	8003296 <__swsetup_r+0x7a>
 800328e:	4621      	mov	r1, r4
 8003290:	4628      	mov	r0, r5
 8003292:	f000 f890 	bl	80033b6 <__smakebuf_r>
 8003296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800329a:	f013 0201 	ands.w	r2, r3, #1
 800329e:	d00a      	beq.n	80032b6 <__swsetup_r+0x9a>
 80032a0:	2200      	movs	r2, #0
 80032a2:	60a2      	str	r2, [r4, #8]
 80032a4:	6962      	ldr	r2, [r4, #20]
 80032a6:	4252      	negs	r2, r2
 80032a8:	61a2      	str	r2, [r4, #24]
 80032aa:	6922      	ldr	r2, [r4, #16]
 80032ac:	b942      	cbnz	r2, 80032c0 <__swsetup_r+0xa4>
 80032ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80032b2:	d1c5      	bne.n	8003240 <__swsetup_r+0x24>
 80032b4:	bd38      	pop	{r3, r4, r5, pc}
 80032b6:	0799      	lsls	r1, r3, #30
 80032b8:	bf58      	it	pl
 80032ba:	6962      	ldrpl	r2, [r4, #20]
 80032bc:	60a2      	str	r2, [r4, #8]
 80032be:	e7f4      	b.n	80032aa <__swsetup_r+0x8e>
 80032c0:	2000      	movs	r0, #0
 80032c2:	e7f7      	b.n	80032b4 <__swsetup_r+0x98>
 80032c4:	20000218 	.word	0x20000218

080032c8 <_raise_r>:
 80032c8:	291f      	cmp	r1, #31
 80032ca:	b538      	push	{r3, r4, r5, lr}
 80032cc:	4605      	mov	r5, r0
 80032ce:	460c      	mov	r4, r1
 80032d0:	d904      	bls.n	80032dc <_raise_r+0x14>
 80032d2:	2316      	movs	r3, #22
 80032d4:	6003      	str	r3, [r0, #0]
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	bd38      	pop	{r3, r4, r5, pc}
 80032dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80032de:	b112      	cbz	r2, 80032e6 <_raise_r+0x1e>
 80032e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80032e4:	b94b      	cbnz	r3, 80032fa <_raise_r+0x32>
 80032e6:	4628      	mov	r0, r5
 80032e8:	f000 f830 	bl	800334c <_getpid_r>
 80032ec:	4622      	mov	r2, r4
 80032ee:	4601      	mov	r1, r0
 80032f0:	4628      	mov	r0, r5
 80032f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032f6:	f000 b817 	b.w	8003328 <_kill_r>
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d00a      	beq.n	8003314 <_raise_r+0x4c>
 80032fe:	1c59      	adds	r1, r3, #1
 8003300:	d103      	bne.n	800330a <_raise_r+0x42>
 8003302:	2316      	movs	r3, #22
 8003304:	6003      	str	r3, [r0, #0]
 8003306:	2001      	movs	r0, #1
 8003308:	e7e7      	b.n	80032da <_raise_r+0x12>
 800330a:	2100      	movs	r1, #0
 800330c:	4620      	mov	r0, r4
 800330e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003312:	4798      	blx	r3
 8003314:	2000      	movs	r0, #0
 8003316:	e7e0      	b.n	80032da <_raise_r+0x12>

08003318 <raise>:
 8003318:	4b02      	ldr	r3, [pc, #8]	@ (8003324 <raise+0xc>)
 800331a:	4601      	mov	r1, r0
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	f7ff bfd3 	b.w	80032c8 <_raise_r>
 8003322:	bf00      	nop
 8003324:	20000218 	.word	0x20000218

08003328 <_kill_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	2300      	movs	r3, #0
 800332c:	4d06      	ldr	r5, [pc, #24]	@ (8003348 <_kill_r+0x20>)
 800332e:	4604      	mov	r4, r0
 8003330:	4608      	mov	r0, r1
 8003332:	4611      	mov	r1, r2
 8003334:	602b      	str	r3, [r5, #0]
 8003336:	f7fd fc2a 	bl	8000b8e <_kill>
 800333a:	1c43      	adds	r3, r0, #1
 800333c:	d102      	bne.n	8003344 <_kill_r+0x1c>
 800333e:	682b      	ldr	r3, [r5, #0]
 8003340:	b103      	cbz	r3, 8003344 <_kill_r+0x1c>
 8003342:	6023      	str	r3, [r4, #0]
 8003344:	bd38      	pop	{r3, r4, r5, pc}
 8003346:	bf00      	nop
 8003348:	20000600 	.word	0x20000600

0800334c <_getpid_r>:
 800334c:	f7fd bc18 	b.w	8000b80 <_getpid>

08003350 <memchr>:
 8003350:	4603      	mov	r3, r0
 8003352:	b510      	push	{r4, lr}
 8003354:	b2c9      	uxtb	r1, r1
 8003356:	4402      	add	r2, r0
 8003358:	4293      	cmp	r3, r2
 800335a:	4618      	mov	r0, r3
 800335c:	d101      	bne.n	8003362 <memchr+0x12>
 800335e:	2000      	movs	r0, #0
 8003360:	e003      	b.n	800336a <memchr+0x1a>
 8003362:	7804      	ldrb	r4, [r0, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	428c      	cmp	r4, r1
 8003368:	d1f6      	bne.n	8003358 <memchr+0x8>
 800336a:	bd10      	pop	{r4, pc}

0800336c <__swhatbuf_r>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	460c      	mov	r4, r1
 8003370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003374:	4615      	mov	r5, r2
 8003376:	2900      	cmp	r1, #0
 8003378:	461e      	mov	r6, r3
 800337a:	b096      	sub	sp, #88	@ 0x58
 800337c:	da0c      	bge.n	8003398 <__swhatbuf_r+0x2c>
 800337e:	89a3      	ldrh	r3, [r4, #12]
 8003380:	2100      	movs	r1, #0
 8003382:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003386:	bf14      	ite	ne
 8003388:	2340      	movne	r3, #64	@ 0x40
 800338a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800338e:	2000      	movs	r0, #0
 8003390:	6031      	str	r1, [r6, #0]
 8003392:	602b      	str	r3, [r5, #0]
 8003394:	b016      	add	sp, #88	@ 0x58
 8003396:	bd70      	pop	{r4, r5, r6, pc}
 8003398:	466a      	mov	r2, sp
 800339a:	f000 f849 	bl	8003430 <_fstat_r>
 800339e:	2800      	cmp	r0, #0
 80033a0:	dbed      	blt.n	800337e <__swhatbuf_r+0x12>
 80033a2:	9901      	ldr	r1, [sp, #4]
 80033a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80033a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80033ac:	4259      	negs	r1, r3
 80033ae:	4159      	adcs	r1, r3
 80033b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033b4:	e7eb      	b.n	800338e <__swhatbuf_r+0x22>

080033b6 <__smakebuf_r>:
 80033b6:	898b      	ldrh	r3, [r1, #12]
 80033b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033ba:	079d      	lsls	r5, r3, #30
 80033bc:	4606      	mov	r6, r0
 80033be:	460c      	mov	r4, r1
 80033c0:	d507      	bpl.n	80033d2 <__smakebuf_r+0x1c>
 80033c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80033c6:	6023      	str	r3, [r4, #0]
 80033c8:	6123      	str	r3, [r4, #16]
 80033ca:	2301      	movs	r3, #1
 80033cc:	6163      	str	r3, [r4, #20]
 80033ce:	b003      	add	sp, #12
 80033d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033d2:	466a      	mov	r2, sp
 80033d4:	ab01      	add	r3, sp, #4
 80033d6:	f7ff ffc9 	bl	800336c <__swhatbuf_r>
 80033da:	9f00      	ldr	r7, [sp, #0]
 80033dc:	4605      	mov	r5, r0
 80033de:	4639      	mov	r1, r7
 80033e0:	4630      	mov	r0, r6
 80033e2:	f7ff fab1 	bl	8002948 <_malloc_r>
 80033e6:	b948      	cbnz	r0, 80033fc <__smakebuf_r+0x46>
 80033e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ec:	059a      	lsls	r2, r3, #22
 80033ee:	d4ee      	bmi.n	80033ce <__smakebuf_r+0x18>
 80033f0:	f023 0303 	bic.w	r3, r3, #3
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	81a3      	strh	r3, [r4, #12]
 80033fa:	e7e2      	b.n	80033c2 <__smakebuf_r+0xc>
 80033fc:	89a3      	ldrh	r3, [r4, #12]
 80033fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003406:	81a3      	strh	r3, [r4, #12]
 8003408:	9b01      	ldr	r3, [sp, #4]
 800340a:	6020      	str	r0, [r4, #0]
 800340c:	b15b      	cbz	r3, 8003426 <__smakebuf_r+0x70>
 800340e:	4630      	mov	r0, r6
 8003410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003414:	f000 f81e 	bl	8003454 <_isatty_r>
 8003418:	b128      	cbz	r0, 8003426 <__smakebuf_r+0x70>
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	f023 0303 	bic.w	r3, r3, #3
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	81a3      	strh	r3, [r4, #12]
 8003426:	89a3      	ldrh	r3, [r4, #12]
 8003428:	431d      	orrs	r5, r3
 800342a:	81a5      	strh	r5, [r4, #12]
 800342c:	e7cf      	b.n	80033ce <__smakebuf_r+0x18>
	...

08003430 <_fstat_r>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	2300      	movs	r3, #0
 8003434:	4d06      	ldr	r5, [pc, #24]	@ (8003450 <_fstat_r+0x20>)
 8003436:	4604      	mov	r4, r0
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	602b      	str	r3, [r5, #0]
 800343e:	f7fd fc05 	bl	8000c4c <_fstat>
 8003442:	1c43      	adds	r3, r0, #1
 8003444:	d102      	bne.n	800344c <_fstat_r+0x1c>
 8003446:	682b      	ldr	r3, [r5, #0]
 8003448:	b103      	cbz	r3, 800344c <_fstat_r+0x1c>
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	bd38      	pop	{r3, r4, r5, pc}
 800344e:	bf00      	nop
 8003450:	20000600 	.word	0x20000600

08003454 <_isatty_r>:
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	2300      	movs	r3, #0
 8003458:	4d05      	ldr	r5, [pc, #20]	@ (8003470 <_isatty_r+0x1c>)
 800345a:	4604      	mov	r4, r0
 800345c:	4608      	mov	r0, r1
 800345e:	602b      	str	r3, [r5, #0]
 8003460:	f7fd fc03 	bl	8000c6a <_isatty>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d102      	bne.n	800346e <_isatty_r+0x1a>
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	b103      	cbz	r3, 800346e <_isatty_r+0x1a>
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	bd38      	pop	{r3, r4, r5, pc}
 8003470:	20000600 	.word	0x20000600

08003474 <_init>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	bf00      	nop
 8003478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347a:	bc08      	pop	{r3}
 800347c:	469e      	mov	lr, r3
 800347e:	4770      	bx	lr

08003480 <_fini>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr
